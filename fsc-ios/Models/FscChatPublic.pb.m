// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscChatPublic.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscChatPublicRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscChatPublicRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FscTeachNodeRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PUserPb ()
@property SInt64 id;
@property (strong) NSString* code;
@property BOOL isGroup;
@property (strong) NSString* groupCode;
@property (strong) NSString* name;
@property (strong) NSString* introduce;
@property BOOL inputMsg;
@property BOOL inputMenu;
@property SInt32 dataStatus;
@property SInt64 modifiedDate;
@property (strong) NSMutableArray * menuPbArray;
@end

@implementation PUserPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasIsGroup {
  return !!hasIsGroup_;
}
- (void) setHasIsGroup:(BOOL) _value_ {
  hasIsGroup_ = !!_value_;
}
- (BOOL) isGroup {
  return !!isGroup_;
}
- (void) setIsGroup:(BOOL) _value_ {
  isGroup_ = !!_value_;
}
- (BOOL) hasGroupCode {
  return !!hasGroupCode_;
}
- (void) setHasGroupCode:(BOOL) _value_ {
  hasGroupCode_ = !!_value_;
}
@synthesize groupCode;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasIntroduce {
  return !!hasIntroduce_;
}
- (void) setHasIntroduce:(BOOL) _value_ {
  hasIntroduce_ = !!_value_;
}
@synthesize introduce;
- (BOOL) hasInputMsg {
  return !!hasInputMsg_;
}
- (void) setHasInputMsg:(BOOL) _value_ {
  hasInputMsg_ = !!_value_;
}
- (BOOL) inputMsg {
  return !!inputMsg_;
}
- (void) setInputMsg:(BOOL) _value_ {
  inputMsg_ = !!_value_;
}
- (BOOL) hasInputMenu {
  return !!hasInputMenu_;
}
- (void) setHasInputMenu:(BOOL) _value_ {
  hasInputMenu_ = !!_value_;
}
- (BOOL) inputMenu {
  return !!inputMenu_;
}
- (void) setInputMenu:(BOOL) _value_ {
  inputMenu_ = !!_value_;
}
- (BOOL) hasDataStatus {
  return !!hasDataStatus_;
}
- (void) setHasDataStatus:(BOOL) _value_ {
  hasDataStatus_ = !!_value_;
}
@synthesize dataStatus;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
@synthesize menuPbArray;
@dynamic menuPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.code = @"";
    self.isGroup = NO;
    self.groupCode = @"";
    self.name = @"";
    self.introduce = @"";
    self.inputMsg = NO;
    self.inputMenu = NO;
    self.dataStatus = 0;
    self.modifiedDate = 0L;
  }
  return self;
}
static PUserPb* defaultPUserPbInstance = nil;
+ (void) initialize {
  if (self == [PUserPb class]) {
    defaultPUserPbInstance = [[PUserPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPUserPbInstance;
}
- (instancetype) defaultInstance {
  return defaultPUserPbInstance;
}
- (NSArray *)menuPb {
  return menuPbArray;
}
- (PMenuPb*)menuPbAtIndex:(NSUInteger)index {
  return [menuPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasIsGroup) {
    [output writeBool:3 value:self.isGroup];
  }
  if (self.hasGroupCode) {
    [output writeString:4 value:self.groupCode];
  }
  if (self.hasName) {
    [output writeString:5 value:self.name];
  }
  if (self.hasIntroduce) {
    [output writeString:6 value:self.introduce];
  }
  if (self.hasInputMsg) {
    [output writeBool:7 value:self.inputMsg];
  }
  if (self.hasInputMenu) {
    [output writeBool:8 value:self.inputMenu];
  }
  if (self.hasDataStatus) {
    [output writeInt32:9 value:self.dataStatus];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:10 value:self.modifiedDate];
  }
  [self.menuPbArray enumerateObjectsUsingBlock:^(PMenuPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasCode) {
    size_ += computeStringSize(2, self.code);
  }
  if (self.hasIsGroup) {
    size_ += computeBoolSize(3, self.isGroup);
  }
  if (self.hasGroupCode) {
    size_ += computeStringSize(4, self.groupCode);
  }
  if (self.hasName) {
    size_ += computeStringSize(5, self.name);
  }
  if (self.hasIntroduce) {
    size_ += computeStringSize(6, self.introduce);
  }
  if (self.hasInputMsg) {
    size_ += computeBoolSize(7, self.inputMsg);
  }
  if (self.hasInputMenu) {
    size_ += computeBoolSize(8, self.inputMenu);
  }
  if (self.hasDataStatus) {
    size_ += computeInt32Size(9, self.dataStatus);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(10, self.modifiedDate);
  }
  [self.menuPbArray enumerateObjectsUsingBlock:^(PMenuPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PUserPb*) parseFromData:(NSData*) data {
  return (PUserPb*)[[[PUserPb builder] mergeFromData:data] build];
}
+ (PUserPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PUserPb*)[[[PUserPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PUserPb*) parseFromInputStream:(NSInputStream*) input {
  return (PUserPb*)[[[PUserPb builder] mergeFromInputStream:input] build];
}
+ (PUserPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PUserPb*)[[[PUserPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PUserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PUserPb*)[[[PUserPb builder] mergeFromCodedInputStream:input] build];
}
+ (PUserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PUserPb*)[[[PUserPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PUserPbBuilder*) builder {
  return [[PUserPbBuilder alloc] init];
}
+ (PUserPbBuilder*) builderWithPrototype:(PUserPb*) prototype {
  return [[PUserPb builder] mergeFrom:prototype];
}
- (PUserPbBuilder*) builder {
  return [PUserPb builder];
}
- (PUserPbBuilder*) toBuilder {
  return [PUserPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasIsGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isGroup", [NSNumber numberWithBool:self.isGroup]];
  }
  if (self.hasGroupCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupCode", self.groupCode];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasIntroduce) {
    [output appendFormat:@"%@%@: %@\n", indent, @"introduce", self.introduce];
  }
  if (self.hasInputMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inputMsg", [NSNumber numberWithBool:self.inputMsg]];
  }
  if (self.hasInputMenu) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inputMenu", [NSNumber numberWithBool:self.inputMenu]];
  }
  if (self.hasDataStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataStatus", [NSNumber numberWithInteger:self.dataStatus]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  [self.menuPbArray enumerateObjectsUsingBlock:^(PMenuPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"menuPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasCode) {
    [dictionary setObject: self.code forKey: @"code"];
  }
  if (self.hasIsGroup) {
    [dictionary setObject: [NSNumber numberWithBool:self.isGroup] forKey: @"isGroup"];
  }
  if (self.hasGroupCode) {
    [dictionary setObject: self.groupCode forKey: @"groupCode"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasIntroduce) {
    [dictionary setObject: self.introduce forKey: @"introduce"];
  }
  if (self.hasInputMsg) {
    [dictionary setObject: [NSNumber numberWithBool:self.inputMsg] forKey: @"inputMsg"];
  }
  if (self.hasInputMenu) {
    [dictionary setObject: [NSNumber numberWithBool:self.inputMenu] forKey: @"inputMenu"];
  }
  if (self.hasDataStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dataStatus] forKey: @"dataStatus"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  for (PMenuPb* element in self.menuPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"menuPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PUserPb class]]) {
    return NO;
  }
  PUserPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasIsGroup == otherMessage.hasIsGroup &&
      (!self.hasIsGroup || self.isGroup == otherMessage.isGroup) &&
      self.hasGroupCode == otherMessage.hasGroupCode &&
      (!self.hasGroupCode || [self.groupCode isEqual:otherMessage.groupCode]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasIntroduce == otherMessage.hasIntroduce &&
      (!self.hasIntroduce || [self.introduce isEqual:otherMessage.introduce]) &&
      self.hasInputMsg == otherMessage.hasInputMsg &&
      (!self.hasInputMsg || self.inputMsg == otherMessage.inputMsg) &&
      self.hasInputMenu == otherMessage.hasInputMenu &&
      (!self.hasInputMenu || self.inputMenu == otherMessage.inputMenu) &&
      self.hasDataStatus == otherMessage.hasDataStatus &&
      (!self.hasDataStatus || self.dataStatus == otherMessage.dataStatus) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      [self.menuPbArray isEqualToArray:otherMessage.menuPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasIsGroup) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isGroup] hash];
  }
  if (self.hasGroupCode) {
    hashCode = hashCode * 31 + [self.groupCode hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasIntroduce) {
    hashCode = hashCode * 31 + [self.introduce hash];
  }
  if (self.hasInputMsg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inputMsg] hash];
  }
  if (self.hasInputMenu) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inputMenu] hash];
  }
  if (self.hasDataStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dataStatus] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  [self.menuPbArray enumerateObjectsUsingBlock:^(PMenuPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PUserPbBuilder()
@property (strong) PUserPb* resultPuserPb;
@end

@implementation PUserPbBuilder
@synthesize resultPuserPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPuserPb = [[PUserPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPuserPb;
}
- (PUserPbBuilder*) clear {
  self.resultPuserPb = [[PUserPb alloc] init];
  return self;
}
- (PUserPbBuilder*) clone {
  return [PUserPb builderWithPrototype:resultPuserPb];
}
- (PUserPb*) defaultInstance {
  return [PUserPb defaultInstance];
}
- (PUserPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PUserPb*) buildPartial {
  PUserPb* returnMe = resultPuserPb;
  self.resultPuserPb = nil;
  return returnMe;
}
- (PUserPbBuilder*) mergeFrom:(PUserPb*) other {
  if (other == [PUserPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasIsGroup) {
    [self setIsGroup:other.isGroup];
  }
  if (other.hasGroupCode) {
    [self setGroupCode:other.groupCode];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasIntroduce) {
    [self setIntroduce:other.introduce];
  }
  if (other.hasInputMsg) {
    [self setInputMsg:other.inputMsg];
  }
  if (other.hasInputMenu) {
    [self setInputMenu:other.inputMenu];
  }
  if (other.hasDataStatus) {
    [self setDataStatus:other.dataStatus];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.menuPbArray.count > 0) {
    if (resultPuserPb.menuPbArray == nil) {
      resultPuserPb.menuPbArray = [[NSMutableArray alloc] initWithArray:other.menuPbArray];
    } else {
      [resultPuserPb.menuPbArray addObjectsFromArray:other.menuPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PUserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PUserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 24: {
        [self setIsGroup:[input readBool]];
        break;
      }
      case 34: {
        [self setGroupCode:[input readString]];
        break;
      }
      case 42: {
        [self setName:[input readString]];
        break;
      }
      case 50: {
        [self setIntroduce:[input readString]];
        break;
      }
      case 56: {
        [self setInputMsg:[input readBool]];
        break;
      }
      case 64: {
        [self setInputMenu:[input readBool]];
        break;
      }
      case 72: {
        [self setDataStatus:[input readInt32]];
        break;
      }
      case 80: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 90: {
        PMenuPbBuilder* subBuilder = [PMenuPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMenuPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultPuserPb.hasId;
}
- (SInt64) id {
  return resultPuserPb.id;
}
- (PUserPbBuilder*) setId:(SInt64) value {
  resultPuserPb.hasId = YES;
  resultPuserPb.id = value;
  return self;
}
- (PUserPbBuilder*) clearId {
  resultPuserPb.hasId = NO;
  resultPuserPb.id = 0L;
  return self;
}
- (BOOL) hasCode {
  return resultPuserPb.hasCode;
}
- (NSString*) code {
  return resultPuserPb.code;
}
- (PUserPbBuilder*) setCode:(NSString*) value {
  resultPuserPb.hasCode = YES;
  resultPuserPb.code = value;
  return self;
}
- (PUserPbBuilder*) clearCode {
  resultPuserPb.hasCode = NO;
  resultPuserPb.code = @"";
  return self;
}
- (BOOL) hasIsGroup {
  return resultPuserPb.hasIsGroup;
}
- (BOOL) isGroup {
  return resultPuserPb.isGroup;
}
- (PUserPbBuilder*) setIsGroup:(BOOL) value {
  resultPuserPb.hasIsGroup = YES;
  resultPuserPb.isGroup = value;
  return self;
}
- (PUserPbBuilder*) clearIsGroup {
  resultPuserPb.hasIsGroup = NO;
  resultPuserPb.isGroup = NO;
  return self;
}
- (BOOL) hasGroupCode {
  return resultPuserPb.hasGroupCode;
}
- (NSString*) groupCode {
  return resultPuserPb.groupCode;
}
- (PUserPbBuilder*) setGroupCode:(NSString*) value {
  resultPuserPb.hasGroupCode = YES;
  resultPuserPb.groupCode = value;
  return self;
}
- (PUserPbBuilder*) clearGroupCode {
  resultPuserPb.hasGroupCode = NO;
  resultPuserPb.groupCode = @"";
  return self;
}
- (BOOL) hasName {
  return resultPuserPb.hasName;
}
- (NSString*) name {
  return resultPuserPb.name;
}
- (PUserPbBuilder*) setName:(NSString*) value {
  resultPuserPb.hasName = YES;
  resultPuserPb.name = value;
  return self;
}
- (PUserPbBuilder*) clearName {
  resultPuserPb.hasName = NO;
  resultPuserPb.name = @"";
  return self;
}
- (BOOL) hasIntroduce {
  return resultPuserPb.hasIntroduce;
}
- (NSString*) introduce {
  return resultPuserPb.introduce;
}
- (PUserPbBuilder*) setIntroduce:(NSString*) value {
  resultPuserPb.hasIntroduce = YES;
  resultPuserPb.introduce = value;
  return self;
}
- (PUserPbBuilder*) clearIntroduce {
  resultPuserPb.hasIntroduce = NO;
  resultPuserPb.introduce = @"";
  return self;
}
- (BOOL) hasInputMsg {
  return resultPuserPb.hasInputMsg;
}
- (BOOL) inputMsg {
  return resultPuserPb.inputMsg;
}
- (PUserPbBuilder*) setInputMsg:(BOOL) value {
  resultPuserPb.hasInputMsg = YES;
  resultPuserPb.inputMsg = value;
  return self;
}
- (PUserPbBuilder*) clearInputMsg {
  resultPuserPb.hasInputMsg = NO;
  resultPuserPb.inputMsg = NO;
  return self;
}
- (BOOL) hasInputMenu {
  return resultPuserPb.hasInputMenu;
}
- (BOOL) inputMenu {
  return resultPuserPb.inputMenu;
}
- (PUserPbBuilder*) setInputMenu:(BOOL) value {
  resultPuserPb.hasInputMenu = YES;
  resultPuserPb.inputMenu = value;
  return self;
}
- (PUserPbBuilder*) clearInputMenu {
  resultPuserPb.hasInputMenu = NO;
  resultPuserPb.inputMenu = NO;
  return self;
}
- (BOOL) hasDataStatus {
  return resultPuserPb.hasDataStatus;
}
- (SInt32) dataStatus {
  return resultPuserPb.dataStatus;
}
- (PUserPbBuilder*) setDataStatus:(SInt32) value {
  resultPuserPb.hasDataStatus = YES;
  resultPuserPb.dataStatus = value;
  return self;
}
- (PUserPbBuilder*) clearDataStatus {
  resultPuserPb.hasDataStatus = NO;
  resultPuserPb.dataStatus = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultPuserPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultPuserPb.modifiedDate;
}
- (PUserPbBuilder*) setModifiedDate:(SInt64) value {
  resultPuserPb.hasModifiedDate = YES;
  resultPuserPb.modifiedDate = value;
  return self;
}
- (PUserPbBuilder*) clearModifiedDate {
  resultPuserPb.hasModifiedDate = NO;
  resultPuserPb.modifiedDate = 0L;
  return self;
}
- (NSMutableArray *)menuPb {
  return resultPuserPb.menuPbArray;
}
- (PMenuPb*)menuPbAtIndex:(NSUInteger)index {
  return [resultPuserPb menuPbAtIndex:index];
}
- (PUserPbBuilder *)addMenuPb:(PMenuPb*)value {
  if (resultPuserPb.menuPbArray == nil) {
    resultPuserPb.menuPbArray = [[NSMutableArray alloc]init];
  }
  [resultPuserPb.menuPbArray addObject:value];
  return self;
}
- (PUserPbBuilder *)setMenuPbArray:(NSArray *)array {
  resultPuserPb.menuPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PUserPbBuilder *)clearMenuPb {
  resultPuserPb.menuPbArray = nil;
  return self;
}
@end

@interface PUserListPb ()
@property (strong) NSMutableArray * userPbArray;
@end

@implementation PUserListPb

@synthesize userPbArray;
@dynamic userPb;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PUserListPb* defaultPUserListPbInstance = nil;
+ (void) initialize {
  if (self == [PUserListPb class]) {
    defaultPUserListPbInstance = [[PUserListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPUserListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultPUserListPbInstance;
}
- (NSArray *)userPb {
  return userPbArray;
}
- (PUserPb*)userPbAtIndex:(NSUInteger)index {
  return [userPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userPbArray enumerateObjectsUsingBlock:^(PUserPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userPbArray enumerateObjectsUsingBlock:^(PUserPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PUserListPb*) parseFromData:(NSData*) data {
  return (PUserListPb*)[[[PUserListPb builder] mergeFromData:data] build];
}
+ (PUserListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PUserListPb*)[[[PUserListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PUserListPb*) parseFromInputStream:(NSInputStream*) input {
  return (PUserListPb*)[[[PUserListPb builder] mergeFromInputStream:input] build];
}
+ (PUserListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PUserListPb*)[[[PUserListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PUserListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PUserListPb*)[[[PUserListPb builder] mergeFromCodedInputStream:input] build];
}
+ (PUserListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PUserListPb*)[[[PUserListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PUserListPbBuilder*) builder {
  return [[PUserListPbBuilder alloc] init];
}
+ (PUserListPbBuilder*) builderWithPrototype:(PUserListPb*) prototype {
  return [[PUserListPb builder] mergeFrom:prototype];
}
- (PUserListPbBuilder*) builder {
  return [PUserListPb builder];
}
- (PUserListPbBuilder*) toBuilder {
  return [PUserListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userPbArray enumerateObjectsUsingBlock:^(PUserPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (PUserPb* element in self.userPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PUserListPb class]]) {
    return NO;
  }
  PUserListPb *otherMessage = other;
  return
      [self.userPbArray isEqualToArray:otherMessage.userPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userPbArray enumerateObjectsUsingBlock:^(PUserPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PUserListPbBuilder()
@property (strong) PUserListPb* resultPuserListPb;
@end

@implementation PUserListPbBuilder
@synthesize resultPuserListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPuserListPb = [[PUserListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPuserListPb;
}
- (PUserListPbBuilder*) clear {
  self.resultPuserListPb = [[PUserListPb alloc] init];
  return self;
}
- (PUserListPbBuilder*) clone {
  return [PUserListPb builderWithPrototype:resultPuserListPb];
}
- (PUserListPb*) defaultInstance {
  return [PUserListPb defaultInstance];
}
- (PUserListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PUserListPb*) buildPartial {
  PUserListPb* returnMe = resultPuserListPb;
  self.resultPuserListPb = nil;
  return returnMe;
}
- (PUserListPbBuilder*) mergeFrom:(PUserListPb*) other {
  if (other == [PUserListPb defaultInstance]) {
    return self;
  }
  if (other.userPbArray.count > 0) {
    if (resultPuserListPb.userPbArray == nil) {
      resultPuserListPb.userPbArray = [[NSMutableArray alloc] initWithArray:other.userPbArray];
    } else {
      [resultPuserListPb.userPbArray addObjectsFromArray:other.userPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PUserListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PUserListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PUserPbBuilder* subBuilder = [PUserPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userPb {
  return resultPuserListPb.userPbArray;
}
- (PUserPb*)userPbAtIndex:(NSUInteger)index {
  return [resultPuserListPb userPbAtIndex:index];
}
- (PUserListPbBuilder *)addUserPb:(PUserPb*)value {
  if (resultPuserListPb.userPbArray == nil) {
    resultPuserListPb.userPbArray = [[NSMutableArray alloc]init];
  }
  [resultPuserListPb.userPbArray addObject:value];
  return self;
}
- (PUserListPbBuilder *)setUserPbArray:(NSArray *)array {
  resultPuserListPb.userPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PUserListPbBuilder *)clearUserPb {
  resultPuserListPb.userPbArray = nil;
  return self;
}
@end

@interface PMenuPb ()
@property SInt64 id;
@property SInt64 publicId;
@property (strong) NSString* itemName;
@property SInt32 itemType;
@property (strong) NSString* itemMsg;
@property SInt64 parentId;
@property SInt32 isParent;
@property SInt32 index;
@property SInt32 dataStatus;
@property SInt64 modifiedDate;
@end

@implementation PMenuPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasPublicId {
  return !!hasPublicId_;
}
- (void) setHasPublicId:(BOOL) _value_ {
  hasPublicId_ = !!_value_;
}
@synthesize publicId;
- (BOOL) hasItemName {
  return !!hasItemName_;
}
- (void) setHasItemName:(BOOL) _value_ {
  hasItemName_ = !!_value_;
}
@synthesize itemName;
- (BOOL) hasItemType {
  return !!hasItemType_;
}
- (void) setHasItemType:(BOOL) _value_ {
  hasItemType_ = !!_value_;
}
@synthesize itemType;
- (BOOL) hasItemMsg {
  return !!hasItemMsg_;
}
- (void) setHasItemMsg:(BOOL) _value_ {
  hasItemMsg_ = !!_value_;
}
@synthesize itemMsg;
- (BOOL) hasParentId {
  return !!hasParentId_;
}
- (void) setHasParentId:(BOOL) _value_ {
  hasParentId_ = !!_value_;
}
@synthesize parentId;
- (BOOL) hasIsParent {
  return !!hasIsParent_;
}
- (void) setHasIsParent:(BOOL) _value_ {
  hasIsParent_ = !!_value_;
}
@synthesize isParent;
- (BOOL) hasIndex {
  return !!hasIndex_;
}
- (void) setHasIndex:(BOOL) _value_ {
  hasIndex_ = !!_value_;
}
@synthesize index;
- (BOOL) hasDataStatus {
  return !!hasDataStatus_;
}
- (void) setHasDataStatus:(BOOL) _value_ {
  hasDataStatus_ = !!_value_;
}
@synthesize dataStatus;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.publicId = 0L;
    self.itemName = @"";
    self.itemType = 0;
    self.itemMsg = @"";
    self.parentId = 0L;
    self.isParent = 0;
    self.index = 0;
    self.dataStatus = 0;
    self.modifiedDate = 0L;
  }
  return self;
}
static PMenuPb* defaultPMenuPbInstance = nil;
+ (void) initialize {
  if (self == [PMenuPb class]) {
    defaultPMenuPbInstance = [[PMenuPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPMenuPbInstance;
}
- (instancetype) defaultInstance {
  return defaultPMenuPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasPublicId) {
    [output writeInt64:2 value:self.publicId];
  }
  if (self.hasItemName) {
    [output writeString:3 value:self.itemName];
  }
  if (self.hasItemType) {
    [output writeInt32:4 value:self.itemType];
  }
  if (self.hasItemMsg) {
    [output writeString:5 value:self.itemMsg];
  }
  if (self.hasParentId) {
    [output writeInt64:6 value:self.parentId];
  }
  if (self.hasIsParent) {
    [output writeInt32:7 value:self.isParent];
  }
  if (self.hasIndex) {
    [output writeInt32:8 value:self.index];
  }
  if (self.hasDataStatus) {
    [output writeInt32:9 value:self.dataStatus];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:10 value:self.modifiedDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasPublicId) {
    size_ += computeInt64Size(2, self.publicId);
  }
  if (self.hasItemName) {
    size_ += computeStringSize(3, self.itemName);
  }
  if (self.hasItemType) {
    size_ += computeInt32Size(4, self.itemType);
  }
  if (self.hasItemMsg) {
    size_ += computeStringSize(5, self.itemMsg);
  }
  if (self.hasParentId) {
    size_ += computeInt64Size(6, self.parentId);
  }
  if (self.hasIsParent) {
    size_ += computeInt32Size(7, self.isParent);
  }
  if (self.hasIndex) {
    size_ += computeInt32Size(8, self.index);
  }
  if (self.hasDataStatus) {
    size_ += computeInt32Size(9, self.dataStatus);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(10, self.modifiedDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PMenuPb*) parseFromData:(NSData*) data {
  return (PMenuPb*)[[[PMenuPb builder] mergeFromData:data] build];
}
+ (PMenuPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PMenuPb*)[[[PMenuPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PMenuPb*) parseFromInputStream:(NSInputStream*) input {
  return (PMenuPb*)[[[PMenuPb builder] mergeFromInputStream:input] build];
}
+ (PMenuPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PMenuPb*)[[[PMenuPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PMenuPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PMenuPb*)[[[PMenuPb builder] mergeFromCodedInputStream:input] build];
}
+ (PMenuPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PMenuPb*)[[[PMenuPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PMenuPbBuilder*) builder {
  return [[PMenuPbBuilder alloc] init];
}
+ (PMenuPbBuilder*) builderWithPrototype:(PMenuPb*) prototype {
  return [[PMenuPb builder] mergeFrom:prototype];
}
- (PMenuPbBuilder*) builder {
  return [PMenuPb builder];
}
- (PMenuPbBuilder*) toBuilder {
  return [PMenuPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasPublicId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"publicId", [NSNumber numberWithLongLong:self.publicId]];
  }
  if (self.hasItemName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemName", self.itemName];
  }
  if (self.hasItemType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemType", [NSNumber numberWithInteger:self.itemType]];
  }
  if (self.hasItemMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemMsg", self.itemMsg];
  }
  if (self.hasParentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentId", [NSNumber numberWithLongLong:self.parentId]];
  }
  if (self.hasIsParent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isParent", [NSNumber numberWithInteger:self.isParent]];
  }
  if (self.hasIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"index", [NSNumber numberWithInteger:self.index]];
  }
  if (self.hasDataStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataStatus", [NSNumber numberWithInteger:self.dataStatus]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasPublicId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.publicId] forKey: @"publicId"];
  }
  if (self.hasItemName) {
    [dictionary setObject: self.itemName forKey: @"itemName"];
  }
  if (self.hasItemType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.itemType] forKey: @"itemType"];
  }
  if (self.hasItemMsg) {
    [dictionary setObject: self.itemMsg forKey: @"itemMsg"];
  }
  if (self.hasParentId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.parentId] forKey: @"parentId"];
  }
  if (self.hasIsParent) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isParent] forKey: @"isParent"];
  }
  if (self.hasIndex) {
    [dictionary setObject: [NSNumber numberWithInteger:self.index] forKey: @"index"];
  }
  if (self.hasDataStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dataStatus] forKey: @"dataStatus"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PMenuPb class]]) {
    return NO;
  }
  PMenuPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasPublicId == otherMessage.hasPublicId &&
      (!self.hasPublicId || self.publicId == otherMessage.publicId) &&
      self.hasItemName == otherMessage.hasItemName &&
      (!self.hasItemName || [self.itemName isEqual:otherMessage.itemName]) &&
      self.hasItemType == otherMessage.hasItemType &&
      (!self.hasItemType || self.itemType == otherMessage.itemType) &&
      self.hasItemMsg == otherMessage.hasItemMsg &&
      (!self.hasItemMsg || [self.itemMsg isEqual:otherMessage.itemMsg]) &&
      self.hasParentId == otherMessage.hasParentId &&
      (!self.hasParentId || self.parentId == otherMessage.parentId) &&
      self.hasIsParent == otherMessage.hasIsParent &&
      (!self.hasIsParent || self.isParent == otherMessage.isParent) &&
      self.hasIndex == otherMessage.hasIndex &&
      (!self.hasIndex || self.index == otherMessage.index) &&
      self.hasDataStatus == otherMessage.hasDataStatus &&
      (!self.hasDataStatus || self.dataStatus == otherMessage.dataStatus) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasPublicId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.publicId] hash];
  }
  if (self.hasItemName) {
    hashCode = hashCode * 31 + [self.itemName hash];
  }
  if (self.hasItemType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemType] hash];
  }
  if (self.hasItemMsg) {
    hashCode = hashCode * 31 + [self.itemMsg hash];
  }
  if (self.hasParentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.parentId] hash];
  }
  if (self.hasIsParent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isParent] hash];
  }
  if (self.hasIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.index] hash];
  }
  if (self.hasDataStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dataStatus] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PMenuPbBuilder()
@property (strong) PMenuPb* resultPmenuPb;
@end

@implementation PMenuPbBuilder
@synthesize resultPmenuPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPmenuPb = [[PMenuPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPmenuPb;
}
- (PMenuPbBuilder*) clear {
  self.resultPmenuPb = [[PMenuPb alloc] init];
  return self;
}
- (PMenuPbBuilder*) clone {
  return [PMenuPb builderWithPrototype:resultPmenuPb];
}
- (PMenuPb*) defaultInstance {
  return [PMenuPb defaultInstance];
}
- (PMenuPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PMenuPb*) buildPartial {
  PMenuPb* returnMe = resultPmenuPb;
  self.resultPmenuPb = nil;
  return returnMe;
}
- (PMenuPbBuilder*) mergeFrom:(PMenuPb*) other {
  if (other == [PMenuPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasPublicId) {
    [self setPublicId:other.publicId];
  }
  if (other.hasItemName) {
    [self setItemName:other.itemName];
  }
  if (other.hasItemType) {
    [self setItemType:other.itemType];
  }
  if (other.hasItemMsg) {
    [self setItemMsg:other.itemMsg];
  }
  if (other.hasParentId) {
    [self setParentId:other.parentId];
  }
  if (other.hasIsParent) {
    [self setIsParent:other.isParent];
  }
  if (other.hasIndex) {
    [self setIndex:other.index];
  }
  if (other.hasDataStatus) {
    [self setDataStatus:other.dataStatus];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PMenuPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PMenuPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setPublicId:[input readInt64]];
        break;
      }
      case 26: {
        [self setItemName:[input readString]];
        break;
      }
      case 32: {
        [self setItemType:[input readInt32]];
        break;
      }
      case 42: {
        [self setItemMsg:[input readString]];
        break;
      }
      case 48: {
        [self setParentId:[input readInt64]];
        break;
      }
      case 56: {
        [self setIsParent:[input readInt32]];
        break;
      }
      case 64: {
        [self setIndex:[input readInt32]];
        break;
      }
      case 72: {
        [self setDataStatus:[input readInt32]];
        break;
      }
      case 80: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultPmenuPb.hasId;
}
- (SInt64) id {
  return resultPmenuPb.id;
}
- (PMenuPbBuilder*) setId:(SInt64) value {
  resultPmenuPb.hasId = YES;
  resultPmenuPb.id = value;
  return self;
}
- (PMenuPbBuilder*) clearId {
  resultPmenuPb.hasId = NO;
  resultPmenuPb.id = 0L;
  return self;
}
- (BOOL) hasPublicId {
  return resultPmenuPb.hasPublicId;
}
- (SInt64) publicId {
  return resultPmenuPb.publicId;
}
- (PMenuPbBuilder*) setPublicId:(SInt64) value {
  resultPmenuPb.hasPublicId = YES;
  resultPmenuPb.publicId = value;
  return self;
}
- (PMenuPbBuilder*) clearPublicId {
  resultPmenuPb.hasPublicId = NO;
  resultPmenuPb.publicId = 0L;
  return self;
}
- (BOOL) hasItemName {
  return resultPmenuPb.hasItemName;
}
- (NSString*) itemName {
  return resultPmenuPb.itemName;
}
- (PMenuPbBuilder*) setItemName:(NSString*) value {
  resultPmenuPb.hasItemName = YES;
  resultPmenuPb.itemName = value;
  return self;
}
- (PMenuPbBuilder*) clearItemName {
  resultPmenuPb.hasItemName = NO;
  resultPmenuPb.itemName = @"";
  return self;
}
- (BOOL) hasItemType {
  return resultPmenuPb.hasItemType;
}
- (SInt32) itemType {
  return resultPmenuPb.itemType;
}
- (PMenuPbBuilder*) setItemType:(SInt32) value {
  resultPmenuPb.hasItemType = YES;
  resultPmenuPb.itemType = value;
  return self;
}
- (PMenuPbBuilder*) clearItemType {
  resultPmenuPb.hasItemType = NO;
  resultPmenuPb.itemType = 0;
  return self;
}
- (BOOL) hasItemMsg {
  return resultPmenuPb.hasItemMsg;
}
- (NSString*) itemMsg {
  return resultPmenuPb.itemMsg;
}
- (PMenuPbBuilder*) setItemMsg:(NSString*) value {
  resultPmenuPb.hasItemMsg = YES;
  resultPmenuPb.itemMsg = value;
  return self;
}
- (PMenuPbBuilder*) clearItemMsg {
  resultPmenuPb.hasItemMsg = NO;
  resultPmenuPb.itemMsg = @"";
  return self;
}
- (BOOL) hasParentId {
  return resultPmenuPb.hasParentId;
}
- (SInt64) parentId {
  return resultPmenuPb.parentId;
}
- (PMenuPbBuilder*) setParentId:(SInt64) value {
  resultPmenuPb.hasParentId = YES;
  resultPmenuPb.parentId = value;
  return self;
}
- (PMenuPbBuilder*) clearParentId {
  resultPmenuPb.hasParentId = NO;
  resultPmenuPb.parentId = 0L;
  return self;
}
- (BOOL) hasIsParent {
  return resultPmenuPb.hasIsParent;
}
- (SInt32) isParent {
  return resultPmenuPb.isParent;
}
- (PMenuPbBuilder*) setIsParent:(SInt32) value {
  resultPmenuPb.hasIsParent = YES;
  resultPmenuPb.isParent = value;
  return self;
}
- (PMenuPbBuilder*) clearIsParent {
  resultPmenuPb.hasIsParent = NO;
  resultPmenuPb.isParent = 0;
  return self;
}
- (BOOL) hasIndex {
  return resultPmenuPb.hasIndex;
}
- (SInt32) index {
  return resultPmenuPb.index;
}
- (PMenuPbBuilder*) setIndex:(SInt32) value {
  resultPmenuPb.hasIndex = YES;
  resultPmenuPb.index = value;
  return self;
}
- (PMenuPbBuilder*) clearIndex {
  resultPmenuPb.hasIndex = NO;
  resultPmenuPb.index = 0;
  return self;
}
- (BOOL) hasDataStatus {
  return resultPmenuPb.hasDataStatus;
}
- (SInt32) dataStatus {
  return resultPmenuPb.dataStatus;
}
- (PMenuPbBuilder*) setDataStatus:(SInt32) value {
  resultPmenuPb.hasDataStatus = YES;
  resultPmenuPb.dataStatus = value;
  return self;
}
- (PMenuPbBuilder*) clearDataStatus {
  resultPmenuPb.hasDataStatus = NO;
  resultPmenuPb.dataStatus = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultPmenuPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultPmenuPb.modifiedDate;
}
- (PMenuPbBuilder*) setModifiedDate:(SInt64) value {
  resultPmenuPb.hasModifiedDate = YES;
  resultPmenuPb.modifiedDate = value;
  return self;
}
- (PMenuPbBuilder*) clearModifiedDate {
  resultPmenuPb.hasModifiedDate = NO;
  resultPmenuPb.modifiedDate = 0L;
  return self;
}
@end

@interface PSessionPb ()
@property SInt64 id;
@property SInt64 publicId;
@property (strong) NSString* publicCode;
@property SInt64 userId;
@property SInt64 createdDate;
@property SInt64 timestamp;
@end

@implementation PSessionPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasPublicId {
  return !!hasPublicId_;
}
- (void) setHasPublicId:(BOOL) _value_ {
  hasPublicId_ = !!_value_;
}
@synthesize publicId;
- (BOOL) hasPublicCode {
  return !!hasPublicCode_;
}
- (void) setHasPublicCode:(BOOL) _value_ {
  hasPublicCode_ = !!_value_;
}
@synthesize publicCode;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.publicId = 0L;
    self.publicCode = @"";
    self.userId = 0L;
    self.createdDate = 0L;
    self.timestamp = 0L;
  }
  return self;
}
static PSessionPb* defaultPSessionPbInstance = nil;
+ (void) initialize {
  if (self == [PSessionPb class]) {
    defaultPSessionPbInstance = [[PSessionPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPSessionPbInstance;
}
- (instancetype) defaultInstance {
  return defaultPSessionPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasPublicId) {
    [output writeInt64:2 value:self.publicId];
  }
  if (self.hasPublicCode) {
    [output writeString:3 value:self.publicCode];
  }
  if (self.hasUserId) {
    [output writeInt64:4 value:self.userId];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:5 value:self.createdDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:6 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasPublicId) {
    size_ += computeInt64Size(2, self.publicId);
  }
  if (self.hasPublicCode) {
    size_ += computeStringSize(3, self.publicCode);
  }
  if (self.hasUserId) {
    size_ += computeInt64Size(4, self.userId);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(5, self.createdDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(6, self.timestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PSessionPb*) parseFromData:(NSData*) data {
  return (PSessionPb*)[[[PSessionPb builder] mergeFromData:data] build];
}
+ (PSessionPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PSessionPb*)[[[PSessionPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PSessionPb*) parseFromInputStream:(NSInputStream*) input {
  return (PSessionPb*)[[[PSessionPb builder] mergeFromInputStream:input] build];
}
+ (PSessionPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PSessionPb*)[[[PSessionPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PSessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PSessionPb*)[[[PSessionPb builder] mergeFromCodedInputStream:input] build];
}
+ (PSessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PSessionPb*)[[[PSessionPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PSessionPbBuilder*) builder {
  return [[PSessionPbBuilder alloc] init];
}
+ (PSessionPbBuilder*) builderWithPrototype:(PSessionPb*) prototype {
  return [[PSessionPb builder] mergeFrom:prototype];
}
- (PSessionPbBuilder*) builder {
  return [PSessionPb builder];
}
- (PSessionPbBuilder*) toBuilder {
  return [PSessionPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasPublicId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"publicId", [NSNumber numberWithLongLong:self.publicId]];
  }
  if (self.hasPublicCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"publicCode", self.publicCode];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasPublicId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.publicId] forKey: @"publicId"];
  }
  if (self.hasPublicCode) {
    [dictionary setObject: self.publicCode forKey: @"publicCode"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PSessionPb class]]) {
    return NO;
  }
  PSessionPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasPublicId == otherMessage.hasPublicId &&
      (!self.hasPublicId || self.publicId == otherMessage.publicId) &&
      self.hasPublicCode == otherMessage.hasPublicCode &&
      (!self.hasPublicCode || [self.publicCode isEqual:otherMessage.publicCode]) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasPublicId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.publicId] hash];
  }
  if (self.hasPublicCode) {
    hashCode = hashCode * 31 + [self.publicCode hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PSessionPbBuilder()
@property (strong) PSessionPb* resultPsessionPb;
@end

@implementation PSessionPbBuilder
@synthesize resultPsessionPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPsessionPb = [[PSessionPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPsessionPb;
}
- (PSessionPbBuilder*) clear {
  self.resultPsessionPb = [[PSessionPb alloc] init];
  return self;
}
- (PSessionPbBuilder*) clone {
  return [PSessionPb builderWithPrototype:resultPsessionPb];
}
- (PSessionPb*) defaultInstance {
  return [PSessionPb defaultInstance];
}
- (PSessionPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PSessionPb*) buildPartial {
  PSessionPb* returnMe = resultPsessionPb;
  self.resultPsessionPb = nil;
  return returnMe;
}
- (PSessionPbBuilder*) mergeFrom:(PSessionPb*) other {
  if (other == [PSessionPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasPublicId) {
    [self setPublicId:other.publicId];
  }
  if (other.hasPublicCode) {
    [self setPublicCode:other.publicCode];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PSessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PSessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setPublicId:[input readInt64]];
        break;
      }
      case 26: {
        [self setPublicCode:[input readString]];
        break;
      }
      case 32: {
        [self setUserId:[input readInt64]];
        break;
      }
      case 40: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 48: {
        [self setTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultPsessionPb.hasId;
}
- (SInt64) id {
  return resultPsessionPb.id;
}
- (PSessionPbBuilder*) setId:(SInt64) value {
  resultPsessionPb.hasId = YES;
  resultPsessionPb.id = value;
  return self;
}
- (PSessionPbBuilder*) clearId {
  resultPsessionPb.hasId = NO;
  resultPsessionPb.id = 0L;
  return self;
}
- (BOOL) hasPublicId {
  return resultPsessionPb.hasPublicId;
}
- (SInt64) publicId {
  return resultPsessionPb.publicId;
}
- (PSessionPbBuilder*) setPublicId:(SInt64) value {
  resultPsessionPb.hasPublicId = YES;
  resultPsessionPb.publicId = value;
  return self;
}
- (PSessionPbBuilder*) clearPublicId {
  resultPsessionPb.hasPublicId = NO;
  resultPsessionPb.publicId = 0L;
  return self;
}
- (BOOL) hasPublicCode {
  return resultPsessionPb.hasPublicCode;
}
- (NSString*) publicCode {
  return resultPsessionPb.publicCode;
}
- (PSessionPbBuilder*) setPublicCode:(NSString*) value {
  resultPsessionPb.hasPublicCode = YES;
  resultPsessionPb.publicCode = value;
  return self;
}
- (PSessionPbBuilder*) clearPublicCode {
  resultPsessionPb.hasPublicCode = NO;
  resultPsessionPb.publicCode = @"";
  return self;
}
- (BOOL) hasUserId {
  return resultPsessionPb.hasUserId;
}
- (SInt64) userId {
  return resultPsessionPb.userId;
}
- (PSessionPbBuilder*) setUserId:(SInt64) value {
  resultPsessionPb.hasUserId = YES;
  resultPsessionPb.userId = value;
  return self;
}
- (PSessionPbBuilder*) clearUserId {
  resultPsessionPb.hasUserId = NO;
  resultPsessionPb.userId = 0L;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultPsessionPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultPsessionPb.createdDate;
}
- (PSessionPbBuilder*) setCreatedDate:(SInt64) value {
  resultPsessionPb.hasCreatedDate = YES;
  resultPsessionPb.createdDate = value;
  return self;
}
- (PSessionPbBuilder*) clearCreatedDate {
  resultPsessionPb.hasCreatedDate = NO;
  resultPsessionPb.createdDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultPsessionPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultPsessionPb.timestamp;
}
- (PSessionPbBuilder*) setTimestamp:(SInt64) value {
  resultPsessionPb.hasTimestamp = YES;
  resultPsessionPb.timestamp = value;
  return self;
}
- (PSessionPbBuilder*) clearTimestamp {
  resultPsessionPb.hasTimestamp = NO;
  resultPsessionPb.timestamp = 0L;
  return self;
}
@end

@interface PRecorderListPb ()
@property (strong) NSMutableArray * recorderPbArray;
@end

@implementation PRecorderListPb

@synthesize recorderPbArray;
@dynamic recorderPb;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PRecorderListPb* defaultPRecorderListPbInstance = nil;
+ (void) initialize {
  if (self == [PRecorderListPb class]) {
    defaultPRecorderListPbInstance = [[PRecorderListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPRecorderListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultPRecorderListPbInstance;
}
- (NSArray *)recorderPb {
  return recorderPbArray;
}
- (PRecorderPb*)recorderPbAtIndex:(NSUInteger)index {
  return [recorderPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.recorderPbArray enumerateObjectsUsingBlock:^(PRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.recorderPbArray enumerateObjectsUsingBlock:^(PRecorderPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PRecorderListPb*) parseFromData:(NSData*) data {
  return (PRecorderListPb*)[[[PRecorderListPb builder] mergeFromData:data] build];
}
+ (PRecorderListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PRecorderListPb*)[[[PRecorderListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PRecorderListPb*) parseFromInputStream:(NSInputStream*) input {
  return (PRecorderListPb*)[[[PRecorderListPb builder] mergeFromInputStream:input] build];
}
+ (PRecorderListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PRecorderListPb*)[[[PRecorderListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PRecorderListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PRecorderListPb*)[[[PRecorderListPb builder] mergeFromCodedInputStream:input] build];
}
+ (PRecorderListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PRecorderListPb*)[[[PRecorderListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PRecorderListPbBuilder*) builder {
  return [[PRecorderListPbBuilder alloc] init];
}
+ (PRecorderListPbBuilder*) builderWithPrototype:(PRecorderListPb*) prototype {
  return [[PRecorderListPb builder] mergeFrom:prototype];
}
- (PRecorderListPbBuilder*) builder {
  return [PRecorderListPb builder];
}
- (PRecorderListPbBuilder*) toBuilder {
  return [PRecorderListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.recorderPbArray enumerateObjectsUsingBlock:^(PRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"recorderPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (PRecorderPb* element in self.recorderPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"recorderPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PRecorderListPb class]]) {
    return NO;
  }
  PRecorderListPb *otherMessage = other;
  return
      [self.recorderPbArray isEqualToArray:otherMessage.recorderPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.recorderPbArray enumerateObjectsUsingBlock:^(PRecorderPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PRecorderListPbBuilder()
@property (strong) PRecorderListPb* resultPrecorderListPb;
@end

@implementation PRecorderListPbBuilder
@synthesize resultPrecorderListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPrecorderListPb = [[PRecorderListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPrecorderListPb;
}
- (PRecorderListPbBuilder*) clear {
  self.resultPrecorderListPb = [[PRecorderListPb alloc] init];
  return self;
}
- (PRecorderListPbBuilder*) clone {
  return [PRecorderListPb builderWithPrototype:resultPrecorderListPb];
}
- (PRecorderListPb*) defaultInstance {
  return [PRecorderListPb defaultInstance];
}
- (PRecorderListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PRecorderListPb*) buildPartial {
  PRecorderListPb* returnMe = resultPrecorderListPb;
  self.resultPrecorderListPb = nil;
  return returnMe;
}
- (PRecorderListPbBuilder*) mergeFrom:(PRecorderListPb*) other {
  if (other == [PRecorderListPb defaultInstance]) {
    return self;
  }
  if (other.recorderPbArray.count > 0) {
    if (resultPrecorderListPb.recorderPbArray == nil) {
      resultPrecorderListPb.recorderPbArray = [[NSMutableArray alloc] initWithArray:other.recorderPbArray];
    } else {
      [resultPrecorderListPb.recorderPbArray addObjectsFromArray:other.recorderPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PRecorderListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PRecorderListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PRecorderPbBuilder* subBuilder = [PRecorderPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecorderPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)recorderPb {
  return resultPrecorderListPb.recorderPbArray;
}
- (PRecorderPb*)recorderPbAtIndex:(NSUInteger)index {
  return [resultPrecorderListPb recorderPbAtIndex:index];
}
- (PRecorderListPbBuilder *)addRecorderPb:(PRecorderPb*)value {
  if (resultPrecorderListPb.recorderPbArray == nil) {
    resultPrecorderListPb.recorderPbArray = [[NSMutableArray alloc]init];
  }
  [resultPrecorderListPb.recorderPbArray addObject:value];
  return self;
}
- (PRecorderListPbBuilder *)setRecorderPbArray:(NSArray *)array {
  resultPrecorderListPb.recorderPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PRecorderListPbBuilder *)clearRecorderPb {
  resultPrecorderListPb.recorderPbArray = nil;
  return self;
}
@end

@interface PRecorderPb ()
@property SInt64 id;
@property SInt64 sessionId;
@property SInt32 fromType;
@property SInt64 fromUserId;
@property SInt64 toUserId;
@property SInt32 type;
@property (strong) NSString* message;
@property SInt64 timestamp;
@property SInt64 createdDate;
@property (strong) NSString* uuid;
@property (strong) NSData* file;
@end

@implementation PRecorderPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasFromType {
  return !!hasFromType_;
}
- (void) setHasFromType:(BOOL) _value_ {
  hasFromType_ = !!_value_;
}
@synthesize fromType;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasFile {
  return !!hasFile_;
}
- (void) setHasFile:(BOOL) _value_ {
  hasFile_ = !!_value_;
}
@synthesize file;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.sessionId = 0L;
    self.fromType = 0;
    self.fromUserId = 0L;
    self.toUserId = 0L;
    self.type = 0;
    self.message = @"";
    self.timestamp = 0L;
    self.createdDate = 0L;
    self.uuid = @"";
    self.file = [NSData data];
  }
  return self;
}
static PRecorderPb* defaultPRecorderPbInstance = nil;
+ (void) initialize {
  if (self == [PRecorderPb class]) {
    defaultPRecorderPbInstance = [[PRecorderPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPRecorderPbInstance;
}
- (instancetype) defaultInstance {
  return defaultPRecorderPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasSessionId) {
    [output writeInt64:2 value:self.sessionId];
  }
  if (self.hasFromType) {
    [output writeInt32:3 value:self.fromType];
  }
  if (self.hasFromUserId) {
    [output writeInt64:4 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeInt64:5 value:self.toUserId];
  }
  if (self.hasType) {
    [output writeInt32:6 value:self.type];
  }
  if (self.hasMessage) {
    [output writeString:7 value:self.message];
  }
  if (self.hasTimestamp) {
    [output writeInt64:8 value:self.timestamp];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:9 value:self.createdDate];
  }
  if (self.hasUuid) {
    [output writeString:10 value:self.uuid];
  }
  if (self.hasFile) {
    [output writeData:11 value:self.file];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasSessionId) {
    size_ += computeInt64Size(2, self.sessionId);
  }
  if (self.hasFromType) {
    size_ += computeInt32Size(3, self.fromType);
  }
  if (self.hasFromUserId) {
    size_ += computeInt64Size(4, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeInt64Size(5, self.toUserId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(6, self.type);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(7, self.message);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(8, self.timestamp);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(9, self.createdDate);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(10, self.uuid);
  }
  if (self.hasFile) {
    size_ += computeDataSize(11, self.file);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PRecorderPb*) parseFromData:(NSData*) data {
  return (PRecorderPb*)[[[PRecorderPb builder] mergeFromData:data] build];
}
+ (PRecorderPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PRecorderPb*)[[[PRecorderPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PRecorderPb*) parseFromInputStream:(NSInputStream*) input {
  return (PRecorderPb*)[[[PRecorderPb builder] mergeFromInputStream:input] build];
}
+ (PRecorderPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PRecorderPb*)[[[PRecorderPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PRecorderPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PRecorderPb*)[[[PRecorderPb builder] mergeFromCodedInputStream:input] build];
}
+ (PRecorderPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PRecorderPb*)[[[PRecorderPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PRecorderPbBuilder*) builder {
  return [[PRecorderPbBuilder alloc] init];
}
+ (PRecorderPbBuilder*) builderWithPrototype:(PRecorderPb*) prototype {
  return [[PRecorderPb builder] mergeFrom:prototype];
}
- (PRecorderPbBuilder*) builder {
  return [PRecorderPb builder];
}
- (PRecorderPbBuilder*) toBuilder {
  return [PRecorderPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasFromType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromType", [NSNumber numberWithInteger:self.fromType]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithLongLong:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithLongLong:self.toUserId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"file", self.file];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasFromType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromType] forKey: @"fromType"];
  }
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasFile) {
    [dictionary setObject: self.file forKey: @"file"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PRecorderPb class]]) {
    return NO;
  }
  PRecorderPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasFromType == otherMessage.hasFromType &&
      (!self.hasFromType || self.fromType == otherMessage.fromType) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasFile == otherMessage.hasFile &&
      (!self.hasFile || [self.file isEqual:otherMessage.file]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasFromType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromType] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.toUserId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasFile) {
    hashCode = hashCode * 31 + [self.file hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PRecorderPbBuilder()
@property (strong) PRecorderPb* resultPrecorderPb;
@end

@implementation PRecorderPbBuilder
@synthesize resultPrecorderPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPrecorderPb = [[PRecorderPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPrecorderPb;
}
- (PRecorderPbBuilder*) clear {
  self.resultPrecorderPb = [[PRecorderPb alloc] init];
  return self;
}
- (PRecorderPbBuilder*) clone {
  return [PRecorderPb builderWithPrototype:resultPrecorderPb];
}
- (PRecorderPb*) defaultInstance {
  return [PRecorderPb defaultInstance];
}
- (PRecorderPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PRecorderPb*) buildPartial {
  PRecorderPb* returnMe = resultPrecorderPb;
  self.resultPrecorderPb = nil;
  return returnMe;
}
- (PRecorderPbBuilder*) mergeFrom:(PRecorderPb*) other {
  if (other == [PRecorderPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasFromType) {
    [self setFromType:other.fromType];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasFile) {
    [self setFile:other.file];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PRecorderPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PRecorderPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 24: {
        [self setFromType:[input readInt32]];
        break;
      }
      case 32: {
        [self setFromUserId:[input readInt64]];
        break;
      }
      case 40: {
        [self setToUserId:[input readInt64]];
        break;
      }
      case 48: {
        [self setType:[input readInt32]];
        break;
      }
      case 58: {
        [self setMessage:[input readString]];
        break;
      }
      case 64: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 72: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 82: {
        [self setUuid:[input readString]];
        break;
      }
      case 90: {
        [self setFile:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultPrecorderPb.hasId;
}
- (SInt64) id {
  return resultPrecorderPb.id;
}
- (PRecorderPbBuilder*) setId:(SInt64) value {
  resultPrecorderPb.hasId = YES;
  resultPrecorderPb.id = value;
  return self;
}
- (PRecorderPbBuilder*) clearId {
  resultPrecorderPb.hasId = NO;
  resultPrecorderPb.id = 0L;
  return self;
}
- (BOOL) hasSessionId {
  return resultPrecorderPb.hasSessionId;
}
- (SInt64) sessionId {
  return resultPrecorderPb.sessionId;
}
- (PRecorderPbBuilder*) setSessionId:(SInt64) value {
  resultPrecorderPb.hasSessionId = YES;
  resultPrecorderPb.sessionId = value;
  return self;
}
- (PRecorderPbBuilder*) clearSessionId {
  resultPrecorderPb.hasSessionId = NO;
  resultPrecorderPb.sessionId = 0L;
  return self;
}
- (BOOL) hasFromType {
  return resultPrecorderPb.hasFromType;
}
- (SInt32) fromType {
  return resultPrecorderPb.fromType;
}
- (PRecorderPbBuilder*) setFromType:(SInt32) value {
  resultPrecorderPb.hasFromType = YES;
  resultPrecorderPb.fromType = value;
  return self;
}
- (PRecorderPbBuilder*) clearFromType {
  resultPrecorderPb.hasFromType = NO;
  resultPrecorderPb.fromType = 0;
  return self;
}
- (BOOL) hasFromUserId {
  return resultPrecorderPb.hasFromUserId;
}
- (SInt64) fromUserId {
  return resultPrecorderPb.fromUserId;
}
- (PRecorderPbBuilder*) setFromUserId:(SInt64) value {
  resultPrecorderPb.hasFromUserId = YES;
  resultPrecorderPb.fromUserId = value;
  return self;
}
- (PRecorderPbBuilder*) clearFromUserId {
  resultPrecorderPb.hasFromUserId = NO;
  resultPrecorderPb.fromUserId = 0L;
  return self;
}
- (BOOL) hasToUserId {
  return resultPrecorderPb.hasToUserId;
}
- (SInt64) toUserId {
  return resultPrecorderPb.toUserId;
}
- (PRecorderPbBuilder*) setToUserId:(SInt64) value {
  resultPrecorderPb.hasToUserId = YES;
  resultPrecorderPb.toUserId = value;
  return self;
}
- (PRecorderPbBuilder*) clearToUserId {
  resultPrecorderPb.hasToUserId = NO;
  resultPrecorderPb.toUserId = 0L;
  return self;
}
- (BOOL) hasType {
  return resultPrecorderPb.hasType;
}
- (SInt32) type {
  return resultPrecorderPb.type;
}
- (PRecorderPbBuilder*) setType:(SInt32) value {
  resultPrecorderPb.hasType = YES;
  resultPrecorderPb.type = value;
  return self;
}
- (PRecorderPbBuilder*) clearType {
  resultPrecorderPb.hasType = NO;
  resultPrecorderPb.type = 0;
  return self;
}
- (BOOL) hasMessage {
  return resultPrecorderPb.hasMessage;
}
- (NSString*) message {
  return resultPrecorderPb.message;
}
- (PRecorderPbBuilder*) setMessage:(NSString*) value {
  resultPrecorderPb.hasMessage = YES;
  resultPrecorderPb.message = value;
  return self;
}
- (PRecorderPbBuilder*) clearMessage {
  resultPrecorderPb.hasMessage = NO;
  resultPrecorderPb.message = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultPrecorderPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultPrecorderPb.timestamp;
}
- (PRecorderPbBuilder*) setTimestamp:(SInt64) value {
  resultPrecorderPb.hasTimestamp = YES;
  resultPrecorderPb.timestamp = value;
  return self;
}
- (PRecorderPbBuilder*) clearTimestamp {
  resultPrecorderPb.hasTimestamp = NO;
  resultPrecorderPb.timestamp = 0L;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultPrecorderPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultPrecorderPb.createdDate;
}
- (PRecorderPbBuilder*) setCreatedDate:(SInt64) value {
  resultPrecorderPb.hasCreatedDate = YES;
  resultPrecorderPb.createdDate = value;
  return self;
}
- (PRecorderPbBuilder*) clearCreatedDate {
  resultPrecorderPb.hasCreatedDate = NO;
  resultPrecorderPb.createdDate = 0L;
  return self;
}
- (BOOL) hasUuid {
  return resultPrecorderPb.hasUuid;
}
- (NSString*) uuid {
  return resultPrecorderPb.uuid;
}
- (PRecorderPbBuilder*) setUuid:(NSString*) value {
  resultPrecorderPb.hasUuid = YES;
  resultPrecorderPb.uuid = value;
  return self;
}
- (PRecorderPbBuilder*) clearUuid {
  resultPrecorderPb.hasUuid = NO;
  resultPrecorderPb.uuid = @"";
  return self;
}
- (BOOL) hasFile {
  return resultPrecorderPb.hasFile;
}
- (NSData*) file {
  return resultPrecorderPb.file;
}
- (PRecorderPbBuilder*) setFile:(NSData*) value {
  resultPrecorderPb.hasFile = YES;
  resultPrecorderPb.file = value;
  return self;
}
- (PRecorderPbBuilder*) clearFile {
  resultPrecorderPb.hasFile = NO;
  resultPrecorderPb.file = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
