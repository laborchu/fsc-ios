// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "CmdSign.pb.h"
// @@protoc_insertion_point(imports)

@implementation CmdSignRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CmdSignRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CmdSignPb ()
@property (strong) NSString* cmdCode;
@property (strong) NSString* reqCode;
@property (strong) NSString* respCode;
@property (strong) NSString* msg;
@property (strong) NSData* source;
@property (strong) NSString* token;
@property BOOL openTransaction;
@property BOOL isAcross;
@end

@implementation CmdSignPb

- (BOOL) hasCmdCode {
  return !!hasCmdCode_;
}
- (void) setHasCmdCode:(BOOL) _value_ {
  hasCmdCode_ = !!_value_;
}
@synthesize cmdCode;
- (BOOL) hasReqCode {
  return !!hasReqCode_;
}
- (void) setHasReqCode:(BOOL) _value_ {
  hasReqCode_ = !!_value_;
}
@synthesize reqCode;
- (BOOL) hasRespCode {
  return !!hasRespCode_;
}
- (void) setHasRespCode:(BOOL) _value_ {
  hasRespCode_ = !!_value_;
}
@synthesize respCode;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) _value_ {
  hasSource_ = !!_value_;
}
@synthesize source;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) _value_ {
  hasToken_ = !!_value_;
}
@synthesize token;
- (BOOL) hasOpenTransaction {
  return !!hasOpenTransaction_;
}
- (void) setHasOpenTransaction:(BOOL) _value_ {
  hasOpenTransaction_ = !!_value_;
}
- (BOOL) openTransaction {
  return !!openTransaction_;
}
- (void) setOpenTransaction:(BOOL) _value_ {
  openTransaction_ = !!_value_;
}
- (BOOL) hasIsAcross {
  return !!hasIsAcross_;
}
- (void) setHasIsAcross:(BOOL) _value_ {
  hasIsAcross_ = !!_value_;
}
- (BOOL) isAcross {
  return !!isAcross_;
}
- (void) setIsAcross:(BOOL) _value_ {
  isAcross_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.cmdCode = @"";
    self.reqCode = @"";
    self.respCode = @"";
    self.msg = @"";
    self.source = [NSData data];
    self.token = @"";
    self.openTransaction = NO;
    self.isAcross = NO;
  }
  return self;
}
static CmdSignPb* defaultCmdSignPbInstance = nil;
+ (void) initialize {
  if (self == [CmdSignPb class]) {
    defaultCmdSignPbInstance = [[CmdSignPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCmdSignPbInstance;
}
- (instancetype) defaultInstance {
  return defaultCmdSignPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdCode) {
    [output writeString:1 value:self.cmdCode];
  }
  if (self.hasReqCode) {
    [output writeString:2 value:self.reqCode];
  }
  if (self.hasRespCode) {
    [output writeString:3 value:self.respCode];
  }
  if (self.hasMsg) {
    [output writeString:4 value:self.msg];
  }
  if (self.hasSource) {
    [output writeData:5 value:self.source];
  }
  if (self.hasToken) {
    [output writeString:6 value:self.token];
  }
  if (self.hasOpenTransaction) {
    [output writeBool:7 value:self.openTransaction];
  }
  if (self.hasIsAcross) {
    [output writeBool:8 value:self.isAcross];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdCode) {
    size_ += computeStringSize(1, self.cmdCode);
  }
  if (self.hasReqCode) {
    size_ += computeStringSize(2, self.reqCode);
  }
  if (self.hasRespCode) {
    size_ += computeStringSize(3, self.respCode);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(4, self.msg);
  }
  if (self.hasSource) {
    size_ += computeDataSize(5, self.source);
  }
  if (self.hasToken) {
    size_ += computeStringSize(6, self.token);
  }
  if (self.hasOpenTransaction) {
    size_ += computeBoolSize(7, self.openTransaction);
  }
  if (self.hasIsAcross) {
    size_ += computeBoolSize(8, self.isAcross);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CmdSignPb*) parseFromData:(NSData*) data {
  return (CmdSignPb*)[[[CmdSignPb builder] mergeFromData:data] build];
}
+ (CmdSignPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CmdSignPb*)[[[CmdSignPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CmdSignPb*) parseFromInputStream:(NSInputStream*) input {
  return (CmdSignPb*)[[[CmdSignPb builder] mergeFromInputStream:input] build];
}
+ (CmdSignPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CmdSignPb*)[[[CmdSignPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CmdSignPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CmdSignPb*)[[[CmdSignPb builder] mergeFromCodedInputStream:input] build];
}
+ (CmdSignPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CmdSignPb*)[[[CmdSignPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CmdSignPbBuilder*) builder {
  return [[CmdSignPbBuilder alloc] init];
}
+ (CmdSignPbBuilder*) builderWithPrototype:(CmdSignPb*) prototype {
  return [[CmdSignPb builder] mergeFrom:prototype];
}
- (CmdSignPbBuilder*) builder {
  return [CmdSignPb builder];
}
- (CmdSignPbBuilder*) toBuilder {
  return [CmdSignPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdCode", self.cmdCode];
  }
  if (self.hasReqCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqCode", self.reqCode];
  }
  if (self.hasRespCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"respCode", self.respCode];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  if (self.hasSource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"source", self.source];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  if (self.hasOpenTransaction) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openTransaction", [NSNumber numberWithBool:self.openTransaction]];
  }
  if (self.hasIsAcross) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAcross", [NSNumber numberWithBool:self.isAcross]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCmdCode) {
    [dictionary setObject: self.cmdCode forKey: @"cmdCode"];
  }
  if (self.hasReqCode) {
    [dictionary setObject: self.reqCode forKey: @"reqCode"];
  }
  if (self.hasRespCode) {
    [dictionary setObject: self.respCode forKey: @"respCode"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  if (self.hasSource) {
    [dictionary setObject: self.source forKey: @"source"];
  }
  if (self.hasToken) {
    [dictionary setObject: self.token forKey: @"token"];
  }
  if (self.hasOpenTransaction) {
    [dictionary setObject: [NSNumber numberWithBool:self.openTransaction] forKey: @"openTransaction"];
  }
  if (self.hasIsAcross) {
    [dictionary setObject: [NSNumber numberWithBool:self.isAcross] forKey: @"isAcross"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CmdSignPb class]]) {
    return NO;
  }
  CmdSignPb *otherMessage = other;
  return
      self.hasCmdCode == otherMessage.hasCmdCode &&
      (!self.hasCmdCode || [self.cmdCode isEqual:otherMessage.cmdCode]) &&
      self.hasReqCode == otherMessage.hasReqCode &&
      (!self.hasReqCode || [self.reqCode isEqual:otherMessage.reqCode]) &&
      self.hasRespCode == otherMessage.hasRespCode &&
      (!self.hasRespCode || [self.respCode isEqual:otherMessage.respCode]) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      self.hasOpenTransaction == otherMessage.hasOpenTransaction &&
      (!self.hasOpenTransaction || self.openTransaction == otherMessage.openTransaction) &&
      self.hasIsAcross == otherMessage.hasIsAcross &&
      (!self.hasIsAcross || self.isAcross == otherMessage.isAcross) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdCode) {
    hashCode = hashCode * 31 + [self.cmdCode hash];
  }
  if (self.hasReqCode) {
    hashCode = hashCode * 31 + [self.reqCode hash];
  }
  if (self.hasRespCode) {
    hashCode = hashCode * 31 + [self.respCode hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  if (self.hasOpenTransaction) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.openTransaction] hash];
  }
  if (self.hasIsAcross) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAcross] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CmdSignPbBuilder()
@property (strong) CmdSignPb* resultCmdSignPb;
@end

@implementation CmdSignPbBuilder
@synthesize resultCmdSignPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCmdSignPb = [[CmdSignPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCmdSignPb;
}
- (CmdSignPbBuilder*) clear {
  self.resultCmdSignPb = [[CmdSignPb alloc] init];
  return self;
}
- (CmdSignPbBuilder*) clone {
  return [CmdSignPb builderWithPrototype:resultCmdSignPb];
}
- (CmdSignPb*) defaultInstance {
  return [CmdSignPb defaultInstance];
}
- (CmdSignPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CmdSignPb*) buildPartial {
  CmdSignPb* returnMe = resultCmdSignPb;
  self.resultCmdSignPb = nil;
  return returnMe;
}
- (CmdSignPbBuilder*) mergeFrom:(CmdSignPb*) other {
  if (other == [CmdSignPb defaultInstance]) {
    return self;
  }
  if (other.hasCmdCode) {
    [self setCmdCode:other.cmdCode];
  }
  if (other.hasReqCode) {
    [self setReqCode:other.reqCode];
  }
  if (other.hasRespCode) {
    [self setRespCode:other.respCode];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  if (other.hasOpenTransaction) {
    [self setOpenTransaction:other.openTransaction];
  }
  if (other.hasIsAcross) {
    [self setIsAcross:other.isAcross];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CmdSignPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CmdSignPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCmdCode:[input readString]];
        break;
      }
      case 18: {
        [self setReqCode:[input readString]];
        break;
      }
      case 26: {
        [self setRespCode:[input readString]];
        break;
      }
      case 34: {
        [self setMsg:[input readString]];
        break;
      }
      case 42: {
        [self setSource:[input readData]];
        break;
      }
      case 50: {
        [self setToken:[input readString]];
        break;
      }
      case 56: {
        [self setOpenTransaction:[input readBool]];
        break;
      }
      case 64: {
        [self setIsAcross:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdCode {
  return resultCmdSignPb.hasCmdCode;
}
- (NSString*) cmdCode {
  return resultCmdSignPb.cmdCode;
}
- (CmdSignPbBuilder*) setCmdCode:(NSString*) value {
  resultCmdSignPb.hasCmdCode = YES;
  resultCmdSignPb.cmdCode = value;
  return self;
}
- (CmdSignPbBuilder*) clearCmdCode {
  resultCmdSignPb.hasCmdCode = NO;
  resultCmdSignPb.cmdCode = @"";
  return self;
}
- (BOOL) hasReqCode {
  return resultCmdSignPb.hasReqCode;
}
- (NSString*) reqCode {
  return resultCmdSignPb.reqCode;
}
- (CmdSignPbBuilder*) setReqCode:(NSString*) value {
  resultCmdSignPb.hasReqCode = YES;
  resultCmdSignPb.reqCode = value;
  return self;
}
- (CmdSignPbBuilder*) clearReqCode {
  resultCmdSignPb.hasReqCode = NO;
  resultCmdSignPb.reqCode = @"";
  return self;
}
- (BOOL) hasRespCode {
  return resultCmdSignPb.hasRespCode;
}
- (NSString*) respCode {
  return resultCmdSignPb.respCode;
}
- (CmdSignPbBuilder*) setRespCode:(NSString*) value {
  resultCmdSignPb.hasRespCode = YES;
  resultCmdSignPb.respCode = value;
  return self;
}
- (CmdSignPbBuilder*) clearRespCode {
  resultCmdSignPb.hasRespCode = NO;
  resultCmdSignPb.respCode = @"";
  return self;
}
- (BOOL) hasMsg {
  return resultCmdSignPb.hasMsg;
}
- (NSString*) msg {
  return resultCmdSignPb.msg;
}
- (CmdSignPbBuilder*) setMsg:(NSString*) value {
  resultCmdSignPb.hasMsg = YES;
  resultCmdSignPb.msg = value;
  return self;
}
- (CmdSignPbBuilder*) clearMsg {
  resultCmdSignPb.hasMsg = NO;
  resultCmdSignPb.msg = @"";
  return self;
}
- (BOOL) hasSource {
  return resultCmdSignPb.hasSource;
}
- (NSData*) source {
  return resultCmdSignPb.source;
}
- (CmdSignPbBuilder*) setSource:(NSData*) value {
  resultCmdSignPb.hasSource = YES;
  resultCmdSignPb.source = value;
  return self;
}
- (CmdSignPbBuilder*) clearSource {
  resultCmdSignPb.hasSource = NO;
  resultCmdSignPb.source = [NSData data];
  return self;
}
- (BOOL) hasToken {
  return resultCmdSignPb.hasToken;
}
- (NSString*) token {
  return resultCmdSignPb.token;
}
- (CmdSignPbBuilder*) setToken:(NSString*) value {
  resultCmdSignPb.hasToken = YES;
  resultCmdSignPb.token = value;
  return self;
}
- (CmdSignPbBuilder*) clearToken {
  resultCmdSignPb.hasToken = NO;
  resultCmdSignPb.token = @"";
  return self;
}
- (BOOL) hasOpenTransaction {
  return resultCmdSignPb.hasOpenTransaction;
}
- (BOOL) openTransaction {
  return resultCmdSignPb.openTransaction;
}
- (CmdSignPbBuilder*) setOpenTransaction:(BOOL) value {
  resultCmdSignPb.hasOpenTransaction = YES;
  resultCmdSignPb.openTransaction = value;
  return self;
}
- (CmdSignPbBuilder*) clearOpenTransaction {
  resultCmdSignPb.hasOpenTransaction = NO;
  resultCmdSignPb.openTransaction = NO;
  return self;
}
- (BOOL) hasIsAcross {
  return resultCmdSignPb.hasIsAcross;
}
- (BOOL) isAcross {
  return resultCmdSignPb.isAcross;
}
- (CmdSignPbBuilder*) setIsAcross:(BOOL) value {
  resultCmdSignPb.hasIsAcross = YES;
  resultCmdSignPb.isAcross = value;
  return self;
}
- (CmdSignPbBuilder*) clearIsAcross {
  resultCmdSignPb.hasIsAcross = NO;
  resultCmdSignPb.isAcross = NO;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
