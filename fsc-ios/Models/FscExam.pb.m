// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscExam.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscExamRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscExamRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FscExamReqPb ()
@property SInt64 nodeId;
@property SInt64 examId;
@property SInt64 studentId;
@property (strong) NSMutableArray * fscExamReqImgPbArray;
@end

@implementation FscExamReqPb

- (BOOL) hasNodeId {
  return !!hasNodeId_;
}
- (void) setHasNodeId:(BOOL) _value_ {
  hasNodeId_ = !!_value_;
}
@synthesize nodeId;
- (BOOL) hasExamId {
  return !!hasExamId_;
}
- (void) setHasExamId:(BOOL) _value_ {
  hasExamId_ = !!_value_;
}
@synthesize examId;
- (BOOL) hasStudentId {
  return !!hasStudentId_;
}
- (void) setHasStudentId:(BOOL) _value_ {
  hasStudentId_ = !!_value_;
}
@synthesize studentId;
@synthesize fscExamReqImgPbArray;
@dynamic fscExamReqImgPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.nodeId = 0L;
    self.examId = 0L;
    self.studentId = 0L;
  }
  return self;
}
static FscExamReqPb* defaultFscExamReqPbInstance = nil;
+ (void) initialize {
  if (self == [FscExamReqPb class]) {
    defaultFscExamReqPbInstance = [[FscExamReqPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscExamReqPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscExamReqPbInstance;
}
- (NSArray *)fscExamReqImgPb {
  return fscExamReqImgPbArray;
}
- (FscExamReqImgPb*)fscExamReqImgPbAtIndex:(NSUInteger)index {
  return [fscExamReqImgPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNodeId) {
    [output writeInt64:1 value:self.nodeId];
  }
  if (self.hasExamId) {
    [output writeInt64:2 value:self.examId];
  }
  if (self.hasStudentId) {
    [output writeInt64:3 value:self.studentId];
  }
  [self.fscExamReqImgPbArray enumerateObjectsUsingBlock:^(FscExamReqImgPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNodeId) {
    size_ += computeInt64Size(1, self.nodeId);
  }
  if (self.hasExamId) {
    size_ += computeInt64Size(2, self.examId);
  }
  if (self.hasStudentId) {
    size_ += computeInt64Size(3, self.studentId);
  }
  [self.fscExamReqImgPbArray enumerateObjectsUsingBlock:^(FscExamReqImgPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscExamReqPb*) parseFromData:(NSData*) data {
  return (FscExamReqPb*)[[[FscExamReqPb builder] mergeFromData:data] build];
}
+ (FscExamReqPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamReqPb*)[[[FscExamReqPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscExamReqPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscExamReqPb*)[[[FscExamReqPb builder] mergeFromInputStream:input] build];
}
+ (FscExamReqPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamReqPb*)[[[FscExamReqPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscExamReqPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscExamReqPb*)[[[FscExamReqPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscExamReqPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamReqPb*)[[[FscExamReqPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscExamReqPbBuilder*) builder {
  return [[FscExamReqPbBuilder alloc] init];
}
+ (FscExamReqPbBuilder*) builderWithPrototype:(FscExamReqPb*) prototype {
  return [[FscExamReqPb builder] mergeFrom:prototype];
}
- (FscExamReqPbBuilder*) builder {
  return [FscExamReqPb builder];
}
- (FscExamReqPbBuilder*) toBuilder {
  return [FscExamReqPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nodeId", [NSNumber numberWithLongLong:self.nodeId]];
  }
  if (self.hasExamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"examId", [NSNumber numberWithLongLong:self.examId]];
  }
  if (self.hasStudentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentId", [NSNumber numberWithLongLong:self.studentId]];
  }
  [self.fscExamReqImgPbArray enumerateObjectsUsingBlock:^(FscExamReqImgPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"fscExamReqImgPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNodeId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.nodeId] forKey: @"nodeId"];
  }
  if (self.hasExamId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.examId] forKey: @"examId"];
  }
  if (self.hasStudentId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.studentId] forKey: @"studentId"];
  }
  for (FscExamReqImgPb* element in self.fscExamReqImgPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"fscExamReqImgPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscExamReqPb class]]) {
    return NO;
  }
  FscExamReqPb *otherMessage = other;
  return
      self.hasNodeId == otherMessage.hasNodeId &&
      (!self.hasNodeId || self.nodeId == otherMessage.nodeId) &&
      self.hasExamId == otherMessage.hasExamId &&
      (!self.hasExamId || self.examId == otherMessage.examId) &&
      self.hasStudentId == otherMessage.hasStudentId &&
      (!self.hasStudentId || self.studentId == otherMessage.studentId) &&
      [self.fscExamReqImgPbArray isEqualToArray:otherMessage.fscExamReqImgPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.nodeId] hash];
  }
  if (self.hasExamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.examId] hash];
  }
  if (self.hasStudentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.studentId] hash];
  }
  [self.fscExamReqImgPbArray enumerateObjectsUsingBlock:^(FscExamReqImgPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscExamReqPbBuilder()
@property (strong) FscExamReqPb* resultFscExamReqPb;
@end

@implementation FscExamReqPbBuilder
@synthesize resultFscExamReqPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscExamReqPb = [[FscExamReqPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscExamReqPb;
}
- (FscExamReqPbBuilder*) clear {
  self.resultFscExamReqPb = [[FscExamReqPb alloc] init];
  return self;
}
- (FscExamReqPbBuilder*) clone {
  return [FscExamReqPb builderWithPrototype:resultFscExamReqPb];
}
- (FscExamReqPb*) defaultInstance {
  return [FscExamReqPb defaultInstance];
}
- (FscExamReqPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscExamReqPb*) buildPartial {
  FscExamReqPb* returnMe = resultFscExamReqPb;
  self.resultFscExamReqPb = nil;
  return returnMe;
}
- (FscExamReqPbBuilder*) mergeFrom:(FscExamReqPb*) other {
  if (other == [FscExamReqPb defaultInstance]) {
    return self;
  }
  if (other.hasNodeId) {
    [self setNodeId:other.nodeId];
  }
  if (other.hasExamId) {
    [self setExamId:other.examId];
  }
  if (other.hasStudentId) {
    [self setStudentId:other.studentId];
  }
  if (other.fscExamReqImgPbArray.count > 0) {
    if (resultFscExamReqPb.fscExamReqImgPbArray == nil) {
      resultFscExamReqPb.fscExamReqImgPbArray = [[NSMutableArray alloc] initWithArray:other.fscExamReqImgPbArray];
    } else {
      [resultFscExamReqPb.fscExamReqImgPbArray addObjectsFromArray:other.fscExamReqImgPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscExamReqPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscExamReqPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNodeId:[input readInt64]];
        break;
      }
      case 16: {
        [self setExamId:[input readInt64]];
        break;
      }
      case 24: {
        [self setStudentId:[input readInt64]];
        break;
      }
      case 34: {
        FscExamReqImgPbBuilder* subBuilder = [FscExamReqImgPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFscExamReqImgPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNodeId {
  return resultFscExamReqPb.hasNodeId;
}
- (SInt64) nodeId {
  return resultFscExamReqPb.nodeId;
}
- (FscExamReqPbBuilder*) setNodeId:(SInt64) value {
  resultFscExamReqPb.hasNodeId = YES;
  resultFscExamReqPb.nodeId = value;
  return self;
}
- (FscExamReqPbBuilder*) clearNodeId {
  resultFscExamReqPb.hasNodeId = NO;
  resultFscExamReqPb.nodeId = 0L;
  return self;
}
- (BOOL) hasExamId {
  return resultFscExamReqPb.hasExamId;
}
- (SInt64) examId {
  return resultFscExamReqPb.examId;
}
- (FscExamReqPbBuilder*) setExamId:(SInt64) value {
  resultFscExamReqPb.hasExamId = YES;
  resultFscExamReqPb.examId = value;
  return self;
}
- (FscExamReqPbBuilder*) clearExamId {
  resultFscExamReqPb.hasExamId = NO;
  resultFscExamReqPb.examId = 0L;
  return self;
}
- (BOOL) hasStudentId {
  return resultFscExamReqPb.hasStudentId;
}
- (SInt64) studentId {
  return resultFscExamReqPb.studentId;
}
- (FscExamReqPbBuilder*) setStudentId:(SInt64) value {
  resultFscExamReqPb.hasStudentId = YES;
  resultFscExamReqPb.studentId = value;
  return self;
}
- (FscExamReqPbBuilder*) clearStudentId {
  resultFscExamReqPb.hasStudentId = NO;
  resultFscExamReqPb.studentId = 0L;
  return self;
}
- (NSMutableArray *)fscExamReqImgPb {
  return resultFscExamReqPb.fscExamReqImgPbArray;
}
- (FscExamReqImgPb*)fscExamReqImgPbAtIndex:(NSUInteger)index {
  return [resultFscExamReqPb fscExamReqImgPbAtIndex:index];
}
- (FscExamReqPbBuilder *)addFscExamReqImgPb:(FscExamReqImgPb*)value {
  if (resultFscExamReqPb.fscExamReqImgPbArray == nil) {
    resultFscExamReqPb.fscExamReqImgPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscExamReqPb.fscExamReqImgPbArray addObject:value];
  return self;
}
- (FscExamReqPbBuilder *)setFscExamReqImgPbArray:(NSArray *)array {
  resultFscExamReqPb.fscExamReqImgPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscExamReqPbBuilder *)clearFscExamReqImgPb {
  resultFscExamReqPb.fscExamReqImgPbArray = nil;
  return self;
}
@end

@interface FscExamPb ()
@property SInt64 paperId;
@property (strong) NSString* examType;
@property (strong) NSString* title;
@property SInt32 totalScore;
@property SInt32 studentScore;
@property SInt32 workStatus;
@property (strong) NSString* sheetPath;
@end

@implementation FscExamPb

- (BOOL) hasPaperId {
  return !!hasPaperId_;
}
- (void) setHasPaperId:(BOOL) _value_ {
  hasPaperId_ = !!_value_;
}
@synthesize paperId;
- (BOOL) hasExamType {
  return !!hasExamType_;
}
- (void) setHasExamType:(BOOL) _value_ {
  hasExamType_ = !!_value_;
}
@synthesize examType;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasTotalScore {
  return !!hasTotalScore_;
}
- (void) setHasTotalScore:(BOOL) _value_ {
  hasTotalScore_ = !!_value_;
}
@synthesize totalScore;
- (BOOL) hasStudentScore {
  return !!hasStudentScore_;
}
- (void) setHasStudentScore:(BOOL) _value_ {
  hasStudentScore_ = !!_value_;
}
@synthesize studentScore;
- (BOOL) hasWorkStatus {
  return !!hasWorkStatus_;
}
- (void) setHasWorkStatus:(BOOL) _value_ {
  hasWorkStatus_ = !!_value_;
}
@synthesize workStatus;
- (BOOL) hasSheetPath {
  return !!hasSheetPath_;
}
- (void) setHasSheetPath:(BOOL) _value_ {
  hasSheetPath_ = !!_value_;
}
@synthesize sheetPath;
- (instancetype) init {
  if ((self = [super init])) {
    self.paperId = 0L;
    self.examType = @"";
    self.title = @"";
    self.totalScore = 0;
    self.studentScore = 0;
    self.workStatus = 0;
    self.sheetPath = @"";
  }
  return self;
}
static FscExamPb* defaultFscExamPbInstance = nil;
+ (void) initialize {
  if (self == [FscExamPb class]) {
    defaultFscExamPbInstance = [[FscExamPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscExamPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscExamPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPaperId) {
    [output writeInt64:1 value:self.paperId];
  }
  if (self.hasExamType) {
    [output writeString:2 value:self.examType];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasTotalScore) {
    [output writeInt32:4 value:self.totalScore];
  }
  if (self.hasStudentScore) {
    [output writeInt32:5 value:self.studentScore];
  }
  if (self.hasWorkStatus) {
    [output writeInt32:6 value:self.workStatus];
  }
  if (self.hasSheetPath) {
    [output writeString:7 value:self.sheetPath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPaperId) {
    size_ += computeInt64Size(1, self.paperId);
  }
  if (self.hasExamType) {
    size_ += computeStringSize(2, self.examType);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasTotalScore) {
    size_ += computeInt32Size(4, self.totalScore);
  }
  if (self.hasStudentScore) {
    size_ += computeInt32Size(5, self.studentScore);
  }
  if (self.hasWorkStatus) {
    size_ += computeInt32Size(6, self.workStatus);
  }
  if (self.hasSheetPath) {
    size_ += computeStringSize(7, self.sheetPath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscExamPb*) parseFromData:(NSData*) data {
  return (FscExamPb*)[[[FscExamPb builder] mergeFromData:data] build];
}
+ (FscExamPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamPb*)[[[FscExamPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscExamPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscExamPb*)[[[FscExamPb builder] mergeFromInputStream:input] build];
}
+ (FscExamPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamPb*)[[[FscExamPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscExamPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscExamPb*)[[[FscExamPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscExamPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamPb*)[[[FscExamPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscExamPbBuilder*) builder {
  return [[FscExamPbBuilder alloc] init];
}
+ (FscExamPbBuilder*) builderWithPrototype:(FscExamPb*) prototype {
  return [[FscExamPb builder] mergeFrom:prototype];
}
- (FscExamPbBuilder*) builder {
  return [FscExamPb builder];
}
- (FscExamPbBuilder*) toBuilder {
  return [FscExamPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPaperId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"paperId", [NSNumber numberWithLongLong:self.paperId]];
  }
  if (self.hasExamType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"examType", self.examType];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasTotalScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalScore", [NSNumber numberWithInteger:self.totalScore]];
  }
  if (self.hasStudentScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentScore", [NSNumber numberWithInteger:self.studentScore]];
  }
  if (self.hasWorkStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"workStatus", [NSNumber numberWithInteger:self.workStatus]];
  }
  if (self.hasSheetPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sheetPath", self.sheetPath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPaperId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.paperId] forKey: @"paperId"];
  }
  if (self.hasExamType) {
    [dictionary setObject: self.examType forKey: @"examType"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasTotalScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.totalScore] forKey: @"totalScore"];
  }
  if (self.hasStudentScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.studentScore] forKey: @"studentScore"];
  }
  if (self.hasWorkStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.workStatus] forKey: @"workStatus"];
  }
  if (self.hasSheetPath) {
    [dictionary setObject: self.sheetPath forKey: @"sheetPath"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscExamPb class]]) {
    return NO;
  }
  FscExamPb *otherMessage = other;
  return
      self.hasPaperId == otherMessage.hasPaperId &&
      (!self.hasPaperId || self.paperId == otherMessage.paperId) &&
      self.hasExamType == otherMessage.hasExamType &&
      (!self.hasExamType || [self.examType isEqual:otherMessage.examType]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasTotalScore == otherMessage.hasTotalScore &&
      (!self.hasTotalScore || self.totalScore == otherMessage.totalScore) &&
      self.hasStudentScore == otherMessage.hasStudentScore &&
      (!self.hasStudentScore || self.studentScore == otherMessage.studentScore) &&
      self.hasWorkStatus == otherMessage.hasWorkStatus &&
      (!self.hasWorkStatus || self.workStatus == otherMessage.workStatus) &&
      self.hasSheetPath == otherMessage.hasSheetPath &&
      (!self.hasSheetPath || [self.sheetPath isEqual:otherMessage.sheetPath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPaperId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.paperId] hash];
  }
  if (self.hasExamType) {
    hashCode = hashCode * 31 + [self.examType hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasTotalScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalScore] hash];
  }
  if (self.hasStudentScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.studentScore] hash];
  }
  if (self.hasWorkStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.workStatus] hash];
  }
  if (self.hasSheetPath) {
    hashCode = hashCode * 31 + [self.sheetPath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscExamPbBuilder()
@property (strong) FscExamPb* resultFscExamPb;
@end

@implementation FscExamPbBuilder
@synthesize resultFscExamPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscExamPb = [[FscExamPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscExamPb;
}
- (FscExamPbBuilder*) clear {
  self.resultFscExamPb = [[FscExamPb alloc] init];
  return self;
}
- (FscExamPbBuilder*) clone {
  return [FscExamPb builderWithPrototype:resultFscExamPb];
}
- (FscExamPb*) defaultInstance {
  return [FscExamPb defaultInstance];
}
- (FscExamPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscExamPb*) buildPartial {
  FscExamPb* returnMe = resultFscExamPb;
  self.resultFscExamPb = nil;
  return returnMe;
}
- (FscExamPbBuilder*) mergeFrom:(FscExamPb*) other {
  if (other == [FscExamPb defaultInstance]) {
    return self;
  }
  if (other.hasPaperId) {
    [self setPaperId:other.paperId];
  }
  if (other.hasExamType) {
    [self setExamType:other.examType];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasTotalScore) {
    [self setTotalScore:other.totalScore];
  }
  if (other.hasStudentScore) {
    [self setStudentScore:other.studentScore];
  }
  if (other.hasWorkStatus) {
    [self setWorkStatus:other.workStatus];
  }
  if (other.hasSheetPath) {
    [self setSheetPath:other.sheetPath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscExamPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscExamPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPaperId:[input readInt64]];
        break;
      }
      case 18: {
        [self setExamType:[input readString]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 32: {
        [self setTotalScore:[input readInt32]];
        break;
      }
      case 40: {
        [self setStudentScore:[input readInt32]];
        break;
      }
      case 48: {
        [self setWorkStatus:[input readInt32]];
        break;
      }
      case 58: {
        [self setSheetPath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPaperId {
  return resultFscExamPb.hasPaperId;
}
- (SInt64) paperId {
  return resultFscExamPb.paperId;
}
- (FscExamPbBuilder*) setPaperId:(SInt64) value {
  resultFscExamPb.hasPaperId = YES;
  resultFscExamPb.paperId = value;
  return self;
}
- (FscExamPbBuilder*) clearPaperId {
  resultFscExamPb.hasPaperId = NO;
  resultFscExamPb.paperId = 0L;
  return self;
}
- (BOOL) hasExamType {
  return resultFscExamPb.hasExamType;
}
- (NSString*) examType {
  return resultFscExamPb.examType;
}
- (FscExamPbBuilder*) setExamType:(NSString*) value {
  resultFscExamPb.hasExamType = YES;
  resultFscExamPb.examType = value;
  return self;
}
- (FscExamPbBuilder*) clearExamType {
  resultFscExamPb.hasExamType = NO;
  resultFscExamPb.examType = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultFscExamPb.hasTitle;
}
- (NSString*) title {
  return resultFscExamPb.title;
}
- (FscExamPbBuilder*) setTitle:(NSString*) value {
  resultFscExamPb.hasTitle = YES;
  resultFscExamPb.title = value;
  return self;
}
- (FscExamPbBuilder*) clearTitle {
  resultFscExamPb.hasTitle = NO;
  resultFscExamPb.title = @"";
  return self;
}
- (BOOL) hasTotalScore {
  return resultFscExamPb.hasTotalScore;
}
- (SInt32) totalScore {
  return resultFscExamPb.totalScore;
}
- (FscExamPbBuilder*) setTotalScore:(SInt32) value {
  resultFscExamPb.hasTotalScore = YES;
  resultFscExamPb.totalScore = value;
  return self;
}
- (FscExamPbBuilder*) clearTotalScore {
  resultFscExamPb.hasTotalScore = NO;
  resultFscExamPb.totalScore = 0;
  return self;
}
- (BOOL) hasStudentScore {
  return resultFscExamPb.hasStudentScore;
}
- (SInt32) studentScore {
  return resultFscExamPb.studentScore;
}
- (FscExamPbBuilder*) setStudentScore:(SInt32) value {
  resultFscExamPb.hasStudentScore = YES;
  resultFscExamPb.studentScore = value;
  return self;
}
- (FscExamPbBuilder*) clearStudentScore {
  resultFscExamPb.hasStudentScore = NO;
  resultFscExamPb.studentScore = 0;
  return self;
}
- (BOOL) hasWorkStatus {
  return resultFscExamPb.hasWorkStatus;
}
- (SInt32) workStatus {
  return resultFscExamPb.workStatus;
}
- (FscExamPbBuilder*) setWorkStatus:(SInt32) value {
  resultFscExamPb.hasWorkStatus = YES;
  resultFscExamPb.workStatus = value;
  return self;
}
- (FscExamPbBuilder*) clearWorkStatus {
  resultFscExamPb.hasWorkStatus = NO;
  resultFscExamPb.workStatus = 0;
  return self;
}
- (BOOL) hasSheetPath {
  return resultFscExamPb.hasSheetPath;
}
- (NSString*) sheetPath {
  return resultFscExamPb.sheetPath;
}
- (FscExamPbBuilder*) setSheetPath:(NSString*) value {
  resultFscExamPb.hasSheetPath = YES;
  resultFscExamPb.sheetPath = value;
  return self;
}
- (FscExamPbBuilder*) clearSheetPath {
  resultFscExamPb.hasSheetPath = NO;
  resultFscExamPb.sheetPath = @"";
  return self;
}
@end

@interface FscExamPaperPb ()
@property SInt64 paperId;
@property SInt32 studentScore;
@property SInt32 workStatus;
@property (strong) NSString* sheetPath;
@end

@implementation FscExamPaperPb

- (BOOL) hasPaperId {
  return !!hasPaperId_;
}
- (void) setHasPaperId:(BOOL) _value_ {
  hasPaperId_ = !!_value_;
}
@synthesize paperId;
- (BOOL) hasStudentScore {
  return !!hasStudentScore_;
}
- (void) setHasStudentScore:(BOOL) _value_ {
  hasStudentScore_ = !!_value_;
}
@synthesize studentScore;
- (BOOL) hasWorkStatus {
  return !!hasWorkStatus_;
}
- (void) setHasWorkStatus:(BOOL) _value_ {
  hasWorkStatus_ = !!_value_;
}
@synthesize workStatus;
- (BOOL) hasSheetPath {
  return !!hasSheetPath_;
}
- (void) setHasSheetPath:(BOOL) _value_ {
  hasSheetPath_ = !!_value_;
}
@synthesize sheetPath;
- (instancetype) init {
  if ((self = [super init])) {
    self.paperId = 0L;
    self.studentScore = 0;
    self.workStatus = 0;
    self.sheetPath = @"";
  }
  return self;
}
static FscExamPaperPb* defaultFscExamPaperPbInstance = nil;
+ (void) initialize {
  if (self == [FscExamPaperPb class]) {
    defaultFscExamPaperPbInstance = [[FscExamPaperPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscExamPaperPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscExamPaperPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPaperId) {
    [output writeInt64:1 value:self.paperId];
  }
  if (self.hasStudentScore) {
    [output writeInt32:2 value:self.studentScore];
  }
  if (self.hasWorkStatus) {
    [output writeInt32:3 value:self.workStatus];
  }
  if (self.hasSheetPath) {
    [output writeString:4 value:self.sheetPath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPaperId) {
    size_ += computeInt64Size(1, self.paperId);
  }
  if (self.hasStudentScore) {
    size_ += computeInt32Size(2, self.studentScore);
  }
  if (self.hasWorkStatus) {
    size_ += computeInt32Size(3, self.workStatus);
  }
  if (self.hasSheetPath) {
    size_ += computeStringSize(4, self.sheetPath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscExamPaperPb*) parseFromData:(NSData*) data {
  return (FscExamPaperPb*)[[[FscExamPaperPb builder] mergeFromData:data] build];
}
+ (FscExamPaperPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamPaperPb*)[[[FscExamPaperPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscExamPaperPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscExamPaperPb*)[[[FscExamPaperPb builder] mergeFromInputStream:input] build];
}
+ (FscExamPaperPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamPaperPb*)[[[FscExamPaperPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscExamPaperPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscExamPaperPb*)[[[FscExamPaperPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscExamPaperPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamPaperPb*)[[[FscExamPaperPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscExamPaperPbBuilder*) builder {
  return [[FscExamPaperPbBuilder alloc] init];
}
+ (FscExamPaperPbBuilder*) builderWithPrototype:(FscExamPaperPb*) prototype {
  return [[FscExamPaperPb builder] mergeFrom:prototype];
}
- (FscExamPaperPbBuilder*) builder {
  return [FscExamPaperPb builder];
}
- (FscExamPaperPbBuilder*) toBuilder {
  return [FscExamPaperPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPaperId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"paperId", [NSNumber numberWithLongLong:self.paperId]];
  }
  if (self.hasStudentScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentScore", [NSNumber numberWithInteger:self.studentScore]];
  }
  if (self.hasWorkStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"workStatus", [NSNumber numberWithInteger:self.workStatus]];
  }
  if (self.hasSheetPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sheetPath", self.sheetPath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPaperId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.paperId] forKey: @"paperId"];
  }
  if (self.hasStudentScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.studentScore] forKey: @"studentScore"];
  }
  if (self.hasWorkStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.workStatus] forKey: @"workStatus"];
  }
  if (self.hasSheetPath) {
    [dictionary setObject: self.sheetPath forKey: @"sheetPath"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscExamPaperPb class]]) {
    return NO;
  }
  FscExamPaperPb *otherMessage = other;
  return
      self.hasPaperId == otherMessage.hasPaperId &&
      (!self.hasPaperId || self.paperId == otherMessage.paperId) &&
      self.hasStudentScore == otherMessage.hasStudentScore &&
      (!self.hasStudentScore || self.studentScore == otherMessage.studentScore) &&
      self.hasWorkStatus == otherMessage.hasWorkStatus &&
      (!self.hasWorkStatus || self.workStatus == otherMessage.workStatus) &&
      self.hasSheetPath == otherMessage.hasSheetPath &&
      (!self.hasSheetPath || [self.sheetPath isEqual:otherMessage.sheetPath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPaperId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.paperId] hash];
  }
  if (self.hasStudentScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.studentScore] hash];
  }
  if (self.hasWorkStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.workStatus] hash];
  }
  if (self.hasSheetPath) {
    hashCode = hashCode * 31 + [self.sheetPath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscExamPaperPbBuilder()
@property (strong) FscExamPaperPb* resultFscExamPaperPb;
@end

@implementation FscExamPaperPbBuilder
@synthesize resultFscExamPaperPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscExamPaperPb = [[FscExamPaperPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscExamPaperPb;
}
- (FscExamPaperPbBuilder*) clear {
  self.resultFscExamPaperPb = [[FscExamPaperPb alloc] init];
  return self;
}
- (FscExamPaperPbBuilder*) clone {
  return [FscExamPaperPb builderWithPrototype:resultFscExamPaperPb];
}
- (FscExamPaperPb*) defaultInstance {
  return [FscExamPaperPb defaultInstance];
}
- (FscExamPaperPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscExamPaperPb*) buildPartial {
  FscExamPaperPb* returnMe = resultFscExamPaperPb;
  self.resultFscExamPaperPb = nil;
  return returnMe;
}
- (FscExamPaperPbBuilder*) mergeFrom:(FscExamPaperPb*) other {
  if (other == [FscExamPaperPb defaultInstance]) {
    return self;
  }
  if (other.hasPaperId) {
    [self setPaperId:other.paperId];
  }
  if (other.hasStudentScore) {
    [self setStudentScore:other.studentScore];
  }
  if (other.hasWorkStatus) {
    [self setWorkStatus:other.workStatus];
  }
  if (other.hasSheetPath) {
    [self setSheetPath:other.sheetPath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscExamPaperPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscExamPaperPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPaperId:[input readInt64]];
        break;
      }
      case 16: {
        [self setStudentScore:[input readInt32]];
        break;
      }
      case 24: {
        [self setWorkStatus:[input readInt32]];
        break;
      }
      case 34: {
        [self setSheetPath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPaperId {
  return resultFscExamPaperPb.hasPaperId;
}
- (SInt64) paperId {
  return resultFscExamPaperPb.paperId;
}
- (FscExamPaperPbBuilder*) setPaperId:(SInt64) value {
  resultFscExamPaperPb.hasPaperId = YES;
  resultFscExamPaperPb.paperId = value;
  return self;
}
- (FscExamPaperPbBuilder*) clearPaperId {
  resultFscExamPaperPb.hasPaperId = NO;
  resultFscExamPaperPb.paperId = 0L;
  return self;
}
- (BOOL) hasStudentScore {
  return resultFscExamPaperPb.hasStudentScore;
}
- (SInt32) studentScore {
  return resultFscExamPaperPb.studentScore;
}
- (FscExamPaperPbBuilder*) setStudentScore:(SInt32) value {
  resultFscExamPaperPb.hasStudentScore = YES;
  resultFscExamPaperPb.studentScore = value;
  return self;
}
- (FscExamPaperPbBuilder*) clearStudentScore {
  resultFscExamPaperPb.hasStudentScore = NO;
  resultFscExamPaperPb.studentScore = 0;
  return self;
}
- (BOOL) hasWorkStatus {
  return resultFscExamPaperPb.hasWorkStatus;
}
- (SInt32) workStatus {
  return resultFscExamPaperPb.workStatus;
}
- (FscExamPaperPbBuilder*) setWorkStatus:(SInt32) value {
  resultFscExamPaperPb.hasWorkStatus = YES;
  resultFscExamPaperPb.workStatus = value;
  return self;
}
- (FscExamPaperPbBuilder*) clearWorkStatus {
  resultFscExamPaperPb.hasWorkStatus = NO;
  resultFscExamPaperPb.workStatus = 0;
  return self;
}
- (BOOL) hasSheetPath {
  return resultFscExamPaperPb.hasSheetPath;
}
- (NSString*) sheetPath {
  return resultFscExamPaperPb.sheetPath;
}
- (FscExamPaperPbBuilder*) setSheetPath:(NSString*) value {
  resultFscExamPaperPb.hasSheetPath = YES;
  resultFscExamPaperPb.sheetPath = value;
  return self;
}
- (FscExamPaperPbBuilder*) clearSheetPath {
  resultFscExamPaperPb.hasSheetPath = NO;
  resultFscExamPaperPb.sheetPath = @"";
  return self;
}
@end

@interface FscExamReqImgPb ()
@property (strong) NSData* imgByte;
@end

@implementation FscExamReqImgPb

- (BOOL) hasImgByte {
  return !!hasImgByte_;
}
- (void) setHasImgByte:(BOOL) _value_ {
  hasImgByte_ = !!_value_;
}
@synthesize imgByte;
- (instancetype) init {
  if ((self = [super init])) {
    self.imgByte = [NSData data];
  }
  return self;
}
static FscExamReqImgPb* defaultFscExamReqImgPbInstance = nil;
+ (void) initialize {
  if (self == [FscExamReqImgPb class]) {
    defaultFscExamReqImgPbInstance = [[FscExamReqImgPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscExamReqImgPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscExamReqImgPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasImgByte) {
    [output writeData:1 value:self.imgByte];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasImgByte) {
    size_ += computeDataSize(1, self.imgByte);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscExamReqImgPb*) parseFromData:(NSData*) data {
  return (FscExamReqImgPb*)[[[FscExamReqImgPb builder] mergeFromData:data] build];
}
+ (FscExamReqImgPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamReqImgPb*)[[[FscExamReqImgPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscExamReqImgPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscExamReqImgPb*)[[[FscExamReqImgPb builder] mergeFromInputStream:input] build];
}
+ (FscExamReqImgPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamReqImgPb*)[[[FscExamReqImgPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscExamReqImgPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscExamReqImgPb*)[[[FscExamReqImgPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscExamReqImgPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscExamReqImgPb*)[[[FscExamReqImgPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscExamReqImgPbBuilder*) builder {
  return [[FscExamReqImgPbBuilder alloc] init];
}
+ (FscExamReqImgPbBuilder*) builderWithPrototype:(FscExamReqImgPb*) prototype {
  return [[FscExamReqImgPb builder] mergeFrom:prototype];
}
- (FscExamReqImgPbBuilder*) builder {
  return [FscExamReqImgPb builder];
}
- (FscExamReqImgPbBuilder*) toBuilder {
  return [FscExamReqImgPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasImgByte) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgByte", self.imgByte];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasImgByte) {
    [dictionary setObject: self.imgByte forKey: @"imgByte"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscExamReqImgPb class]]) {
    return NO;
  }
  FscExamReqImgPb *otherMessage = other;
  return
      self.hasImgByte == otherMessage.hasImgByte &&
      (!self.hasImgByte || [self.imgByte isEqual:otherMessage.imgByte]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasImgByte) {
    hashCode = hashCode * 31 + [self.imgByte hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscExamReqImgPbBuilder()
@property (strong) FscExamReqImgPb* resultFscExamReqImgPb;
@end

@implementation FscExamReqImgPbBuilder
@synthesize resultFscExamReqImgPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscExamReqImgPb = [[FscExamReqImgPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscExamReqImgPb;
}
- (FscExamReqImgPbBuilder*) clear {
  self.resultFscExamReqImgPb = [[FscExamReqImgPb alloc] init];
  return self;
}
- (FscExamReqImgPbBuilder*) clone {
  return [FscExamReqImgPb builderWithPrototype:resultFscExamReqImgPb];
}
- (FscExamReqImgPb*) defaultInstance {
  return [FscExamReqImgPb defaultInstance];
}
- (FscExamReqImgPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscExamReqImgPb*) buildPartial {
  FscExamReqImgPb* returnMe = resultFscExamReqImgPb;
  self.resultFscExamReqImgPb = nil;
  return returnMe;
}
- (FscExamReqImgPbBuilder*) mergeFrom:(FscExamReqImgPb*) other {
  if (other == [FscExamReqImgPb defaultInstance]) {
    return self;
  }
  if (other.hasImgByte) {
    [self setImgByte:other.imgByte];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscExamReqImgPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscExamReqImgPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setImgByte:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasImgByte {
  return resultFscExamReqImgPb.hasImgByte;
}
- (NSData*) imgByte {
  return resultFscExamReqImgPb.imgByte;
}
- (FscExamReqImgPbBuilder*) setImgByte:(NSData*) value {
  resultFscExamReqImgPb.hasImgByte = YES;
  resultFscExamReqImgPb.imgByte = value;
  return self;
}
- (FscExamReqImgPbBuilder*) clearImgByte {
  resultFscExamReqImgPb.hasImgByte = NO;
  resultFscExamReqImgPb.imgByte = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
