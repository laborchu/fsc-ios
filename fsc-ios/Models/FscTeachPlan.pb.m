// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscTeachPlan.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscTeachPlanRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscTeachPlanRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TeachPlanPb ()
@property SInt64 id;
@property (strong) NSString* planName;
@end

@implementation TeachPlanPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasPlanName {
  return !!hasPlanName_;
}
- (void) setHasPlanName:(BOOL) _value_ {
  hasPlanName_ = !!_value_;
}
@synthesize planName;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.planName = @"";
  }
  return self;
}
static TeachPlanPb* defaultTeachPlanPbInstance = nil;
+ (void) initialize {
  if (self == [TeachPlanPb class]) {
    defaultTeachPlanPbInstance = [[TeachPlanPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTeachPlanPbInstance;
}
- (instancetype) defaultInstance {
  return defaultTeachPlanPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasPlanName) {
    [output writeString:2 value:self.planName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasPlanName) {
    size_ += computeStringSize(2, self.planName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TeachPlanPb*) parseFromData:(NSData*) data {
  return (TeachPlanPb*)[[[TeachPlanPb builder] mergeFromData:data] build];
}
+ (TeachPlanPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachPlanPb*)[[[TeachPlanPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TeachPlanPb*) parseFromInputStream:(NSInputStream*) input {
  return (TeachPlanPb*)[[[TeachPlanPb builder] mergeFromInputStream:input] build];
}
+ (TeachPlanPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachPlanPb*)[[[TeachPlanPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachPlanPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TeachPlanPb*)[[[TeachPlanPb builder] mergeFromCodedInputStream:input] build];
}
+ (TeachPlanPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachPlanPb*)[[[TeachPlanPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachPlanPbBuilder*) builder {
  return [[TeachPlanPbBuilder alloc] init];
}
+ (TeachPlanPbBuilder*) builderWithPrototype:(TeachPlanPb*) prototype {
  return [[TeachPlanPb builder] mergeFrom:prototype];
}
- (TeachPlanPbBuilder*) builder {
  return [TeachPlanPb builder];
}
- (TeachPlanPbBuilder*) toBuilder {
  return [TeachPlanPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasPlanName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"planName", self.planName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasPlanName) {
    [dictionary setObject: self.planName forKey: @"planName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TeachPlanPb class]]) {
    return NO;
  }
  TeachPlanPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasPlanName == otherMessage.hasPlanName &&
      (!self.hasPlanName || [self.planName isEqual:otherMessage.planName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasPlanName) {
    hashCode = hashCode * 31 + [self.planName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TeachPlanPbBuilder()
@property (strong) TeachPlanPb* resultTeachPlanPb;
@end

@implementation TeachPlanPbBuilder
@synthesize resultTeachPlanPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTeachPlanPb = [[TeachPlanPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTeachPlanPb;
}
- (TeachPlanPbBuilder*) clear {
  self.resultTeachPlanPb = [[TeachPlanPb alloc] init];
  return self;
}
- (TeachPlanPbBuilder*) clone {
  return [TeachPlanPb builderWithPrototype:resultTeachPlanPb];
}
- (TeachPlanPb*) defaultInstance {
  return [TeachPlanPb defaultInstance];
}
- (TeachPlanPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TeachPlanPb*) buildPartial {
  TeachPlanPb* returnMe = resultTeachPlanPb;
  self.resultTeachPlanPb = nil;
  return returnMe;
}
- (TeachPlanPbBuilder*) mergeFrom:(TeachPlanPb*) other {
  if (other == [TeachPlanPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasPlanName) {
    [self setPlanName:other.planName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TeachPlanPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TeachPlanPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setPlanName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultTeachPlanPb.hasId;
}
- (SInt64) id {
  return resultTeachPlanPb.id;
}
- (TeachPlanPbBuilder*) setId:(SInt64) value {
  resultTeachPlanPb.hasId = YES;
  resultTeachPlanPb.id = value;
  return self;
}
- (TeachPlanPbBuilder*) clearId {
  resultTeachPlanPb.hasId = NO;
  resultTeachPlanPb.id = 0L;
  return self;
}
- (BOOL) hasPlanName {
  return resultTeachPlanPb.hasPlanName;
}
- (NSString*) planName {
  return resultTeachPlanPb.planName;
}
- (TeachPlanPbBuilder*) setPlanName:(NSString*) value {
  resultTeachPlanPb.hasPlanName = YES;
  resultTeachPlanPb.planName = value;
  return self;
}
- (TeachPlanPbBuilder*) clearPlanName {
  resultTeachPlanPb.hasPlanName = NO;
  resultTeachPlanPb.planName = @"";
  return self;
}
@end

@interface TeachPlanNodePb ()
@property (strong) NSString* classIds;
@property SInt64 nodeDate;
@property (strong) NSString* text;
@property (strong) NSString* title;
@property (strong) NSMutableArray * teachPlanImgPbArray;
@property (strong) NSData* teachPlanVoice;
@end

@implementation TeachPlanNodePb

- (BOOL) hasClassIds {
  return !!hasClassIds_;
}
- (void) setHasClassIds:(BOOL) _value_ {
  hasClassIds_ = !!_value_;
}
@synthesize classIds;
- (BOOL) hasNodeDate {
  return !!hasNodeDate_;
}
- (void) setHasNodeDate:(BOOL) _value_ {
  hasNodeDate_ = !!_value_;
}
@synthesize nodeDate;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
@synthesize teachPlanImgPbArray;
@dynamic teachPlanImgPb;
- (BOOL) hasTeachPlanVoice {
  return !!hasTeachPlanVoice_;
}
- (void) setHasTeachPlanVoice:(BOOL) _value_ {
  hasTeachPlanVoice_ = !!_value_;
}
@synthesize teachPlanVoice;
- (instancetype) init {
  if ((self = [super init])) {
    self.classIds = @"";
    self.nodeDate = 0L;
    self.text = @"";
    self.title = @"";
    self.teachPlanVoice = [NSData data];
  }
  return self;
}
static TeachPlanNodePb* defaultTeachPlanNodePbInstance = nil;
+ (void) initialize {
  if (self == [TeachPlanNodePb class]) {
    defaultTeachPlanNodePbInstance = [[TeachPlanNodePb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTeachPlanNodePbInstance;
}
- (instancetype) defaultInstance {
  return defaultTeachPlanNodePbInstance;
}
- (NSArray *)teachPlanImgPb {
  return teachPlanImgPbArray;
}
- (TeachPlanImgPb*)teachPlanImgPbAtIndex:(NSUInteger)index {
  return [teachPlanImgPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClassIds) {
    [output writeString:1 value:self.classIds];
  }
  if (self.hasNodeDate) {
    [output writeInt64:2 value:self.nodeDate];
  }
  if (self.hasText) {
    [output writeString:3 value:self.text];
  }
  if (self.hasTitle) {
    [output writeString:4 value:self.title];
  }
  [self.teachPlanImgPbArray enumerateObjectsUsingBlock:^(TeachPlanImgPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasTeachPlanVoice) {
    [output writeData:6 value:self.teachPlanVoice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasClassIds) {
    size_ += computeStringSize(1, self.classIds);
  }
  if (self.hasNodeDate) {
    size_ += computeInt64Size(2, self.nodeDate);
  }
  if (self.hasText) {
    size_ += computeStringSize(3, self.text);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(4, self.title);
  }
  [self.teachPlanImgPbArray enumerateObjectsUsingBlock:^(TeachPlanImgPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasTeachPlanVoice) {
    size_ += computeDataSize(6, self.teachPlanVoice);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TeachPlanNodePb*) parseFromData:(NSData*) data {
  return (TeachPlanNodePb*)[[[TeachPlanNodePb builder] mergeFromData:data] build];
}
+ (TeachPlanNodePb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachPlanNodePb*)[[[TeachPlanNodePb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TeachPlanNodePb*) parseFromInputStream:(NSInputStream*) input {
  return (TeachPlanNodePb*)[[[TeachPlanNodePb builder] mergeFromInputStream:input] build];
}
+ (TeachPlanNodePb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachPlanNodePb*)[[[TeachPlanNodePb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachPlanNodePb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TeachPlanNodePb*)[[[TeachPlanNodePb builder] mergeFromCodedInputStream:input] build];
}
+ (TeachPlanNodePb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachPlanNodePb*)[[[TeachPlanNodePb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachPlanNodePbBuilder*) builder {
  return [[TeachPlanNodePbBuilder alloc] init];
}
+ (TeachPlanNodePbBuilder*) builderWithPrototype:(TeachPlanNodePb*) prototype {
  return [[TeachPlanNodePb builder] mergeFrom:prototype];
}
- (TeachPlanNodePbBuilder*) builder {
  return [TeachPlanNodePb builder];
}
- (TeachPlanNodePbBuilder*) toBuilder {
  return [TeachPlanNodePb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasClassIds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classIds", self.classIds];
  }
  if (self.hasNodeDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nodeDate", [NSNumber numberWithLongLong:self.nodeDate]];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  [self.teachPlanImgPbArray enumerateObjectsUsingBlock:^(TeachPlanImgPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"teachPlanImgPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTeachPlanVoice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teachPlanVoice", self.teachPlanVoice];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasClassIds) {
    [dictionary setObject: self.classIds forKey: @"classIds"];
  }
  if (self.hasNodeDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.nodeDate] forKey: @"nodeDate"];
  }
  if (self.hasText) {
    [dictionary setObject: self.text forKey: @"text"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  for (TeachPlanImgPb* element in self.teachPlanImgPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"teachPlanImgPb"];
  }
  if (self.hasTeachPlanVoice) {
    [dictionary setObject: self.teachPlanVoice forKey: @"teachPlanVoice"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TeachPlanNodePb class]]) {
    return NO;
  }
  TeachPlanNodePb *otherMessage = other;
  return
      self.hasClassIds == otherMessage.hasClassIds &&
      (!self.hasClassIds || [self.classIds isEqual:otherMessage.classIds]) &&
      self.hasNodeDate == otherMessage.hasNodeDate &&
      (!self.hasNodeDate || self.nodeDate == otherMessage.nodeDate) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      [self.teachPlanImgPbArray isEqualToArray:otherMessage.teachPlanImgPbArray] &&
      self.hasTeachPlanVoice == otherMessage.hasTeachPlanVoice &&
      (!self.hasTeachPlanVoice || [self.teachPlanVoice isEqual:otherMessage.teachPlanVoice]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasClassIds) {
    hashCode = hashCode * 31 + [self.classIds hash];
  }
  if (self.hasNodeDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.nodeDate] hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  [self.teachPlanImgPbArray enumerateObjectsUsingBlock:^(TeachPlanImgPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTeachPlanVoice) {
    hashCode = hashCode * 31 + [self.teachPlanVoice hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TeachPlanNodePbBuilder()
@property (strong) TeachPlanNodePb* resultTeachPlanNodePb;
@end

@implementation TeachPlanNodePbBuilder
@synthesize resultTeachPlanNodePb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTeachPlanNodePb = [[TeachPlanNodePb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTeachPlanNodePb;
}
- (TeachPlanNodePbBuilder*) clear {
  self.resultTeachPlanNodePb = [[TeachPlanNodePb alloc] init];
  return self;
}
- (TeachPlanNodePbBuilder*) clone {
  return [TeachPlanNodePb builderWithPrototype:resultTeachPlanNodePb];
}
- (TeachPlanNodePb*) defaultInstance {
  return [TeachPlanNodePb defaultInstance];
}
- (TeachPlanNodePb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TeachPlanNodePb*) buildPartial {
  TeachPlanNodePb* returnMe = resultTeachPlanNodePb;
  self.resultTeachPlanNodePb = nil;
  return returnMe;
}
- (TeachPlanNodePbBuilder*) mergeFrom:(TeachPlanNodePb*) other {
  if (other == [TeachPlanNodePb defaultInstance]) {
    return self;
  }
  if (other.hasClassIds) {
    [self setClassIds:other.classIds];
  }
  if (other.hasNodeDate) {
    [self setNodeDate:other.nodeDate];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.teachPlanImgPbArray.count > 0) {
    if (resultTeachPlanNodePb.teachPlanImgPbArray == nil) {
      resultTeachPlanNodePb.teachPlanImgPbArray = [[NSMutableArray alloc] initWithArray:other.teachPlanImgPbArray];
    } else {
      [resultTeachPlanNodePb.teachPlanImgPbArray addObjectsFromArray:other.teachPlanImgPbArray];
    }
  }
  if (other.hasTeachPlanVoice) {
    [self setTeachPlanVoice:other.teachPlanVoice];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TeachPlanNodePbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TeachPlanNodePbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setClassIds:[input readString]];
        break;
      }
      case 16: {
        [self setNodeDate:[input readInt64]];
        break;
      }
      case 26: {
        [self setText:[input readString]];
        break;
      }
      case 34: {
        [self setTitle:[input readString]];
        break;
      }
      case 42: {
        TeachPlanImgPbBuilder* subBuilder = [TeachPlanImgPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeachPlanImgPb:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setTeachPlanVoice:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasClassIds {
  return resultTeachPlanNodePb.hasClassIds;
}
- (NSString*) classIds {
  return resultTeachPlanNodePb.classIds;
}
- (TeachPlanNodePbBuilder*) setClassIds:(NSString*) value {
  resultTeachPlanNodePb.hasClassIds = YES;
  resultTeachPlanNodePb.classIds = value;
  return self;
}
- (TeachPlanNodePbBuilder*) clearClassIds {
  resultTeachPlanNodePb.hasClassIds = NO;
  resultTeachPlanNodePb.classIds = @"";
  return self;
}
- (BOOL) hasNodeDate {
  return resultTeachPlanNodePb.hasNodeDate;
}
- (SInt64) nodeDate {
  return resultTeachPlanNodePb.nodeDate;
}
- (TeachPlanNodePbBuilder*) setNodeDate:(SInt64) value {
  resultTeachPlanNodePb.hasNodeDate = YES;
  resultTeachPlanNodePb.nodeDate = value;
  return self;
}
- (TeachPlanNodePbBuilder*) clearNodeDate {
  resultTeachPlanNodePb.hasNodeDate = NO;
  resultTeachPlanNodePb.nodeDate = 0L;
  return self;
}
- (BOOL) hasText {
  return resultTeachPlanNodePb.hasText;
}
- (NSString*) text {
  return resultTeachPlanNodePb.text;
}
- (TeachPlanNodePbBuilder*) setText:(NSString*) value {
  resultTeachPlanNodePb.hasText = YES;
  resultTeachPlanNodePb.text = value;
  return self;
}
- (TeachPlanNodePbBuilder*) clearText {
  resultTeachPlanNodePb.hasText = NO;
  resultTeachPlanNodePb.text = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultTeachPlanNodePb.hasTitle;
}
- (NSString*) title {
  return resultTeachPlanNodePb.title;
}
- (TeachPlanNodePbBuilder*) setTitle:(NSString*) value {
  resultTeachPlanNodePb.hasTitle = YES;
  resultTeachPlanNodePb.title = value;
  return self;
}
- (TeachPlanNodePbBuilder*) clearTitle {
  resultTeachPlanNodePb.hasTitle = NO;
  resultTeachPlanNodePb.title = @"";
  return self;
}
- (NSMutableArray *)teachPlanImgPb {
  return resultTeachPlanNodePb.teachPlanImgPbArray;
}
- (TeachPlanImgPb*)teachPlanImgPbAtIndex:(NSUInteger)index {
  return [resultTeachPlanNodePb teachPlanImgPbAtIndex:index];
}
- (TeachPlanNodePbBuilder *)addTeachPlanImgPb:(TeachPlanImgPb*)value {
  if (resultTeachPlanNodePb.teachPlanImgPbArray == nil) {
    resultTeachPlanNodePb.teachPlanImgPbArray = [[NSMutableArray alloc]init];
  }
  [resultTeachPlanNodePb.teachPlanImgPbArray addObject:value];
  return self;
}
- (TeachPlanNodePbBuilder *)setTeachPlanImgPbArray:(NSArray *)array {
  resultTeachPlanNodePb.teachPlanImgPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TeachPlanNodePbBuilder *)clearTeachPlanImgPb {
  resultTeachPlanNodePb.teachPlanImgPbArray = nil;
  return self;
}
- (BOOL) hasTeachPlanVoice {
  return resultTeachPlanNodePb.hasTeachPlanVoice;
}
- (NSData*) teachPlanVoice {
  return resultTeachPlanNodePb.teachPlanVoice;
}
- (TeachPlanNodePbBuilder*) setTeachPlanVoice:(NSData*) value {
  resultTeachPlanNodePb.hasTeachPlanVoice = YES;
  resultTeachPlanNodePb.teachPlanVoice = value;
  return self;
}
- (TeachPlanNodePbBuilder*) clearTeachPlanVoice {
  resultTeachPlanNodePb.hasTeachPlanVoice = NO;
  resultTeachPlanNodePb.teachPlanVoice = [NSData data];
  return self;
}
@end

@interface TeachPlanImgPb ()
@property (strong) NSData* imgByte;
@end

@implementation TeachPlanImgPb

- (BOOL) hasImgByte {
  return !!hasImgByte_;
}
- (void) setHasImgByte:(BOOL) _value_ {
  hasImgByte_ = !!_value_;
}
@synthesize imgByte;
- (instancetype) init {
  if ((self = [super init])) {
    self.imgByte = [NSData data];
  }
  return self;
}
static TeachPlanImgPb* defaultTeachPlanImgPbInstance = nil;
+ (void) initialize {
  if (self == [TeachPlanImgPb class]) {
    defaultTeachPlanImgPbInstance = [[TeachPlanImgPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTeachPlanImgPbInstance;
}
- (instancetype) defaultInstance {
  return defaultTeachPlanImgPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasImgByte) {
    [output writeData:1 value:self.imgByte];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasImgByte) {
    size_ += computeDataSize(1, self.imgByte);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TeachPlanImgPb*) parseFromData:(NSData*) data {
  return (TeachPlanImgPb*)[[[TeachPlanImgPb builder] mergeFromData:data] build];
}
+ (TeachPlanImgPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachPlanImgPb*)[[[TeachPlanImgPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TeachPlanImgPb*) parseFromInputStream:(NSInputStream*) input {
  return (TeachPlanImgPb*)[[[TeachPlanImgPb builder] mergeFromInputStream:input] build];
}
+ (TeachPlanImgPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachPlanImgPb*)[[[TeachPlanImgPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachPlanImgPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TeachPlanImgPb*)[[[TeachPlanImgPb builder] mergeFromCodedInputStream:input] build];
}
+ (TeachPlanImgPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachPlanImgPb*)[[[TeachPlanImgPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachPlanImgPbBuilder*) builder {
  return [[TeachPlanImgPbBuilder alloc] init];
}
+ (TeachPlanImgPbBuilder*) builderWithPrototype:(TeachPlanImgPb*) prototype {
  return [[TeachPlanImgPb builder] mergeFrom:prototype];
}
- (TeachPlanImgPbBuilder*) builder {
  return [TeachPlanImgPb builder];
}
- (TeachPlanImgPbBuilder*) toBuilder {
  return [TeachPlanImgPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasImgByte) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgByte", self.imgByte];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasImgByte) {
    [dictionary setObject: self.imgByte forKey: @"imgByte"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TeachPlanImgPb class]]) {
    return NO;
  }
  TeachPlanImgPb *otherMessage = other;
  return
      self.hasImgByte == otherMessage.hasImgByte &&
      (!self.hasImgByte || [self.imgByte isEqual:otherMessage.imgByte]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasImgByte) {
    hashCode = hashCode * 31 + [self.imgByte hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TeachPlanImgPbBuilder()
@property (strong) TeachPlanImgPb* resultTeachPlanImgPb;
@end

@implementation TeachPlanImgPbBuilder
@synthesize resultTeachPlanImgPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTeachPlanImgPb = [[TeachPlanImgPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTeachPlanImgPb;
}
- (TeachPlanImgPbBuilder*) clear {
  self.resultTeachPlanImgPb = [[TeachPlanImgPb alloc] init];
  return self;
}
- (TeachPlanImgPbBuilder*) clone {
  return [TeachPlanImgPb builderWithPrototype:resultTeachPlanImgPb];
}
- (TeachPlanImgPb*) defaultInstance {
  return [TeachPlanImgPb defaultInstance];
}
- (TeachPlanImgPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TeachPlanImgPb*) buildPartial {
  TeachPlanImgPb* returnMe = resultTeachPlanImgPb;
  self.resultTeachPlanImgPb = nil;
  return returnMe;
}
- (TeachPlanImgPbBuilder*) mergeFrom:(TeachPlanImgPb*) other {
  if (other == [TeachPlanImgPb defaultInstance]) {
    return self;
  }
  if (other.hasImgByte) {
    [self setImgByte:other.imgByte];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TeachPlanImgPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TeachPlanImgPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setImgByte:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasImgByte {
  return resultTeachPlanImgPb.hasImgByte;
}
- (NSData*) imgByte {
  return resultTeachPlanImgPb.imgByte;
}
- (TeachPlanImgPbBuilder*) setImgByte:(NSData*) value {
  resultTeachPlanImgPb.hasImgByte = YES;
  resultTeachPlanImgPb.imgByte = value;
  return self;
}
- (TeachPlanImgPbBuilder*) clearImgByte {
  resultTeachPlanImgPb.hasImgByte = NO;
  resultTeachPlanImgPb.imgByte = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
