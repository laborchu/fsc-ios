// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscChatGroup.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscChatGroupRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscChatGroupRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FscSessionRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface GRecorderListPb ()
@property (strong) NSMutableArray * recorderPbArray;
@end

@implementation GRecorderListPb

@synthesize recorderPbArray;
@dynamic recorderPb;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static GRecorderListPb* defaultGRecorderListPbInstance = nil;
+ (void) initialize {
  if (self == [GRecorderListPb class]) {
    defaultGRecorderListPbInstance = [[GRecorderListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGRecorderListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultGRecorderListPbInstance;
}
- (NSArray *)recorderPb {
  return recorderPbArray;
}
- (GRecorderPb*)recorderPbAtIndex:(NSUInteger)index {
  return [recorderPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.recorderPbArray enumerateObjectsUsingBlock:^(GRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.recorderPbArray enumerateObjectsUsingBlock:^(GRecorderPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GRecorderListPb*) parseFromData:(NSData*) data {
  return (GRecorderListPb*)[[[GRecorderListPb builder] mergeFromData:data] build];
}
+ (GRecorderListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GRecorderListPb*)[[[GRecorderListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GRecorderListPb*) parseFromInputStream:(NSInputStream*) input {
  return (GRecorderListPb*)[[[GRecorderListPb builder] mergeFromInputStream:input] build];
}
+ (GRecorderListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GRecorderListPb*)[[[GRecorderListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GRecorderListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GRecorderListPb*)[[[GRecorderListPb builder] mergeFromCodedInputStream:input] build];
}
+ (GRecorderListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GRecorderListPb*)[[[GRecorderListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GRecorderListPbBuilder*) builder {
  return [[GRecorderListPbBuilder alloc] init];
}
+ (GRecorderListPbBuilder*) builderWithPrototype:(GRecorderListPb*) prototype {
  return [[GRecorderListPb builder] mergeFrom:prototype];
}
- (GRecorderListPbBuilder*) builder {
  return [GRecorderListPb builder];
}
- (GRecorderListPbBuilder*) toBuilder {
  return [GRecorderListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.recorderPbArray enumerateObjectsUsingBlock:^(GRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"recorderPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (GRecorderPb* element in self.recorderPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"recorderPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GRecorderListPb class]]) {
    return NO;
  }
  GRecorderListPb *otherMessage = other;
  return
      [self.recorderPbArray isEqualToArray:otherMessage.recorderPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.recorderPbArray enumerateObjectsUsingBlock:^(GRecorderPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GRecorderListPbBuilder()
@property (strong) GRecorderListPb* resultGrecorderListPb;
@end

@implementation GRecorderListPbBuilder
@synthesize resultGrecorderListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGrecorderListPb = [[GRecorderListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGrecorderListPb;
}
- (GRecorderListPbBuilder*) clear {
  self.resultGrecorderListPb = [[GRecorderListPb alloc] init];
  return self;
}
- (GRecorderListPbBuilder*) clone {
  return [GRecorderListPb builderWithPrototype:resultGrecorderListPb];
}
- (GRecorderListPb*) defaultInstance {
  return [GRecorderListPb defaultInstance];
}
- (GRecorderListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GRecorderListPb*) buildPartial {
  GRecorderListPb* returnMe = resultGrecorderListPb;
  self.resultGrecorderListPb = nil;
  return returnMe;
}
- (GRecorderListPbBuilder*) mergeFrom:(GRecorderListPb*) other {
  if (other == [GRecorderListPb defaultInstance]) {
    return self;
  }
  if (other.recorderPbArray.count > 0) {
    if (resultGrecorderListPb.recorderPbArray == nil) {
      resultGrecorderListPb.recorderPbArray = [[NSMutableArray alloc] initWithArray:other.recorderPbArray];
    } else {
      [resultGrecorderListPb.recorderPbArray addObjectsFromArray:other.recorderPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GRecorderListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GRecorderListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        GRecorderPbBuilder* subBuilder = [GRecorderPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecorderPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)recorderPb {
  return resultGrecorderListPb.recorderPbArray;
}
- (GRecorderPb*)recorderPbAtIndex:(NSUInteger)index {
  return [resultGrecorderListPb recorderPbAtIndex:index];
}
- (GRecorderListPbBuilder *)addRecorderPb:(GRecorderPb*)value {
  if (resultGrecorderListPb.recorderPbArray == nil) {
    resultGrecorderListPb.recorderPbArray = [[NSMutableArray alloc]init];
  }
  [resultGrecorderListPb.recorderPbArray addObject:value];
  return self;
}
- (GRecorderListPbBuilder *)setRecorderPbArray:(NSArray *)array {
  resultGrecorderListPb.recorderPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (GRecorderListPbBuilder *)clearRecorderPb {
  resultGrecorderListPb.recorderPbArray = nil;
  return self;
}
@end

@interface GSessionPb ()
@property SInt64 id;
@property (strong) NSString* uuid;
@property (strong) NSString* name;
@property SInt32 nameStatus;
@property SInt64 leaderId;
@property (strong) NSString* portrait;
@property SInt64 createdDate;
@property SInt64 timestamp;
@property (strong) NSMutableArray * userArray;
@property (strong) FscSessionPb* fscSession;
@property (strong) NSData* file;
@end

@implementation GSessionPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasNameStatus {
  return !!hasNameStatus_;
}
- (void) setHasNameStatus:(BOOL) _value_ {
  hasNameStatus_ = !!_value_;
}
@synthesize nameStatus;
- (BOOL) hasLeaderId {
  return !!hasLeaderId_;
}
- (void) setHasLeaderId:(BOOL) _value_ {
  hasLeaderId_ = !!_value_;
}
@synthesize leaderId;
- (BOOL) hasPortrait {
  return !!hasPortrait_;
}
- (void) setHasPortrait:(BOOL) _value_ {
  hasPortrait_ = !!_value_;
}
@synthesize portrait;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
@synthesize userArray;
@dynamic user;
- (BOOL) hasFscSession {
  return !!hasFscSession_;
}
- (void) setHasFscSession:(BOOL) _value_ {
  hasFscSession_ = !!_value_;
}
@synthesize fscSession;
- (BOOL) hasFile {
  return !!hasFile_;
}
- (void) setHasFile:(BOOL) _value_ {
  hasFile_ = !!_value_;
}
@synthesize file;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.uuid = @"";
    self.name = @"";
    self.nameStatus = 0;
    self.leaderId = 0L;
    self.portrait = @"";
    self.createdDate = 0L;
    self.timestamp = 0L;
    self.fscSession = [FscSessionPb defaultInstance];
    self.file = [NSData data];
  }
  return self;
}
static GSessionPb* defaultGSessionPbInstance = nil;
+ (void) initialize {
  if (self == [GSessionPb class]) {
    defaultGSessionPbInstance = [[GSessionPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGSessionPbInstance;
}
- (instancetype) defaultInstance {
  return defaultGSessionPbInstance;
}
- (NSArray *)user {
  return userArray;
}
- (GUserPb*)userAtIndex:(NSUInteger)index {
  return [userArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasUuid) {
    [output writeString:2 value:self.uuid];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasNameStatus) {
    [output writeInt32:4 value:self.nameStatus];
  }
  if (self.hasLeaderId) {
    [output writeInt64:5 value:self.leaderId];
  }
  if (self.hasPortrait) {
    [output writeString:6 value:self.portrait];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:7 value:self.createdDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:8 value:self.timestamp];
  }
  [self.userArray enumerateObjectsUsingBlock:^(GUserPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  if (self.hasFscSession) {
    [output writeMessage:10 value:self.fscSession];
  }
  if (self.hasFile) {
    [output writeData:11 value:self.file];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(2, self.uuid);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasNameStatus) {
    size_ += computeInt32Size(4, self.nameStatus);
  }
  if (self.hasLeaderId) {
    size_ += computeInt64Size(5, self.leaderId);
  }
  if (self.hasPortrait) {
    size_ += computeStringSize(6, self.portrait);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(7, self.createdDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(8, self.timestamp);
  }
  [self.userArray enumerateObjectsUsingBlock:^(GUserPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  if (self.hasFscSession) {
    size_ += computeMessageSize(10, self.fscSession);
  }
  if (self.hasFile) {
    size_ += computeDataSize(11, self.file);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GSessionPb*) parseFromData:(NSData*) data {
  return (GSessionPb*)[[[GSessionPb builder] mergeFromData:data] build];
}
+ (GSessionPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GSessionPb*)[[[GSessionPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GSessionPb*) parseFromInputStream:(NSInputStream*) input {
  return (GSessionPb*)[[[GSessionPb builder] mergeFromInputStream:input] build];
}
+ (GSessionPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GSessionPb*)[[[GSessionPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GSessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GSessionPb*)[[[GSessionPb builder] mergeFromCodedInputStream:input] build];
}
+ (GSessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GSessionPb*)[[[GSessionPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GSessionPbBuilder*) builder {
  return [[GSessionPbBuilder alloc] init];
}
+ (GSessionPbBuilder*) builderWithPrototype:(GSessionPb*) prototype {
  return [[GSessionPb builder] mergeFrom:prototype];
}
- (GSessionPbBuilder*) builder {
  return [GSessionPb builder];
}
- (GSessionPbBuilder*) toBuilder {
  return [GSessionPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasNameStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nameStatus", [NSNumber numberWithInteger:self.nameStatus]];
  }
  if (self.hasLeaderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaderId", [NSNumber numberWithLongLong:self.leaderId]];
  }
  if (self.hasPortrait) {
    [output appendFormat:@"%@%@: %@\n", indent, @"portrait", self.portrait];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.userArray enumerateObjectsUsingBlock:^(GUserPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasFscSession) {
    [output appendFormat:@"%@%@ {\n", indent, @"fscSession"];
    [self.fscSession writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"file", self.file];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasNameStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nameStatus] forKey: @"nameStatus"];
  }
  if (self.hasLeaderId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.leaderId] forKey: @"leaderId"];
  }
  if (self.hasPortrait) {
    [dictionary setObject: self.portrait forKey: @"portrait"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  for (GUserPb* element in self.userArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"user"];
  }
  if (self.hasFscSession) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fscSession storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fscSession"];
  }
  if (self.hasFile) {
    [dictionary setObject: self.file forKey: @"file"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GSessionPb class]]) {
    return NO;
  }
  GSessionPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasNameStatus == otherMessage.hasNameStatus &&
      (!self.hasNameStatus || self.nameStatus == otherMessage.nameStatus) &&
      self.hasLeaderId == otherMessage.hasLeaderId &&
      (!self.hasLeaderId || self.leaderId == otherMessage.leaderId) &&
      self.hasPortrait == otherMessage.hasPortrait &&
      (!self.hasPortrait || [self.portrait isEqual:otherMessage.portrait]) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      [self.userArray isEqualToArray:otherMessage.userArray] &&
      self.hasFscSession == otherMessage.hasFscSession &&
      (!self.hasFscSession || [self.fscSession isEqual:otherMessage.fscSession]) &&
      self.hasFile == otherMessage.hasFile &&
      (!self.hasFile || [self.file isEqual:otherMessage.file]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasNameStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nameStatus] hash];
  }
  if (self.hasLeaderId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.leaderId] hash];
  }
  if (self.hasPortrait) {
    hashCode = hashCode * 31 + [self.portrait hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  [self.userArray enumerateObjectsUsingBlock:^(GUserPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasFscSession) {
    hashCode = hashCode * 31 + [self.fscSession hash];
  }
  if (self.hasFile) {
    hashCode = hashCode * 31 + [self.file hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GSessionPbBuilder()
@property (strong) GSessionPb* resultGsessionPb;
@end

@implementation GSessionPbBuilder
@synthesize resultGsessionPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGsessionPb = [[GSessionPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGsessionPb;
}
- (GSessionPbBuilder*) clear {
  self.resultGsessionPb = [[GSessionPb alloc] init];
  return self;
}
- (GSessionPbBuilder*) clone {
  return [GSessionPb builderWithPrototype:resultGsessionPb];
}
- (GSessionPb*) defaultInstance {
  return [GSessionPb defaultInstance];
}
- (GSessionPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GSessionPb*) buildPartial {
  GSessionPb* returnMe = resultGsessionPb;
  self.resultGsessionPb = nil;
  return returnMe;
}
- (GSessionPbBuilder*) mergeFrom:(GSessionPb*) other {
  if (other == [GSessionPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasNameStatus) {
    [self setNameStatus:other.nameStatus];
  }
  if (other.hasLeaderId) {
    [self setLeaderId:other.leaderId];
  }
  if (other.hasPortrait) {
    [self setPortrait:other.portrait];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.userArray.count > 0) {
    if (resultGsessionPb.userArray == nil) {
      resultGsessionPb.userArray = [[NSMutableArray alloc] initWithArray:other.userArray];
    } else {
      [resultGsessionPb.userArray addObjectsFromArray:other.userArray];
    }
  }
  if (other.hasFscSession) {
    [self mergeFscSession:other.fscSession];
  }
  if (other.hasFile) {
    [self setFile:other.file];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GSessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GSessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setUuid:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setNameStatus:[input readInt32]];
        break;
      }
      case 40: {
        [self setLeaderId:[input readInt64]];
        break;
      }
      case 50: {
        [self setPortrait:[input readString]];
        break;
      }
      case 56: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 64: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 74: {
        GUserPbBuilder* subBuilder = [GUserPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUser:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        FscSessionPbBuilder* subBuilder = [FscSessionPb builder];
        if (self.hasFscSession) {
          [subBuilder mergeFrom:self.fscSession];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFscSession:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setFile:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultGsessionPb.hasId;
}
- (SInt64) id {
  return resultGsessionPb.id;
}
- (GSessionPbBuilder*) setId:(SInt64) value {
  resultGsessionPb.hasId = YES;
  resultGsessionPb.id = value;
  return self;
}
- (GSessionPbBuilder*) clearId {
  resultGsessionPb.hasId = NO;
  resultGsessionPb.id = 0L;
  return self;
}
- (BOOL) hasUuid {
  return resultGsessionPb.hasUuid;
}
- (NSString*) uuid {
  return resultGsessionPb.uuid;
}
- (GSessionPbBuilder*) setUuid:(NSString*) value {
  resultGsessionPb.hasUuid = YES;
  resultGsessionPb.uuid = value;
  return self;
}
- (GSessionPbBuilder*) clearUuid {
  resultGsessionPb.hasUuid = NO;
  resultGsessionPb.uuid = @"";
  return self;
}
- (BOOL) hasName {
  return resultGsessionPb.hasName;
}
- (NSString*) name {
  return resultGsessionPb.name;
}
- (GSessionPbBuilder*) setName:(NSString*) value {
  resultGsessionPb.hasName = YES;
  resultGsessionPb.name = value;
  return self;
}
- (GSessionPbBuilder*) clearName {
  resultGsessionPb.hasName = NO;
  resultGsessionPb.name = @"";
  return self;
}
- (BOOL) hasNameStatus {
  return resultGsessionPb.hasNameStatus;
}
- (SInt32) nameStatus {
  return resultGsessionPb.nameStatus;
}
- (GSessionPbBuilder*) setNameStatus:(SInt32) value {
  resultGsessionPb.hasNameStatus = YES;
  resultGsessionPb.nameStatus = value;
  return self;
}
- (GSessionPbBuilder*) clearNameStatus {
  resultGsessionPb.hasNameStatus = NO;
  resultGsessionPb.nameStatus = 0;
  return self;
}
- (BOOL) hasLeaderId {
  return resultGsessionPb.hasLeaderId;
}
- (SInt64) leaderId {
  return resultGsessionPb.leaderId;
}
- (GSessionPbBuilder*) setLeaderId:(SInt64) value {
  resultGsessionPb.hasLeaderId = YES;
  resultGsessionPb.leaderId = value;
  return self;
}
- (GSessionPbBuilder*) clearLeaderId {
  resultGsessionPb.hasLeaderId = NO;
  resultGsessionPb.leaderId = 0L;
  return self;
}
- (BOOL) hasPortrait {
  return resultGsessionPb.hasPortrait;
}
- (NSString*) portrait {
  return resultGsessionPb.portrait;
}
- (GSessionPbBuilder*) setPortrait:(NSString*) value {
  resultGsessionPb.hasPortrait = YES;
  resultGsessionPb.portrait = value;
  return self;
}
- (GSessionPbBuilder*) clearPortrait {
  resultGsessionPb.hasPortrait = NO;
  resultGsessionPb.portrait = @"";
  return self;
}
- (BOOL) hasCreatedDate {
  return resultGsessionPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultGsessionPb.createdDate;
}
- (GSessionPbBuilder*) setCreatedDate:(SInt64) value {
  resultGsessionPb.hasCreatedDate = YES;
  resultGsessionPb.createdDate = value;
  return self;
}
- (GSessionPbBuilder*) clearCreatedDate {
  resultGsessionPb.hasCreatedDate = NO;
  resultGsessionPb.createdDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultGsessionPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultGsessionPb.timestamp;
}
- (GSessionPbBuilder*) setTimestamp:(SInt64) value {
  resultGsessionPb.hasTimestamp = YES;
  resultGsessionPb.timestamp = value;
  return self;
}
- (GSessionPbBuilder*) clearTimestamp {
  resultGsessionPb.hasTimestamp = NO;
  resultGsessionPb.timestamp = 0L;
  return self;
}
- (NSMutableArray *)user {
  return resultGsessionPb.userArray;
}
- (GUserPb*)userAtIndex:(NSUInteger)index {
  return [resultGsessionPb userAtIndex:index];
}
- (GSessionPbBuilder *)addUser:(GUserPb*)value {
  if (resultGsessionPb.userArray == nil) {
    resultGsessionPb.userArray = [[NSMutableArray alloc]init];
  }
  [resultGsessionPb.userArray addObject:value];
  return self;
}
- (GSessionPbBuilder *)setUserArray:(NSArray *)array {
  resultGsessionPb.userArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (GSessionPbBuilder *)clearUser {
  resultGsessionPb.userArray = nil;
  return self;
}
- (BOOL) hasFscSession {
  return resultGsessionPb.hasFscSession;
}
- (FscSessionPb*) fscSession {
  return resultGsessionPb.fscSession;
}
- (GSessionPbBuilder*) setFscSession:(FscSessionPb*) value {
  resultGsessionPb.hasFscSession = YES;
  resultGsessionPb.fscSession = value;
  return self;
}
- (GSessionPbBuilder*) setFscSessionBuilder:(FscSessionPbBuilder*) builderForValue {
  return [self setFscSession:[builderForValue build]];
}
- (GSessionPbBuilder*) mergeFscSession:(FscSessionPb*) value {
  if (resultGsessionPb.hasFscSession &&
      resultGsessionPb.fscSession != [FscSessionPb defaultInstance]) {
    resultGsessionPb.fscSession =
      [[[FscSessionPb builderWithPrototype:resultGsessionPb.fscSession] mergeFrom:value] buildPartial];
  } else {
    resultGsessionPb.fscSession = value;
  }
  resultGsessionPb.hasFscSession = YES;
  return self;
}
- (GSessionPbBuilder*) clearFscSession {
  resultGsessionPb.hasFscSession = NO;
  resultGsessionPb.fscSession = [FscSessionPb defaultInstance];
  return self;
}
- (BOOL) hasFile {
  return resultGsessionPb.hasFile;
}
- (NSData*) file {
  return resultGsessionPb.file;
}
- (GSessionPbBuilder*) setFile:(NSData*) value {
  resultGsessionPb.hasFile = YES;
  resultGsessionPb.file = value;
  return self;
}
- (GSessionPbBuilder*) clearFile {
  resultGsessionPb.hasFile = NO;
  resultGsessionPb.file = [NSData data];
  return self;
}
@end

@interface GUserPb ()
@property SInt64 sessionId;
@property SInt64 userId;
@property SInt64 inviterId;
@property SInt32 status;
@property SInt64 createdDate;
@property SInt64 modifiedDate;
@property SInt64 timestamp;
@end

@implementation GUserPb

- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasInviterId {
  return !!hasInviterId_;
}
- (void) setHasInviterId:(BOOL) _value_ {
  hasInviterId_ = !!_value_;
}
@synthesize inviterId;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionId = 0L;
    self.userId = 0L;
    self.inviterId = 0L;
    self.status = 0;
    self.createdDate = 0L;
    self.modifiedDate = 0L;
    self.timestamp = 0L;
  }
  return self;
}
static GUserPb* defaultGUserPbInstance = nil;
+ (void) initialize {
  if (self == [GUserPb class]) {
    defaultGUserPbInstance = [[GUserPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGUserPbInstance;
}
- (instancetype) defaultInstance {
  return defaultGUserPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionId) {
    [output writeInt64:1 value:self.sessionId];
  }
  if (self.hasUserId) {
    [output writeInt64:2 value:self.userId];
  }
  if (self.hasInviterId) {
    [output writeInt64:3 value:self.inviterId];
  }
  if (self.hasStatus) {
    [output writeInt32:4 value:self.status];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:5 value:self.createdDate];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:6 value:self.modifiedDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:7 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionId) {
    size_ += computeInt64Size(1, self.sessionId);
  }
  if (self.hasUserId) {
    size_ += computeInt64Size(2, self.userId);
  }
  if (self.hasInviterId) {
    size_ += computeInt64Size(3, self.inviterId);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(4, self.status);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(5, self.createdDate);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(6, self.modifiedDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(7, self.timestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GUserPb*) parseFromData:(NSData*) data {
  return (GUserPb*)[[[GUserPb builder] mergeFromData:data] build];
}
+ (GUserPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GUserPb*)[[[GUserPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GUserPb*) parseFromInputStream:(NSInputStream*) input {
  return (GUserPb*)[[[GUserPb builder] mergeFromInputStream:input] build];
}
+ (GUserPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GUserPb*)[[[GUserPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GUserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GUserPb*)[[[GUserPb builder] mergeFromCodedInputStream:input] build];
}
+ (GUserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GUserPb*)[[[GUserPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GUserPbBuilder*) builder {
  return [[GUserPbBuilder alloc] init];
}
+ (GUserPbBuilder*) builderWithPrototype:(GUserPb*) prototype {
  return [[GUserPb builder] mergeFrom:prototype];
}
- (GUserPbBuilder*) builder {
  return [GUserPb builder];
}
- (GUserPbBuilder*) toBuilder {
  return [GUserPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasInviterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inviterId", [NSNumber numberWithLongLong:self.inviterId]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasInviterId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.inviterId] forKey: @"inviterId"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GUserPb class]]) {
    return NO;
  }
  GUserPb *otherMessage = other;
  return
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasInviterId == otherMessage.hasInviterId &&
      (!self.hasInviterId || self.inviterId == otherMessage.inviterId) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasInviterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.inviterId] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GUserPbBuilder()
@property (strong) GUserPb* resultGuserPb;
@end

@implementation GUserPbBuilder
@synthesize resultGuserPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGuserPb = [[GUserPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGuserPb;
}
- (GUserPbBuilder*) clear {
  self.resultGuserPb = [[GUserPb alloc] init];
  return self;
}
- (GUserPbBuilder*) clone {
  return [GUserPb builderWithPrototype:resultGuserPb];
}
- (GUserPb*) defaultInstance {
  return [GUserPb defaultInstance];
}
- (GUserPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GUserPb*) buildPartial {
  GUserPb* returnMe = resultGuserPb;
  self.resultGuserPb = nil;
  return returnMe;
}
- (GUserPbBuilder*) mergeFrom:(GUserPb*) other {
  if (other == [GUserPb defaultInstance]) {
    return self;
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasInviterId) {
    [self setInviterId:other.inviterId];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GUserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GUserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 16: {
        [self setUserId:[input readInt64]];
        break;
      }
      case 24: {
        [self setInviterId:[input readInt64]];
        break;
      }
      case 32: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 40: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 48: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 56: {
        [self setTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionId {
  return resultGuserPb.hasSessionId;
}
- (SInt64) sessionId {
  return resultGuserPb.sessionId;
}
- (GUserPbBuilder*) setSessionId:(SInt64) value {
  resultGuserPb.hasSessionId = YES;
  resultGuserPb.sessionId = value;
  return self;
}
- (GUserPbBuilder*) clearSessionId {
  resultGuserPb.hasSessionId = NO;
  resultGuserPb.sessionId = 0L;
  return self;
}
- (BOOL) hasUserId {
  return resultGuserPb.hasUserId;
}
- (SInt64) userId {
  return resultGuserPb.userId;
}
- (GUserPbBuilder*) setUserId:(SInt64) value {
  resultGuserPb.hasUserId = YES;
  resultGuserPb.userId = value;
  return self;
}
- (GUserPbBuilder*) clearUserId {
  resultGuserPb.hasUserId = NO;
  resultGuserPb.userId = 0L;
  return self;
}
- (BOOL) hasInviterId {
  return resultGuserPb.hasInviterId;
}
- (SInt64) inviterId {
  return resultGuserPb.inviterId;
}
- (GUserPbBuilder*) setInviterId:(SInt64) value {
  resultGuserPb.hasInviterId = YES;
  resultGuserPb.inviterId = value;
  return self;
}
- (GUserPbBuilder*) clearInviterId {
  resultGuserPb.hasInviterId = NO;
  resultGuserPb.inviterId = 0L;
  return self;
}
- (BOOL) hasStatus {
  return resultGuserPb.hasStatus;
}
- (SInt32) status {
  return resultGuserPb.status;
}
- (GUserPbBuilder*) setStatus:(SInt32) value {
  resultGuserPb.hasStatus = YES;
  resultGuserPb.status = value;
  return self;
}
- (GUserPbBuilder*) clearStatus {
  resultGuserPb.hasStatus = NO;
  resultGuserPb.status = 0;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultGuserPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultGuserPb.createdDate;
}
- (GUserPbBuilder*) setCreatedDate:(SInt64) value {
  resultGuserPb.hasCreatedDate = YES;
  resultGuserPb.createdDate = value;
  return self;
}
- (GUserPbBuilder*) clearCreatedDate {
  resultGuserPb.hasCreatedDate = NO;
  resultGuserPb.createdDate = 0L;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultGuserPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultGuserPb.modifiedDate;
}
- (GUserPbBuilder*) setModifiedDate:(SInt64) value {
  resultGuserPb.hasModifiedDate = YES;
  resultGuserPb.modifiedDate = value;
  return self;
}
- (GUserPbBuilder*) clearModifiedDate {
  resultGuserPb.hasModifiedDate = NO;
  resultGuserPb.modifiedDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultGuserPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultGuserPb.timestamp;
}
- (GUserPbBuilder*) setTimestamp:(SInt64) value {
  resultGuserPb.hasTimestamp = YES;
  resultGuserPb.timestamp = value;
  return self;
}
- (GUserPbBuilder*) clearTimestamp {
  resultGuserPb.hasTimestamp = NO;
  resultGuserPb.timestamp = 0L;
  return self;
}
@end

@interface GRecorderPb ()
@property SInt64 id;
@property SInt64 sessionId;
@property SInt32 type;
@property (strong) NSString* message;
@property SInt32 voiceLength;
@property SInt64 createdBy;
@property SInt64 createdDate;
@property SInt64 timestamp;
@property (strong) NSData* file;
@property (strong) NSString* uuid;
@end

@implementation GRecorderPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (BOOL) hasVoiceLength {
  return !!hasVoiceLength_;
}
- (void) setHasVoiceLength:(BOOL) _value_ {
  hasVoiceLength_ = !!_value_;
}
@synthesize voiceLength;
- (BOOL) hasCreatedBy {
  return !!hasCreatedBy_;
}
- (void) setHasCreatedBy:(BOOL) _value_ {
  hasCreatedBy_ = !!_value_;
}
@synthesize createdBy;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasFile {
  return !!hasFile_;
}
- (void) setHasFile:(BOOL) _value_ {
  hasFile_ = !!_value_;
}
@synthesize file;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.sessionId = 0L;
    self.type = 0;
    self.message = @"";
    self.voiceLength = 0;
    self.createdBy = 0L;
    self.createdDate = 0L;
    self.timestamp = 0L;
    self.file = [NSData data];
    self.uuid = @"";
  }
  return self;
}
static GRecorderPb* defaultGRecorderPbInstance = nil;
+ (void) initialize {
  if (self == [GRecorderPb class]) {
    defaultGRecorderPbInstance = [[GRecorderPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGRecorderPbInstance;
}
- (instancetype) defaultInstance {
  return defaultGRecorderPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasSessionId) {
    [output writeInt64:2 value:self.sessionId];
  }
  if (self.hasType) {
    [output writeInt32:3 value:self.type];
  }
  if (self.hasMessage) {
    [output writeString:4 value:self.message];
  }
  if (self.hasVoiceLength) {
    [output writeInt32:5 value:self.voiceLength];
  }
  if (self.hasCreatedBy) {
    [output writeInt64:6 value:self.createdBy];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:7 value:self.createdDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:8 value:self.timestamp];
  }
  if (self.hasFile) {
    [output writeData:9 value:self.file];
  }
  if (self.hasUuid) {
    [output writeString:10 value:self.uuid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasSessionId) {
    size_ += computeInt64Size(2, self.sessionId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(3, self.type);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(4, self.message);
  }
  if (self.hasVoiceLength) {
    size_ += computeInt32Size(5, self.voiceLength);
  }
  if (self.hasCreatedBy) {
    size_ += computeInt64Size(6, self.createdBy);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(7, self.createdDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(8, self.timestamp);
  }
  if (self.hasFile) {
    size_ += computeDataSize(9, self.file);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(10, self.uuid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GRecorderPb*) parseFromData:(NSData*) data {
  return (GRecorderPb*)[[[GRecorderPb builder] mergeFromData:data] build];
}
+ (GRecorderPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GRecorderPb*)[[[GRecorderPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GRecorderPb*) parseFromInputStream:(NSInputStream*) input {
  return (GRecorderPb*)[[[GRecorderPb builder] mergeFromInputStream:input] build];
}
+ (GRecorderPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GRecorderPb*)[[[GRecorderPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GRecorderPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GRecorderPb*)[[[GRecorderPb builder] mergeFromCodedInputStream:input] build];
}
+ (GRecorderPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GRecorderPb*)[[[GRecorderPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GRecorderPbBuilder*) builder {
  return [[GRecorderPbBuilder alloc] init];
}
+ (GRecorderPbBuilder*) builderWithPrototype:(GRecorderPb*) prototype {
  return [[GRecorderPb builder] mergeFrom:prototype];
}
- (GRecorderPbBuilder*) builder {
  return [GRecorderPb builder];
}
- (GRecorderPbBuilder*) toBuilder {
  return [GRecorderPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasVoiceLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voiceLength", [NSNumber numberWithInteger:self.voiceLength]];
  }
  if (self.hasCreatedBy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdBy", [NSNumber numberWithLongLong:self.createdBy]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"file", self.file];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasVoiceLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.voiceLength] forKey: @"voiceLength"];
  }
  if (self.hasCreatedBy) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdBy] forKey: @"createdBy"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasFile) {
    [dictionary setObject: self.file forKey: @"file"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GRecorderPb class]]) {
    return NO;
  }
  GRecorderPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasVoiceLength == otherMessage.hasVoiceLength &&
      (!self.hasVoiceLength || self.voiceLength == otherMessage.voiceLength) &&
      self.hasCreatedBy == otherMessage.hasCreatedBy &&
      (!self.hasCreatedBy || self.createdBy == otherMessage.createdBy) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasFile == otherMessage.hasFile &&
      (!self.hasFile || [self.file isEqual:otherMessage.file]) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasVoiceLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.voiceLength] hash];
  }
  if (self.hasCreatedBy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdBy] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasFile) {
    hashCode = hashCode * 31 + [self.file hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GRecorderPbBuilder()
@property (strong) GRecorderPb* resultGrecorderPb;
@end

@implementation GRecorderPbBuilder
@synthesize resultGrecorderPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGrecorderPb = [[GRecorderPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGrecorderPb;
}
- (GRecorderPbBuilder*) clear {
  self.resultGrecorderPb = [[GRecorderPb alloc] init];
  return self;
}
- (GRecorderPbBuilder*) clone {
  return [GRecorderPb builderWithPrototype:resultGrecorderPb];
}
- (GRecorderPb*) defaultInstance {
  return [GRecorderPb defaultInstance];
}
- (GRecorderPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GRecorderPb*) buildPartial {
  GRecorderPb* returnMe = resultGrecorderPb;
  self.resultGrecorderPb = nil;
  return returnMe;
}
- (GRecorderPbBuilder*) mergeFrom:(GRecorderPb*) other {
  if (other == [GRecorderPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasVoiceLength) {
    [self setVoiceLength:other.voiceLength];
  }
  if (other.hasCreatedBy) {
    [self setCreatedBy:other.createdBy];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasFile) {
    [self setFile:other.file];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GRecorderPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GRecorderPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 24: {
        [self setType:[input readInt32]];
        break;
      }
      case 34: {
        [self setMessage:[input readString]];
        break;
      }
      case 40: {
        [self setVoiceLength:[input readInt32]];
        break;
      }
      case 48: {
        [self setCreatedBy:[input readInt64]];
        break;
      }
      case 56: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 64: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 74: {
        [self setFile:[input readData]];
        break;
      }
      case 82: {
        [self setUuid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultGrecorderPb.hasId;
}
- (SInt64) id {
  return resultGrecorderPb.id;
}
- (GRecorderPbBuilder*) setId:(SInt64) value {
  resultGrecorderPb.hasId = YES;
  resultGrecorderPb.id = value;
  return self;
}
- (GRecorderPbBuilder*) clearId {
  resultGrecorderPb.hasId = NO;
  resultGrecorderPb.id = 0L;
  return self;
}
- (BOOL) hasSessionId {
  return resultGrecorderPb.hasSessionId;
}
- (SInt64) sessionId {
  return resultGrecorderPb.sessionId;
}
- (GRecorderPbBuilder*) setSessionId:(SInt64) value {
  resultGrecorderPb.hasSessionId = YES;
  resultGrecorderPb.sessionId = value;
  return self;
}
- (GRecorderPbBuilder*) clearSessionId {
  resultGrecorderPb.hasSessionId = NO;
  resultGrecorderPb.sessionId = 0L;
  return self;
}
- (BOOL) hasType {
  return resultGrecorderPb.hasType;
}
- (SInt32) type {
  return resultGrecorderPb.type;
}
- (GRecorderPbBuilder*) setType:(SInt32) value {
  resultGrecorderPb.hasType = YES;
  resultGrecorderPb.type = value;
  return self;
}
- (GRecorderPbBuilder*) clearType {
  resultGrecorderPb.hasType = NO;
  resultGrecorderPb.type = 0;
  return self;
}
- (BOOL) hasMessage {
  return resultGrecorderPb.hasMessage;
}
- (NSString*) message {
  return resultGrecorderPb.message;
}
- (GRecorderPbBuilder*) setMessage:(NSString*) value {
  resultGrecorderPb.hasMessage = YES;
  resultGrecorderPb.message = value;
  return self;
}
- (GRecorderPbBuilder*) clearMessage {
  resultGrecorderPb.hasMessage = NO;
  resultGrecorderPb.message = @"";
  return self;
}
- (BOOL) hasVoiceLength {
  return resultGrecorderPb.hasVoiceLength;
}
- (SInt32) voiceLength {
  return resultGrecorderPb.voiceLength;
}
- (GRecorderPbBuilder*) setVoiceLength:(SInt32) value {
  resultGrecorderPb.hasVoiceLength = YES;
  resultGrecorderPb.voiceLength = value;
  return self;
}
- (GRecorderPbBuilder*) clearVoiceLength {
  resultGrecorderPb.hasVoiceLength = NO;
  resultGrecorderPb.voiceLength = 0;
  return self;
}
- (BOOL) hasCreatedBy {
  return resultGrecorderPb.hasCreatedBy;
}
- (SInt64) createdBy {
  return resultGrecorderPb.createdBy;
}
- (GRecorderPbBuilder*) setCreatedBy:(SInt64) value {
  resultGrecorderPb.hasCreatedBy = YES;
  resultGrecorderPb.createdBy = value;
  return self;
}
- (GRecorderPbBuilder*) clearCreatedBy {
  resultGrecorderPb.hasCreatedBy = NO;
  resultGrecorderPb.createdBy = 0L;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultGrecorderPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultGrecorderPb.createdDate;
}
- (GRecorderPbBuilder*) setCreatedDate:(SInt64) value {
  resultGrecorderPb.hasCreatedDate = YES;
  resultGrecorderPb.createdDate = value;
  return self;
}
- (GRecorderPbBuilder*) clearCreatedDate {
  resultGrecorderPb.hasCreatedDate = NO;
  resultGrecorderPb.createdDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultGrecorderPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultGrecorderPb.timestamp;
}
- (GRecorderPbBuilder*) setTimestamp:(SInt64) value {
  resultGrecorderPb.hasTimestamp = YES;
  resultGrecorderPb.timestamp = value;
  return self;
}
- (GRecorderPbBuilder*) clearTimestamp {
  resultGrecorderPb.hasTimestamp = NO;
  resultGrecorderPb.timestamp = 0L;
  return self;
}
- (BOOL) hasFile {
  return resultGrecorderPb.hasFile;
}
- (NSData*) file {
  return resultGrecorderPb.file;
}
- (GRecorderPbBuilder*) setFile:(NSData*) value {
  resultGrecorderPb.hasFile = YES;
  resultGrecorderPb.file = value;
  return self;
}
- (GRecorderPbBuilder*) clearFile {
  resultGrecorderPb.hasFile = NO;
  resultGrecorderPb.file = [NSData data];
  return self;
}
- (BOOL) hasUuid {
  return resultGrecorderPb.hasUuid;
}
- (NSString*) uuid {
  return resultGrecorderPb.uuid;
}
- (GRecorderPbBuilder*) setUuid:(NSString*) value {
  resultGrecorderPb.hasUuid = YES;
  resultGrecorderPb.uuid = value;
  return self;
}
- (GRecorderPbBuilder*) clearUuid {
  resultGrecorderPb.hasUuid = NO;
  resultGrecorderPb.uuid = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
