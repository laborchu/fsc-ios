// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscChatUser.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscChatUserRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscChatUserRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface USessionPb ()
@property SInt64 id;
@property (strong) NSString* uuid;
@property SInt64 fromUserId;
@property SInt64 toUserId;
@property SInt64 createdDate;
@property SInt64 timestamp;
@end

@implementation USessionPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.uuid = @"";
    self.fromUserId = 0L;
    self.toUserId = 0L;
    self.createdDate = 0L;
    self.timestamp = 0L;
  }
  return self;
}
static USessionPb* defaultUSessionPbInstance = nil;
+ (void) initialize {
  if (self == [USessionPb class]) {
    defaultUSessionPbInstance = [[USessionPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUSessionPbInstance;
}
- (instancetype) defaultInstance {
  return defaultUSessionPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasUuid) {
    [output writeString:2 value:self.uuid];
  }
  if (self.hasFromUserId) {
    [output writeInt64:3 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeInt64:4 value:self.toUserId];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:5 value:self.createdDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:6 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(2, self.uuid);
  }
  if (self.hasFromUserId) {
    size_ += computeInt64Size(3, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeInt64Size(4, self.toUserId);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(5, self.createdDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(6, self.timestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (USessionPb*) parseFromData:(NSData*) data {
  return (USessionPb*)[[[USessionPb builder] mergeFromData:data] build];
}
+ (USessionPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (USessionPb*)[[[USessionPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (USessionPb*) parseFromInputStream:(NSInputStream*) input {
  return (USessionPb*)[[[USessionPb builder] mergeFromInputStream:input] build];
}
+ (USessionPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (USessionPb*)[[[USessionPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (USessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (USessionPb*)[[[USessionPb builder] mergeFromCodedInputStream:input] build];
}
+ (USessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (USessionPb*)[[[USessionPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (USessionPbBuilder*) builder {
  return [[USessionPbBuilder alloc] init];
}
+ (USessionPbBuilder*) builderWithPrototype:(USessionPb*) prototype {
  return [[USessionPb builder] mergeFrom:prototype];
}
- (USessionPbBuilder*) builder {
  return [USessionPb builder];
}
- (USessionPbBuilder*) toBuilder {
  return [USessionPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithLongLong:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithLongLong:self.toUserId]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[USessionPb class]]) {
    return NO;
  }
  USessionPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.toUserId] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface USessionPbBuilder()
@property (strong) USessionPb* resultUsessionPb;
@end

@implementation USessionPbBuilder
@synthesize resultUsessionPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUsessionPb = [[USessionPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUsessionPb;
}
- (USessionPbBuilder*) clear {
  self.resultUsessionPb = [[USessionPb alloc] init];
  return self;
}
- (USessionPbBuilder*) clone {
  return [USessionPb builderWithPrototype:resultUsessionPb];
}
- (USessionPb*) defaultInstance {
  return [USessionPb defaultInstance];
}
- (USessionPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (USessionPb*) buildPartial {
  USessionPb* returnMe = resultUsessionPb;
  self.resultUsessionPb = nil;
  return returnMe;
}
- (USessionPbBuilder*) mergeFrom:(USessionPb*) other {
  if (other == [USessionPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (USessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (USessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setUuid:[input readString]];
        break;
      }
      case 24: {
        [self setFromUserId:[input readInt64]];
        break;
      }
      case 32: {
        [self setToUserId:[input readInt64]];
        break;
      }
      case 40: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 48: {
        [self setTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultUsessionPb.hasId;
}
- (SInt64) id {
  return resultUsessionPb.id;
}
- (USessionPbBuilder*) setId:(SInt64) value {
  resultUsessionPb.hasId = YES;
  resultUsessionPb.id = value;
  return self;
}
- (USessionPbBuilder*) clearId {
  resultUsessionPb.hasId = NO;
  resultUsessionPb.id = 0L;
  return self;
}
- (BOOL) hasUuid {
  return resultUsessionPb.hasUuid;
}
- (NSString*) uuid {
  return resultUsessionPb.uuid;
}
- (USessionPbBuilder*) setUuid:(NSString*) value {
  resultUsessionPb.hasUuid = YES;
  resultUsessionPb.uuid = value;
  return self;
}
- (USessionPbBuilder*) clearUuid {
  resultUsessionPb.hasUuid = NO;
  resultUsessionPb.uuid = @"";
  return self;
}
- (BOOL) hasFromUserId {
  return resultUsessionPb.hasFromUserId;
}
- (SInt64) fromUserId {
  return resultUsessionPb.fromUserId;
}
- (USessionPbBuilder*) setFromUserId:(SInt64) value {
  resultUsessionPb.hasFromUserId = YES;
  resultUsessionPb.fromUserId = value;
  return self;
}
- (USessionPbBuilder*) clearFromUserId {
  resultUsessionPb.hasFromUserId = NO;
  resultUsessionPb.fromUserId = 0L;
  return self;
}
- (BOOL) hasToUserId {
  return resultUsessionPb.hasToUserId;
}
- (SInt64) toUserId {
  return resultUsessionPb.toUserId;
}
- (USessionPbBuilder*) setToUserId:(SInt64) value {
  resultUsessionPb.hasToUserId = YES;
  resultUsessionPb.toUserId = value;
  return self;
}
- (USessionPbBuilder*) clearToUserId {
  resultUsessionPb.hasToUserId = NO;
  resultUsessionPb.toUserId = 0L;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultUsessionPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultUsessionPb.createdDate;
}
- (USessionPbBuilder*) setCreatedDate:(SInt64) value {
  resultUsessionPb.hasCreatedDate = YES;
  resultUsessionPb.createdDate = value;
  return self;
}
- (USessionPbBuilder*) clearCreatedDate {
  resultUsessionPb.hasCreatedDate = NO;
  resultUsessionPb.createdDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultUsessionPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultUsessionPb.timestamp;
}
- (USessionPbBuilder*) setTimestamp:(SInt64) value {
  resultUsessionPb.hasTimestamp = YES;
  resultUsessionPb.timestamp = value;
  return self;
}
- (USessionPbBuilder*) clearTimestamp {
  resultUsessionPb.hasTimestamp = NO;
  resultUsessionPb.timestamp = 0L;
  return self;
}
@end

@interface URecorderListPb ()
@property (strong) NSMutableArray * recorderPbArray;
@end

@implementation URecorderListPb

@synthesize recorderPbArray;
@dynamic recorderPb;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static URecorderListPb* defaultURecorderListPbInstance = nil;
+ (void) initialize {
  if (self == [URecorderListPb class]) {
    defaultURecorderListPbInstance = [[URecorderListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultURecorderListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultURecorderListPbInstance;
}
- (NSArray *)recorderPb {
  return recorderPbArray;
}
- (URecorderPb*)recorderPbAtIndex:(NSUInteger)index {
  return [recorderPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.recorderPbArray enumerateObjectsUsingBlock:^(URecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.recorderPbArray enumerateObjectsUsingBlock:^(URecorderPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (URecorderListPb*) parseFromData:(NSData*) data {
  return (URecorderListPb*)[[[URecorderListPb builder] mergeFromData:data] build];
}
+ (URecorderListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (URecorderListPb*)[[[URecorderListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (URecorderListPb*) parseFromInputStream:(NSInputStream*) input {
  return (URecorderListPb*)[[[URecorderListPb builder] mergeFromInputStream:input] build];
}
+ (URecorderListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (URecorderListPb*)[[[URecorderListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (URecorderListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (URecorderListPb*)[[[URecorderListPb builder] mergeFromCodedInputStream:input] build];
}
+ (URecorderListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (URecorderListPb*)[[[URecorderListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (URecorderListPbBuilder*) builder {
  return [[URecorderListPbBuilder alloc] init];
}
+ (URecorderListPbBuilder*) builderWithPrototype:(URecorderListPb*) prototype {
  return [[URecorderListPb builder] mergeFrom:prototype];
}
- (URecorderListPbBuilder*) builder {
  return [URecorderListPb builder];
}
- (URecorderListPbBuilder*) toBuilder {
  return [URecorderListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.recorderPbArray enumerateObjectsUsingBlock:^(URecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"recorderPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (URecorderPb* element in self.recorderPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"recorderPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[URecorderListPb class]]) {
    return NO;
  }
  URecorderListPb *otherMessage = other;
  return
      [self.recorderPbArray isEqualToArray:otherMessage.recorderPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.recorderPbArray enumerateObjectsUsingBlock:^(URecorderPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface URecorderListPbBuilder()
@property (strong) URecorderListPb* resultUrecorderListPb;
@end

@implementation URecorderListPbBuilder
@synthesize resultUrecorderListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUrecorderListPb = [[URecorderListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUrecorderListPb;
}
- (URecorderListPbBuilder*) clear {
  self.resultUrecorderListPb = [[URecorderListPb alloc] init];
  return self;
}
- (URecorderListPbBuilder*) clone {
  return [URecorderListPb builderWithPrototype:resultUrecorderListPb];
}
- (URecorderListPb*) defaultInstance {
  return [URecorderListPb defaultInstance];
}
- (URecorderListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (URecorderListPb*) buildPartial {
  URecorderListPb* returnMe = resultUrecorderListPb;
  self.resultUrecorderListPb = nil;
  return returnMe;
}
- (URecorderListPbBuilder*) mergeFrom:(URecorderListPb*) other {
  if (other == [URecorderListPb defaultInstance]) {
    return self;
  }
  if (other.recorderPbArray.count > 0) {
    if (resultUrecorderListPb.recorderPbArray == nil) {
      resultUrecorderListPb.recorderPbArray = [[NSMutableArray alloc] initWithArray:other.recorderPbArray];
    } else {
      [resultUrecorderListPb.recorderPbArray addObjectsFromArray:other.recorderPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (URecorderListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (URecorderListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        URecorderPbBuilder* subBuilder = [URecorderPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecorderPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)recorderPb {
  return resultUrecorderListPb.recorderPbArray;
}
- (URecorderPb*)recorderPbAtIndex:(NSUInteger)index {
  return [resultUrecorderListPb recorderPbAtIndex:index];
}
- (URecorderListPbBuilder *)addRecorderPb:(URecorderPb*)value {
  if (resultUrecorderListPb.recorderPbArray == nil) {
    resultUrecorderListPb.recorderPbArray = [[NSMutableArray alloc]init];
  }
  [resultUrecorderListPb.recorderPbArray addObject:value];
  return self;
}
- (URecorderListPbBuilder *)setRecorderPbArray:(NSArray *)array {
  resultUrecorderListPb.recorderPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (URecorderListPbBuilder *)clearRecorderPb {
  resultUrecorderListPb.recorderPbArray = nil;
  return self;
}
@end

@interface URecorderPb ()
@property SInt64 id;
@property SInt64 sessionId;
@property SInt64 fromUserId;
@property SInt64 toUserId;
@property SInt32 type;
@property (strong) NSString* message;
@property SInt32 voiceLength;
@property SInt64 createdDate;
@property SInt64 timestamp;
@property (strong) NSData* file;
@property (strong) NSString* uuid;
@end

@implementation URecorderPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (BOOL) hasVoiceLength {
  return !!hasVoiceLength_;
}
- (void) setHasVoiceLength:(BOOL) _value_ {
  hasVoiceLength_ = !!_value_;
}
@synthesize voiceLength;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasFile {
  return !!hasFile_;
}
- (void) setHasFile:(BOOL) _value_ {
  hasFile_ = !!_value_;
}
@synthesize file;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.sessionId = 0L;
    self.fromUserId = 0L;
    self.toUserId = 0L;
    self.type = 0;
    self.message = @"";
    self.voiceLength = 0;
    self.createdDate = 0L;
    self.timestamp = 0L;
    self.file = [NSData data];
    self.uuid = @"";
  }
  return self;
}
static URecorderPb* defaultURecorderPbInstance = nil;
+ (void) initialize {
  if (self == [URecorderPb class]) {
    defaultURecorderPbInstance = [[URecorderPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultURecorderPbInstance;
}
- (instancetype) defaultInstance {
  return defaultURecorderPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasSessionId) {
    [output writeInt64:2 value:self.sessionId];
  }
  if (self.hasFromUserId) {
    [output writeInt64:3 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeInt64:4 value:self.toUserId];
  }
  if (self.hasType) {
    [output writeInt32:5 value:self.type];
  }
  if (self.hasMessage) {
    [output writeString:6 value:self.message];
  }
  if (self.hasVoiceLength) {
    [output writeInt32:7 value:self.voiceLength];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:8 value:self.createdDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:9 value:self.timestamp];
  }
  if (self.hasFile) {
    [output writeData:10 value:self.file];
  }
  if (self.hasUuid) {
    [output writeString:11 value:self.uuid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasSessionId) {
    size_ += computeInt64Size(2, self.sessionId);
  }
  if (self.hasFromUserId) {
    size_ += computeInt64Size(3, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeInt64Size(4, self.toUserId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(5, self.type);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(6, self.message);
  }
  if (self.hasVoiceLength) {
    size_ += computeInt32Size(7, self.voiceLength);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(8, self.createdDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(9, self.timestamp);
  }
  if (self.hasFile) {
    size_ += computeDataSize(10, self.file);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(11, self.uuid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (URecorderPb*) parseFromData:(NSData*) data {
  return (URecorderPb*)[[[URecorderPb builder] mergeFromData:data] build];
}
+ (URecorderPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (URecorderPb*)[[[URecorderPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (URecorderPb*) parseFromInputStream:(NSInputStream*) input {
  return (URecorderPb*)[[[URecorderPb builder] mergeFromInputStream:input] build];
}
+ (URecorderPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (URecorderPb*)[[[URecorderPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (URecorderPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (URecorderPb*)[[[URecorderPb builder] mergeFromCodedInputStream:input] build];
}
+ (URecorderPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (URecorderPb*)[[[URecorderPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (URecorderPbBuilder*) builder {
  return [[URecorderPbBuilder alloc] init];
}
+ (URecorderPbBuilder*) builderWithPrototype:(URecorderPb*) prototype {
  return [[URecorderPb builder] mergeFrom:prototype];
}
- (URecorderPbBuilder*) builder {
  return [URecorderPb builder];
}
- (URecorderPbBuilder*) toBuilder {
  return [URecorderPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithLongLong:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithLongLong:self.toUserId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasVoiceLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voiceLength", [NSNumber numberWithInteger:self.voiceLength]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"file", self.file];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasVoiceLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.voiceLength] forKey: @"voiceLength"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasFile) {
    [dictionary setObject: self.file forKey: @"file"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[URecorderPb class]]) {
    return NO;
  }
  URecorderPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasVoiceLength == otherMessage.hasVoiceLength &&
      (!self.hasVoiceLength || self.voiceLength == otherMessage.voiceLength) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasFile == otherMessage.hasFile &&
      (!self.hasFile || [self.file isEqual:otherMessage.file]) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.toUserId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasVoiceLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.voiceLength] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasFile) {
    hashCode = hashCode * 31 + [self.file hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface URecorderPbBuilder()
@property (strong) URecorderPb* resultUrecorderPb;
@end

@implementation URecorderPbBuilder
@synthesize resultUrecorderPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUrecorderPb = [[URecorderPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUrecorderPb;
}
- (URecorderPbBuilder*) clear {
  self.resultUrecorderPb = [[URecorderPb alloc] init];
  return self;
}
- (URecorderPbBuilder*) clone {
  return [URecorderPb builderWithPrototype:resultUrecorderPb];
}
- (URecorderPb*) defaultInstance {
  return [URecorderPb defaultInstance];
}
- (URecorderPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (URecorderPb*) buildPartial {
  URecorderPb* returnMe = resultUrecorderPb;
  self.resultUrecorderPb = nil;
  return returnMe;
}
- (URecorderPbBuilder*) mergeFrom:(URecorderPb*) other {
  if (other == [URecorderPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasVoiceLength) {
    [self setVoiceLength:other.voiceLength];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasFile) {
    [self setFile:other.file];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (URecorderPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (URecorderPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 24: {
        [self setFromUserId:[input readInt64]];
        break;
      }
      case 32: {
        [self setToUserId:[input readInt64]];
        break;
      }
      case 40: {
        [self setType:[input readInt32]];
        break;
      }
      case 50: {
        [self setMessage:[input readString]];
        break;
      }
      case 56: {
        [self setVoiceLength:[input readInt32]];
        break;
      }
      case 64: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 72: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 82: {
        [self setFile:[input readData]];
        break;
      }
      case 90: {
        [self setUuid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultUrecorderPb.hasId;
}
- (SInt64) id {
  return resultUrecorderPb.id;
}
- (URecorderPbBuilder*) setId:(SInt64) value {
  resultUrecorderPb.hasId = YES;
  resultUrecorderPb.id = value;
  return self;
}
- (URecorderPbBuilder*) clearId {
  resultUrecorderPb.hasId = NO;
  resultUrecorderPb.id = 0L;
  return self;
}
- (BOOL) hasSessionId {
  return resultUrecorderPb.hasSessionId;
}
- (SInt64) sessionId {
  return resultUrecorderPb.sessionId;
}
- (URecorderPbBuilder*) setSessionId:(SInt64) value {
  resultUrecorderPb.hasSessionId = YES;
  resultUrecorderPb.sessionId = value;
  return self;
}
- (URecorderPbBuilder*) clearSessionId {
  resultUrecorderPb.hasSessionId = NO;
  resultUrecorderPb.sessionId = 0L;
  return self;
}
- (BOOL) hasFromUserId {
  return resultUrecorderPb.hasFromUserId;
}
- (SInt64) fromUserId {
  return resultUrecorderPb.fromUserId;
}
- (URecorderPbBuilder*) setFromUserId:(SInt64) value {
  resultUrecorderPb.hasFromUserId = YES;
  resultUrecorderPb.fromUserId = value;
  return self;
}
- (URecorderPbBuilder*) clearFromUserId {
  resultUrecorderPb.hasFromUserId = NO;
  resultUrecorderPb.fromUserId = 0L;
  return self;
}
- (BOOL) hasToUserId {
  return resultUrecorderPb.hasToUserId;
}
- (SInt64) toUserId {
  return resultUrecorderPb.toUserId;
}
- (URecorderPbBuilder*) setToUserId:(SInt64) value {
  resultUrecorderPb.hasToUserId = YES;
  resultUrecorderPb.toUserId = value;
  return self;
}
- (URecorderPbBuilder*) clearToUserId {
  resultUrecorderPb.hasToUserId = NO;
  resultUrecorderPb.toUserId = 0L;
  return self;
}
- (BOOL) hasType {
  return resultUrecorderPb.hasType;
}
- (SInt32) type {
  return resultUrecorderPb.type;
}
- (URecorderPbBuilder*) setType:(SInt32) value {
  resultUrecorderPb.hasType = YES;
  resultUrecorderPb.type = value;
  return self;
}
- (URecorderPbBuilder*) clearType {
  resultUrecorderPb.hasType = NO;
  resultUrecorderPb.type = 0;
  return self;
}
- (BOOL) hasMessage {
  return resultUrecorderPb.hasMessage;
}
- (NSString*) message {
  return resultUrecorderPb.message;
}
- (URecorderPbBuilder*) setMessage:(NSString*) value {
  resultUrecorderPb.hasMessage = YES;
  resultUrecorderPb.message = value;
  return self;
}
- (URecorderPbBuilder*) clearMessage {
  resultUrecorderPb.hasMessage = NO;
  resultUrecorderPb.message = @"";
  return self;
}
- (BOOL) hasVoiceLength {
  return resultUrecorderPb.hasVoiceLength;
}
- (SInt32) voiceLength {
  return resultUrecorderPb.voiceLength;
}
- (URecorderPbBuilder*) setVoiceLength:(SInt32) value {
  resultUrecorderPb.hasVoiceLength = YES;
  resultUrecorderPb.voiceLength = value;
  return self;
}
- (URecorderPbBuilder*) clearVoiceLength {
  resultUrecorderPb.hasVoiceLength = NO;
  resultUrecorderPb.voiceLength = 0;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultUrecorderPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultUrecorderPb.createdDate;
}
- (URecorderPbBuilder*) setCreatedDate:(SInt64) value {
  resultUrecorderPb.hasCreatedDate = YES;
  resultUrecorderPb.createdDate = value;
  return self;
}
- (URecorderPbBuilder*) clearCreatedDate {
  resultUrecorderPb.hasCreatedDate = NO;
  resultUrecorderPb.createdDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultUrecorderPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultUrecorderPb.timestamp;
}
- (URecorderPbBuilder*) setTimestamp:(SInt64) value {
  resultUrecorderPb.hasTimestamp = YES;
  resultUrecorderPb.timestamp = value;
  return self;
}
- (URecorderPbBuilder*) clearTimestamp {
  resultUrecorderPb.hasTimestamp = NO;
  resultUrecorderPb.timestamp = 0L;
  return self;
}
- (BOOL) hasFile {
  return resultUrecorderPb.hasFile;
}
- (NSData*) file {
  return resultUrecorderPb.file;
}
- (URecorderPbBuilder*) setFile:(NSData*) value {
  resultUrecorderPb.hasFile = YES;
  resultUrecorderPb.file = value;
  return self;
}
- (URecorderPbBuilder*) clearFile {
  resultUrecorderPb.hasFile = NO;
  resultUrecorderPb.file = [NSData data];
  return self;
}
- (BOOL) hasUuid {
  return resultUrecorderPb.hasUuid;
}
- (NSString*) uuid {
  return resultUrecorderPb.uuid;
}
- (URecorderPbBuilder*) setUuid:(NSString*) value {
  resultUrecorderPb.hasUuid = YES;
  resultUrecorderPb.uuid = value;
  return self;
}
- (URecorderPbBuilder*) clearUuid {
  resultUrecorderPb.hasUuid = NO;
  resultUrecorderPb.uuid = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
