// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscChatClass.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscChatClassRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscChatClassRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FscSessionRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CRecorderListPb ()
@property (strong) NSMutableArray * recorderPbArray;
@end

@implementation CRecorderListPb

@synthesize recorderPbArray;
@dynamic recorderPb;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static CRecorderListPb* defaultCRecorderListPbInstance = nil;
+ (void) initialize {
  if (self == [CRecorderListPb class]) {
    defaultCRecorderListPbInstance = [[CRecorderListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCRecorderListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultCRecorderListPbInstance;
}
- (NSArray *)recorderPb {
  return recorderPbArray;
}
- (CRecorderPb*)recorderPbAtIndex:(NSUInteger)index {
  return [recorderPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.recorderPbArray enumerateObjectsUsingBlock:^(CRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.recorderPbArray enumerateObjectsUsingBlock:^(CRecorderPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CRecorderListPb*) parseFromData:(NSData*) data {
  return (CRecorderListPb*)[[[CRecorderListPb builder] mergeFromData:data] build];
}
+ (CRecorderListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CRecorderListPb*)[[[CRecorderListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CRecorderListPb*) parseFromInputStream:(NSInputStream*) input {
  return (CRecorderListPb*)[[[CRecorderListPb builder] mergeFromInputStream:input] build];
}
+ (CRecorderListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CRecorderListPb*)[[[CRecorderListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CRecorderListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CRecorderListPb*)[[[CRecorderListPb builder] mergeFromCodedInputStream:input] build];
}
+ (CRecorderListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CRecorderListPb*)[[[CRecorderListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CRecorderListPbBuilder*) builder {
  return [[CRecorderListPbBuilder alloc] init];
}
+ (CRecorderListPbBuilder*) builderWithPrototype:(CRecorderListPb*) prototype {
  return [[CRecorderListPb builder] mergeFrom:prototype];
}
- (CRecorderListPbBuilder*) builder {
  return [CRecorderListPb builder];
}
- (CRecorderListPbBuilder*) toBuilder {
  return [CRecorderListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.recorderPbArray enumerateObjectsUsingBlock:^(CRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"recorderPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (CRecorderPb* element in self.recorderPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"recorderPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CRecorderListPb class]]) {
    return NO;
  }
  CRecorderListPb *otherMessage = other;
  return
      [self.recorderPbArray isEqualToArray:otherMessage.recorderPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.recorderPbArray enumerateObjectsUsingBlock:^(CRecorderPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CRecorderListPbBuilder()
@property (strong) CRecorderListPb* resultCrecorderListPb;
@end

@implementation CRecorderListPbBuilder
@synthesize resultCrecorderListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCrecorderListPb = [[CRecorderListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCrecorderListPb;
}
- (CRecorderListPbBuilder*) clear {
  self.resultCrecorderListPb = [[CRecorderListPb alloc] init];
  return self;
}
- (CRecorderListPbBuilder*) clone {
  return [CRecorderListPb builderWithPrototype:resultCrecorderListPb];
}
- (CRecorderListPb*) defaultInstance {
  return [CRecorderListPb defaultInstance];
}
- (CRecorderListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CRecorderListPb*) buildPartial {
  CRecorderListPb* returnMe = resultCrecorderListPb;
  self.resultCrecorderListPb = nil;
  return returnMe;
}
- (CRecorderListPbBuilder*) mergeFrom:(CRecorderListPb*) other {
  if (other == [CRecorderListPb defaultInstance]) {
    return self;
  }
  if (other.recorderPbArray.count > 0) {
    if (resultCrecorderListPb.recorderPbArray == nil) {
      resultCrecorderListPb.recorderPbArray = [[NSMutableArray alloc] initWithArray:other.recorderPbArray];
    } else {
      [resultCrecorderListPb.recorderPbArray addObjectsFromArray:other.recorderPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CRecorderListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CRecorderListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CRecorderPbBuilder* subBuilder = [CRecorderPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecorderPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)recorderPb {
  return resultCrecorderListPb.recorderPbArray;
}
- (CRecorderPb*)recorderPbAtIndex:(NSUInteger)index {
  return [resultCrecorderListPb recorderPbAtIndex:index];
}
- (CRecorderListPbBuilder *)addRecorderPb:(CRecorderPb*)value {
  if (resultCrecorderListPb.recorderPbArray == nil) {
    resultCrecorderListPb.recorderPbArray = [[NSMutableArray alloc]init];
  }
  [resultCrecorderListPb.recorderPbArray addObject:value];
  return self;
}
- (CRecorderListPbBuilder *)setRecorderPbArray:(NSArray *)array {
  resultCrecorderListPb.recorderPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (CRecorderListPbBuilder *)clearRecorderPb {
  resultCrecorderListPb.recorderPbArray = nil;
  return self;
}
@end

@interface CSessionPb ()
@property SInt64 id;
@property (strong) NSString* uuid;
@property (strong) NSString* name;
@property SInt64 classId;
@property SInt64 createdDate;
@property SInt64 timestamp;
@property (strong) NSMutableArray * userArray;
@property (strong) FscSessionPb* fscSession;
@end

@implementation CSessionPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasClassId {
  return !!hasClassId_;
}
- (void) setHasClassId:(BOOL) _value_ {
  hasClassId_ = !!_value_;
}
@synthesize classId;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
@synthesize userArray;
@dynamic user;
- (BOOL) hasFscSession {
  return !!hasFscSession_;
}
- (void) setHasFscSession:(BOOL) _value_ {
  hasFscSession_ = !!_value_;
}
@synthesize fscSession;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.uuid = @"";
    self.name = @"";
    self.classId = 0L;
    self.createdDate = 0L;
    self.timestamp = 0L;
    self.fscSession = [FscSessionPb defaultInstance];
  }
  return self;
}
static CSessionPb* defaultCSessionPbInstance = nil;
+ (void) initialize {
  if (self == [CSessionPb class]) {
    defaultCSessionPbInstance = [[CSessionPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCSessionPbInstance;
}
- (instancetype) defaultInstance {
  return defaultCSessionPbInstance;
}
- (NSArray *)user {
  return userArray;
}
- (CUserPb*)userAtIndex:(NSUInteger)index {
  return [userArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasUuid) {
    [output writeString:2 value:self.uuid];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasClassId) {
    [output writeInt64:4 value:self.classId];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:5 value:self.createdDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:6 value:self.timestamp];
  }
  [self.userArray enumerateObjectsUsingBlock:^(CUserPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  if (self.hasFscSession) {
    [output writeMessage:8 value:self.fscSession];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(2, self.uuid);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasClassId) {
    size_ += computeInt64Size(4, self.classId);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(5, self.createdDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(6, self.timestamp);
  }
  [self.userArray enumerateObjectsUsingBlock:^(CUserPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  if (self.hasFscSession) {
    size_ += computeMessageSize(8, self.fscSession);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSessionPb*) parseFromData:(NSData*) data {
  return (CSessionPb*)[[[CSessionPb builder] mergeFromData:data] build];
}
+ (CSessionPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSessionPb*)[[[CSessionPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSessionPb*) parseFromInputStream:(NSInputStream*) input {
  return (CSessionPb*)[[[CSessionPb builder] mergeFromInputStream:input] build];
}
+ (CSessionPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSessionPb*)[[[CSessionPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSessionPb*)[[[CSessionPb builder] mergeFromCodedInputStream:input] build];
}
+ (CSessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSessionPb*)[[[CSessionPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSessionPbBuilder*) builder {
  return [[CSessionPbBuilder alloc] init];
}
+ (CSessionPbBuilder*) builderWithPrototype:(CSessionPb*) prototype {
  return [[CSessionPb builder] mergeFrom:prototype];
}
- (CSessionPbBuilder*) builder {
  return [CSessionPb builder];
}
- (CSessionPbBuilder*) toBuilder {
  return [CSessionPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasClassId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classId", [NSNumber numberWithLongLong:self.classId]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.userArray enumerateObjectsUsingBlock:^(CUserPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasFscSession) {
    [output appendFormat:@"%@%@ {\n", indent, @"fscSession"];
    [self.fscSession writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasClassId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.classId] forKey: @"classId"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  for (CUserPb* element in self.userArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"user"];
  }
  if (self.hasFscSession) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fscSession storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fscSession"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSessionPb class]]) {
    return NO;
  }
  CSessionPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasClassId == otherMessage.hasClassId &&
      (!self.hasClassId || self.classId == otherMessage.classId) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      [self.userArray isEqualToArray:otherMessage.userArray] &&
      self.hasFscSession == otherMessage.hasFscSession &&
      (!self.hasFscSession || [self.fscSession isEqual:otherMessage.fscSession]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasClassId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.classId] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  [self.userArray enumerateObjectsUsingBlock:^(CUserPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasFscSession) {
    hashCode = hashCode * 31 + [self.fscSession hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSessionPbBuilder()
@property (strong) CSessionPb* resultCsessionPb;
@end

@implementation CSessionPbBuilder
@synthesize resultCsessionPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCsessionPb = [[CSessionPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCsessionPb;
}
- (CSessionPbBuilder*) clear {
  self.resultCsessionPb = [[CSessionPb alloc] init];
  return self;
}
- (CSessionPbBuilder*) clone {
  return [CSessionPb builderWithPrototype:resultCsessionPb];
}
- (CSessionPb*) defaultInstance {
  return [CSessionPb defaultInstance];
}
- (CSessionPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSessionPb*) buildPartial {
  CSessionPb* returnMe = resultCsessionPb;
  self.resultCsessionPb = nil;
  return returnMe;
}
- (CSessionPbBuilder*) mergeFrom:(CSessionPb*) other {
  if (other == [CSessionPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasClassId) {
    [self setClassId:other.classId];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.userArray.count > 0) {
    if (resultCsessionPb.userArray == nil) {
      resultCsessionPb.userArray = [[NSMutableArray alloc] initWithArray:other.userArray];
    } else {
      [resultCsessionPb.userArray addObjectsFromArray:other.userArray];
    }
  }
  if (other.hasFscSession) {
    [self mergeFscSession:other.fscSession];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setUuid:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setClassId:[input readInt64]];
        break;
      }
      case 40: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 48: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 58: {
        CUserPbBuilder* subBuilder = [CUserPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUser:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        FscSessionPbBuilder* subBuilder = [FscSessionPb builder];
        if (self.hasFscSession) {
          [subBuilder mergeFrom:self.fscSession];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFscSession:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultCsessionPb.hasId;
}
- (SInt64) id {
  return resultCsessionPb.id;
}
- (CSessionPbBuilder*) setId:(SInt64) value {
  resultCsessionPb.hasId = YES;
  resultCsessionPb.id = value;
  return self;
}
- (CSessionPbBuilder*) clearId {
  resultCsessionPb.hasId = NO;
  resultCsessionPb.id = 0L;
  return self;
}
- (BOOL) hasUuid {
  return resultCsessionPb.hasUuid;
}
- (NSString*) uuid {
  return resultCsessionPb.uuid;
}
- (CSessionPbBuilder*) setUuid:(NSString*) value {
  resultCsessionPb.hasUuid = YES;
  resultCsessionPb.uuid = value;
  return self;
}
- (CSessionPbBuilder*) clearUuid {
  resultCsessionPb.hasUuid = NO;
  resultCsessionPb.uuid = @"";
  return self;
}
- (BOOL) hasName {
  return resultCsessionPb.hasName;
}
- (NSString*) name {
  return resultCsessionPb.name;
}
- (CSessionPbBuilder*) setName:(NSString*) value {
  resultCsessionPb.hasName = YES;
  resultCsessionPb.name = value;
  return self;
}
- (CSessionPbBuilder*) clearName {
  resultCsessionPb.hasName = NO;
  resultCsessionPb.name = @"";
  return self;
}
- (BOOL) hasClassId {
  return resultCsessionPb.hasClassId;
}
- (SInt64) classId {
  return resultCsessionPb.classId;
}
- (CSessionPbBuilder*) setClassId:(SInt64) value {
  resultCsessionPb.hasClassId = YES;
  resultCsessionPb.classId = value;
  return self;
}
- (CSessionPbBuilder*) clearClassId {
  resultCsessionPb.hasClassId = NO;
  resultCsessionPb.classId = 0L;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultCsessionPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultCsessionPb.createdDate;
}
- (CSessionPbBuilder*) setCreatedDate:(SInt64) value {
  resultCsessionPb.hasCreatedDate = YES;
  resultCsessionPb.createdDate = value;
  return self;
}
- (CSessionPbBuilder*) clearCreatedDate {
  resultCsessionPb.hasCreatedDate = NO;
  resultCsessionPb.createdDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultCsessionPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultCsessionPb.timestamp;
}
- (CSessionPbBuilder*) setTimestamp:(SInt64) value {
  resultCsessionPb.hasTimestamp = YES;
  resultCsessionPb.timestamp = value;
  return self;
}
- (CSessionPbBuilder*) clearTimestamp {
  resultCsessionPb.hasTimestamp = NO;
  resultCsessionPb.timestamp = 0L;
  return self;
}
- (NSMutableArray *)user {
  return resultCsessionPb.userArray;
}
- (CUserPb*)userAtIndex:(NSUInteger)index {
  return [resultCsessionPb userAtIndex:index];
}
- (CSessionPbBuilder *)addUser:(CUserPb*)value {
  if (resultCsessionPb.userArray == nil) {
    resultCsessionPb.userArray = [[NSMutableArray alloc]init];
  }
  [resultCsessionPb.userArray addObject:value];
  return self;
}
- (CSessionPbBuilder *)setUserArray:(NSArray *)array {
  resultCsessionPb.userArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (CSessionPbBuilder *)clearUser {
  resultCsessionPb.userArray = nil;
  return self;
}
- (BOOL) hasFscSession {
  return resultCsessionPb.hasFscSession;
}
- (FscSessionPb*) fscSession {
  return resultCsessionPb.fscSession;
}
- (CSessionPbBuilder*) setFscSession:(FscSessionPb*) value {
  resultCsessionPb.hasFscSession = YES;
  resultCsessionPb.fscSession = value;
  return self;
}
- (CSessionPbBuilder*) setFscSessionBuilder:(FscSessionPbBuilder*) builderForValue {
  return [self setFscSession:[builderForValue build]];
}
- (CSessionPbBuilder*) mergeFscSession:(FscSessionPb*) value {
  if (resultCsessionPb.hasFscSession &&
      resultCsessionPb.fscSession != [FscSessionPb defaultInstance]) {
    resultCsessionPb.fscSession =
      [[[FscSessionPb builderWithPrototype:resultCsessionPb.fscSession] mergeFrom:value] buildPartial];
  } else {
    resultCsessionPb.fscSession = value;
  }
  resultCsessionPb.hasFscSession = YES;
  return self;
}
- (CSessionPbBuilder*) clearFscSession {
  resultCsessionPb.hasFscSession = NO;
  resultCsessionPb.fscSession = [FscSessionPb defaultInstance];
  return self;
}
@end

@interface CUserPb ()
@property SInt64 sessionId;
@property SInt64 userId;
@property SInt64 inviterId;
@property SInt32 status;
@property SInt64 createdDate;
@property SInt64 modifiedDate;
@property SInt64 timestamp;
@end

@implementation CUserPb

- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasInviterId {
  return !!hasInviterId_;
}
- (void) setHasInviterId:(BOOL) _value_ {
  hasInviterId_ = !!_value_;
}
@synthesize inviterId;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionId = 0L;
    self.userId = 0L;
    self.inviterId = 0L;
    self.status = 0;
    self.createdDate = 0L;
    self.modifiedDate = 0L;
    self.timestamp = 0L;
  }
  return self;
}
static CUserPb* defaultCUserPbInstance = nil;
+ (void) initialize {
  if (self == [CUserPb class]) {
    defaultCUserPbInstance = [[CUserPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCUserPbInstance;
}
- (instancetype) defaultInstance {
  return defaultCUserPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionId) {
    [output writeInt64:1 value:self.sessionId];
  }
  if (self.hasUserId) {
    [output writeInt64:2 value:self.userId];
  }
  if (self.hasInviterId) {
    [output writeInt64:3 value:self.inviterId];
  }
  if (self.hasStatus) {
    [output writeInt32:4 value:self.status];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:5 value:self.createdDate];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:6 value:self.modifiedDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:7 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionId) {
    size_ += computeInt64Size(1, self.sessionId);
  }
  if (self.hasUserId) {
    size_ += computeInt64Size(2, self.userId);
  }
  if (self.hasInviterId) {
    size_ += computeInt64Size(3, self.inviterId);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(4, self.status);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(5, self.createdDate);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(6, self.modifiedDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(7, self.timestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CUserPb*) parseFromData:(NSData*) data {
  return (CUserPb*)[[[CUserPb builder] mergeFromData:data] build];
}
+ (CUserPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CUserPb*)[[[CUserPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CUserPb*) parseFromInputStream:(NSInputStream*) input {
  return (CUserPb*)[[[CUserPb builder] mergeFromInputStream:input] build];
}
+ (CUserPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CUserPb*)[[[CUserPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CUserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CUserPb*)[[[CUserPb builder] mergeFromCodedInputStream:input] build];
}
+ (CUserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CUserPb*)[[[CUserPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CUserPbBuilder*) builder {
  return [[CUserPbBuilder alloc] init];
}
+ (CUserPbBuilder*) builderWithPrototype:(CUserPb*) prototype {
  return [[CUserPb builder] mergeFrom:prototype];
}
- (CUserPbBuilder*) builder {
  return [CUserPb builder];
}
- (CUserPbBuilder*) toBuilder {
  return [CUserPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasInviterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inviterId", [NSNumber numberWithLongLong:self.inviterId]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasInviterId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.inviterId] forKey: @"inviterId"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CUserPb class]]) {
    return NO;
  }
  CUserPb *otherMessage = other;
  return
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasInviterId == otherMessage.hasInviterId &&
      (!self.hasInviterId || self.inviterId == otherMessage.inviterId) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasInviterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.inviterId] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CUserPbBuilder()
@property (strong) CUserPb* resultCuserPb;
@end

@implementation CUserPbBuilder
@synthesize resultCuserPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCuserPb = [[CUserPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCuserPb;
}
- (CUserPbBuilder*) clear {
  self.resultCuserPb = [[CUserPb alloc] init];
  return self;
}
- (CUserPbBuilder*) clone {
  return [CUserPb builderWithPrototype:resultCuserPb];
}
- (CUserPb*) defaultInstance {
  return [CUserPb defaultInstance];
}
- (CUserPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CUserPb*) buildPartial {
  CUserPb* returnMe = resultCuserPb;
  self.resultCuserPb = nil;
  return returnMe;
}
- (CUserPbBuilder*) mergeFrom:(CUserPb*) other {
  if (other == [CUserPb defaultInstance]) {
    return self;
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasInviterId) {
    [self setInviterId:other.inviterId];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CUserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CUserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 16: {
        [self setUserId:[input readInt64]];
        break;
      }
      case 24: {
        [self setInviterId:[input readInt64]];
        break;
      }
      case 32: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 40: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 48: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 56: {
        [self setTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionId {
  return resultCuserPb.hasSessionId;
}
- (SInt64) sessionId {
  return resultCuserPb.sessionId;
}
- (CUserPbBuilder*) setSessionId:(SInt64) value {
  resultCuserPb.hasSessionId = YES;
  resultCuserPb.sessionId = value;
  return self;
}
- (CUserPbBuilder*) clearSessionId {
  resultCuserPb.hasSessionId = NO;
  resultCuserPb.sessionId = 0L;
  return self;
}
- (BOOL) hasUserId {
  return resultCuserPb.hasUserId;
}
- (SInt64) userId {
  return resultCuserPb.userId;
}
- (CUserPbBuilder*) setUserId:(SInt64) value {
  resultCuserPb.hasUserId = YES;
  resultCuserPb.userId = value;
  return self;
}
- (CUserPbBuilder*) clearUserId {
  resultCuserPb.hasUserId = NO;
  resultCuserPb.userId = 0L;
  return self;
}
- (BOOL) hasInviterId {
  return resultCuserPb.hasInviterId;
}
- (SInt64) inviterId {
  return resultCuserPb.inviterId;
}
- (CUserPbBuilder*) setInviterId:(SInt64) value {
  resultCuserPb.hasInviterId = YES;
  resultCuserPb.inviterId = value;
  return self;
}
- (CUserPbBuilder*) clearInviterId {
  resultCuserPb.hasInviterId = NO;
  resultCuserPb.inviterId = 0L;
  return self;
}
- (BOOL) hasStatus {
  return resultCuserPb.hasStatus;
}
- (SInt32) status {
  return resultCuserPb.status;
}
- (CUserPbBuilder*) setStatus:(SInt32) value {
  resultCuserPb.hasStatus = YES;
  resultCuserPb.status = value;
  return self;
}
- (CUserPbBuilder*) clearStatus {
  resultCuserPb.hasStatus = NO;
  resultCuserPb.status = 0;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultCuserPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultCuserPb.createdDate;
}
- (CUserPbBuilder*) setCreatedDate:(SInt64) value {
  resultCuserPb.hasCreatedDate = YES;
  resultCuserPb.createdDate = value;
  return self;
}
- (CUserPbBuilder*) clearCreatedDate {
  resultCuserPb.hasCreatedDate = NO;
  resultCuserPb.createdDate = 0L;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultCuserPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultCuserPb.modifiedDate;
}
- (CUserPbBuilder*) setModifiedDate:(SInt64) value {
  resultCuserPb.hasModifiedDate = YES;
  resultCuserPb.modifiedDate = value;
  return self;
}
- (CUserPbBuilder*) clearModifiedDate {
  resultCuserPb.hasModifiedDate = NO;
  resultCuserPb.modifiedDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultCuserPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultCuserPb.timestamp;
}
- (CUserPbBuilder*) setTimestamp:(SInt64) value {
  resultCuserPb.hasTimestamp = YES;
  resultCuserPb.timestamp = value;
  return self;
}
- (CUserPbBuilder*) clearTimestamp {
  resultCuserPb.hasTimestamp = NO;
  resultCuserPb.timestamp = 0L;
  return self;
}
@end

@interface CRecorderPb ()
@property SInt64 id;
@property SInt64 sessionId;
@property SInt32 type;
@property (strong) NSString* message;
@property SInt32 voiceLength;
@property SInt64 createdBy;
@property SInt64 createdDate;
@property SInt64 timestamp;
@property (strong) NSData* file;
@property (strong) NSString* uuid;
@property SInt64 extendId;
@end

@implementation CRecorderPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (BOOL) hasVoiceLength {
  return !!hasVoiceLength_;
}
- (void) setHasVoiceLength:(BOOL) _value_ {
  hasVoiceLength_ = !!_value_;
}
@synthesize voiceLength;
- (BOOL) hasCreatedBy {
  return !!hasCreatedBy_;
}
- (void) setHasCreatedBy:(BOOL) _value_ {
  hasCreatedBy_ = !!_value_;
}
@synthesize createdBy;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasFile {
  return !!hasFile_;
}
- (void) setHasFile:(BOOL) _value_ {
  hasFile_ = !!_value_;
}
@synthesize file;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasExtendId {
  return !!hasExtendId_;
}
- (void) setHasExtendId:(BOOL) _value_ {
  hasExtendId_ = !!_value_;
}
@synthesize extendId;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.sessionId = 0L;
    self.type = 0;
    self.message = @"";
    self.voiceLength = 0;
    self.createdBy = 0L;
    self.createdDate = 0L;
    self.timestamp = 0L;
    self.file = [NSData data];
    self.uuid = @"";
    self.extendId = 0L;
  }
  return self;
}
static CRecorderPb* defaultCRecorderPbInstance = nil;
+ (void) initialize {
  if (self == [CRecorderPb class]) {
    defaultCRecorderPbInstance = [[CRecorderPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCRecorderPbInstance;
}
- (instancetype) defaultInstance {
  return defaultCRecorderPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasSessionId) {
    [output writeInt64:2 value:self.sessionId];
  }
  if (self.hasType) {
    [output writeInt32:3 value:self.type];
  }
  if (self.hasMessage) {
    [output writeString:4 value:self.message];
  }
  if (self.hasVoiceLength) {
    [output writeInt32:5 value:self.voiceLength];
  }
  if (self.hasCreatedBy) {
    [output writeInt64:6 value:self.createdBy];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:7 value:self.createdDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:8 value:self.timestamp];
  }
  if (self.hasFile) {
    [output writeData:9 value:self.file];
  }
  if (self.hasUuid) {
    [output writeString:10 value:self.uuid];
  }
  if (self.hasExtendId) {
    [output writeInt64:11 value:self.extendId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasSessionId) {
    size_ += computeInt64Size(2, self.sessionId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(3, self.type);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(4, self.message);
  }
  if (self.hasVoiceLength) {
    size_ += computeInt32Size(5, self.voiceLength);
  }
  if (self.hasCreatedBy) {
    size_ += computeInt64Size(6, self.createdBy);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(7, self.createdDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(8, self.timestamp);
  }
  if (self.hasFile) {
    size_ += computeDataSize(9, self.file);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(10, self.uuid);
  }
  if (self.hasExtendId) {
    size_ += computeInt64Size(11, self.extendId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CRecorderPb*) parseFromData:(NSData*) data {
  return (CRecorderPb*)[[[CRecorderPb builder] mergeFromData:data] build];
}
+ (CRecorderPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CRecorderPb*)[[[CRecorderPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CRecorderPb*) parseFromInputStream:(NSInputStream*) input {
  return (CRecorderPb*)[[[CRecorderPb builder] mergeFromInputStream:input] build];
}
+ (CRecorderPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CRecorderPb*)[[[CRecorderPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CRecorderPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CRecorderPb*)[[[CRecorderPb builder] mergeFromCodedInputStream:input] build];
}
+ (CRecorderPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CRecorderPb*)[[[CRecorderPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CRecorderPbBuilder*) builder {
  return [[CRecorderPbBuilder alloc] init];
}
+ (CRecorderPbBuilder*) builderWithPrototype:(CRecorderPb*) prototype {
  return [[CRecorderPb builder] mergeFrom:prototype];
}
- (CRecorderPbBuilder*) builder {
  return [CRecorderPb builder];
}
- (CRecorderPbBuilder*) toBuilder {
  return [CRecorderPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasVoiceLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voiceLength", [NSNumber numberWithInteger:self.voiceLength]];
  }
  if (self.hasCreatedBy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdBy", [NSNumber numberWithLongLong:self.createdBy]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"file", self.file];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasExtendId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extendId", [NSNumber numberWithLongLong:self.extendId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasVoiceLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.voiceLength] forKey: @"voiceLength"];
  }
  if (self.hasCreatedBy) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdBy] forKey: @"createdBy"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasFile) {
    [dictionary setObject: self.file forKey: @"file"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasExtendId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.extendId] forKey: @"extendId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CRecorderPb class]]) {
    return NO;
  }
  CRecorderPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasVoiceLength == otherMessage.hasVoiceLength &&
      (!self.hasVoiceLength || self.voiceLength == otherMessage.voiceLength) &&
      self.hasCreatedBy == otherMessage.hasCreatedBy &&
      (!self.hasCreatedBy || self.createdBy == otherMessage.createdBy) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasFile == otherMessage.hasFile &&
      (!self.hasFile || [self.file isEqual:otherMessage.file]) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasExtendId == otherMessage.hasExtendId &&
      (!self.hasExtendId || self.extendId == otherMessage.extendId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasVoiceLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.voiceLength] hash];
  }
  if (self.hasCreatedBy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdBy] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasFile) {
    hashCode = hashCode * 31 + [self.file hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasExtendId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.extendId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CRecorderPbBuilder()
@property (strong) CRecorderPb* resultCrecorderPb;
@end

@implementation CRecorderPbBuilder
@synthesize resultCrecorderPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCrecorderPb = [[CRecorderPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCrecorderPb;
}
- (CRecorderPbBuilder*) clear {
  self.resultCrecorderPb = [[CRecorderPb alloc] init];
  return self;
}
- (CRecorderPbBuilder*) clone {
  return [CRecorderPb builderWithPrototype:resultCrecorderPb];
}
- (CRecorderPb*) defaultInstance {
  return [CRecorderPb defaultInstance];
}
- (CRecorderPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CRecorderPb*) buildPartial {
  CRecorderPb* returnMe = resultCrecorderPb;
  self.resultCrecorderPb = nil;
  return returnMe;
}
- (CRecorderPbBuilder*) mergeFrom:(CRecorderPb*) other {
  if (other == [CRecorderPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasVoiceLength) {
    [self setVoiceLength:other.voiceLength];
  }
  if (other.hasCreatedBy) {
    [self setCreatedBy:other.createdBy];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasFile) {
    [self setFile:other.file];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasExtendId) {
    [self setExtendId:other.extendId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CRecorderPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CRecorderPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 24: {
        [self setType:[input readInt32]];
        break;
      }
      case 34: {
        [self setMessage:[input readString]];
        break;
      }
      case 40: {
        [self setVoiceLength:[input readInt32]];
        break;
      }
      case 48: {
        [self setCreatedBy:[input readInt64]];
        break;
      }
      case 56: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 64: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 74: {
        [self setFile:[input readData]];
        break;
      }
      case 82: {
        [self setUuid:[input readString]];
        break;
      }
      case 88: {
        [self setExtendId:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultCrecorderPb.hasId;
}
- (SInt64) id {
  return resultCrecorderPb.id;
}
- (CRecorderPbBuilder*) setId:(SInt64) value {
  resultCrecorderPb.hasId = YES;
  resultCrecorderPb.id = value;
  return self;
}
- (CRecorderPbBuilder*) clearId {
  resultCrecorderPb.hasId = NO;
  resultCrecorderPb.id = 0L;
  return self;
}
- (BOOL) hasSessionId {
  return resultCrecorderPb.hasSessionId;
}
- (SInt64) sessionId {
  return resultCrecorderPb.sessionId;
}
- (CRecorderPbBuilder*) setSessionId:(SInt64) value {
  resultCrecorderPb.hasSessionId = YES;
  resultCrecorderPb.sessionId = value;
  return self;
}
- (CRecorderPbBuilder*) clearSessionId {
  resultCrecorderPb.hasSessionId = NO;
  resultCrecorderPb.sessionId = 0L;
  return self;
}
- (BOOL) hasType {
  return resultCrecorderPb.hasType;
}
- (SInt32) type {
  return resultCrecorderPb.type;
}
- (CRecorderPbBuilder*) setType:(SInt32) value {
  resultCrecorderPb.hasType = YES;
  resultCrecorderPb.type = value;
  return self;
}
- (CRecorderPbBuilder*) clearType {
  resultCrecorderPb.hasType = NO;
  resultCrecorderPb.type = 0;
  return self;
}
- (BOOL) hasMessage {
  return resultCrecorderPb.hasMessage;
}
- (NSString*) message {
  return resultCrecorderPb.message;
}
- (CRecorderPbBuilder*) setMessage:(NSString*) value {
  resultCrecorderPb.hasMessage = YES;
  resultCrecorderPb.message = value;
  return self;
}
- (CRecorderPbBuilder*) clearMessage {
  resultCrecorderPb.hasMessage = NO;
  resultCrecorderPb.message = @"";
  return self;
}
- (BOOL) hasVoiceLength {
  return resultCrecorderPb.hasVoiceLength;
}
- (SInt32) voiceLength {
  return resultCrecorderPb.voiceLength;
}
- (CRecorderPbBuilder*) setVoiceLength:(SInt32) value {
  resultCrecorderPb.hasVoiceLength = YES;
  resultCrecorderPb.voiceLength = value;
  return self;
}
- (CRecorderPbBuilder*) clearVoiceLength {
  resultCrecorderPb.hasVoiceLength = NO;
  resultCrecorderPb.voiceLength = 0;
  return self;
}
- (BOOL) hasCreatedBy {
  return resultCrecorderPb.hasCreatedBy;
}
- (SInt64) createdBy {
  return resultCrecorderPb.createdBy;
}
- (CRecorderPbBuilder*) setCreatedBy:(SInt64) value {
  resultCrecorderPb.hasCreatedBy = YES;
  resultCrecorderPb.createdBy = value;
  return self;
}
- (CRecorderPbBuilder*) clearCreatedBy {
  resultCrecorderPb.hasCreatedBy = NO;
  resultCrecorderPb.createdBy = 0L;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultCrecorderPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultCrecorderPb.createdDate;
}
- (CRecorderPbBuilder*) setCreatedDate:(SInt64) value {
  resultCrecorderPb.hasCreatedDate = YES;
  resultCrecorderPb.createdDate = value;
  return self;
}
- (CRecorderPbBuilder*) clearCreatedDate {
  resultCrecorderPb.hasCreatedDate = NO;
  resultCrecorderPb.createdDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultCrecorderPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultCrecorderPb.timestamp;
}
- (CRecorderPbBuilder*) setTimestamp:(SInt64) value {
  resultCrecorderPb.hasTimestamp = YES;
  resultCrecorderPb.timestamp = value;
  return self;
}
- (CRecorderPbBuilder*) clearTimestamp {
  resultCrecorderPb.hasTimestamp = NO;
  resultCrecorderPb.timestamp = 0L;
  return self;
}
- (BOOL) hasFile {
  return resultCrecorderPb.hasFile;
}
- (NSData*) file {
  return resultCrecorderPb.file;
}
- (CRecorderPbBuilder*) setFile:(NSData*) value {
  resultCrecorderPb.hasFile = YES;
  resultCrecorderPb.file = value;
  return self;
}
- (CRecorderPbBuilder*) clearFile {
  resultCrecorderPb.hasFile = NO;
  resultCrecorderPb.file = [NSData data];
  return self;
}
- (BOOL) hasUuid {
  return resultCrecorderPb.hasUuid;
}
- (NSString*) uuid {
  return resultCrecorderPb.uuid;
}
- (CRecorderPbBuilder*) setUuid:(NSString*) value {
  resultCrecorderPb.hasUuid = YES;
  resultCrecorderPb.uuid = value;
  return self;
}
- (CRecorderPbBuilder*) clearUuid {
  resultCrecorderPb.hasUuid = NO;
  resultCrecorderPb.uuid = @"";
  return self;
}
- (BOOL) hasExtendId {
  return resultCrecorderPb.hasExtendId;
}
- (SInt64) extendId {
  return resultCrecorderPb.extendId;
}
- (CRecorderPbBuilder*) setExtendId:(SInt64) value {
  resultCrecorderPb.hasExtendId = YES;
  resultCrecorderPb.extendId = value;
  return self;
}
- (CRecorderPbBuilder*) clearExtendId {
  resultCrecorderPb.hasExtendId = NO;
  resultCrecorderPb.extendId = 0L;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
