// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Login.pb.h"
// @@protoc_insertion_point(imports)

@implementation LoginRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [LoginRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [PhoneInfoRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface LoginPb ()
@property (strong) NSString* loginName;
@property (strong) NSString* password;
@property (strong) NSString* token;
@property (strong) PhoneInfoPb* phoneInfo;
@end

@implementation LoginPb

- (BOOL) hasLoginName {
  return !!hasLoginName_;
}
- (void) setHasLoginName:(BOOL) _value_ {
  hasLoginName_ = !!_value_;
}
@synthesize loginName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) _value_ {
  hasToken_ = !!_value_;
}
@synthesize token;
- (BOOL) hasPhoneInfo {
  return !!hasPhoneInfo_;
}
- (void) setHasPhoneInfo:(BOOL) _value_ {
  hasPhoneInfo_ = !!_value_;
}
@synthesize phoneInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.loginName = @"";
    self.password = @"";
    self.token = @"";
    self.phoneInfo = [PhoneInfoPb defaultInstance];
  }
  return self;
}
static LoginPb* defaultLoginPbInstance = nil;
+ (void) initialize {
  if (self == [LoginPb class]) {
    defaultLoginPbInstance = [[LoginPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLoginPbInstance;
}
- (instancetype) defaultInstance {
  return defaultLoginPbInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLoginName) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLoginName) {
    [output writeString:1 value:self.loginName];
  }
  if (self.hasPassword) {
    [output writeString:2 value:self.password];
  }
  if (self.hasToken) {
    [output writeString:3 value:self.token];
  }
  if (self.hasPhoneInfo) {
    [output writeMessage:4 value:self.phoneInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLoginName) {
    size_ += computeStringSize(1, self.loginName);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(2, self.password);
  }
  if (self.hasToken) {
    size_ += computeStringSize(3, self.token);
  }
  if (self.hasPhoneInfo) {
    size_ += computeMessageSize(4, self.phoneInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LoginPb*) parseFromData:(NSData*) data {
  return (LoginPb*)[[[LoginPb builder] mergeFromData:data] build];
}
+ (LoginPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginPb*)[[[LoginPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginPb*) parseFromInputStream:(NSInputStream*) input {
  return (LoginPb*)[[[LoginPb builder] mergeFromInputStream:input] build];
}
+ (LoginPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginPb*)[[[LoginPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginPb*)[[[LoginPb builder] mergeFromCodedInputStream:input] build];
}
+ (LoginPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginPb*)[[[LoginPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginPbBuilder*) builder {
  return [[LoginPbBuilder alloc] init];
}
+ (LoginPbBuilder*) builderWithPrototype:(LoginPb*) prototype {
  return [[LoginPb builder] mergeFrom:prototype];
}
- (LoginPbBuilder*) builder {
  return [LoginPb builder];
}
- (LoginPbBuilder*) toBuilder {
  return [LoginPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLoginName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginName", self.loginName];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  if (self.hasPhoneInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"phoneInfo"];
    [self.phoneInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLoginName) {
    [dictionary setObject: self.loginName forKey: @"loginName"];
  }
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  if (self.hasToken) {
    [dictionary setObject: self.token forKey: @"token"];
  }
  if (self.hasPhoneInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.phoneInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"phoneInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginPb class]]) {
    return NO;
  }
  LoginPb *otherMessage = other;
  return
      self.hasLoginName == otherMessage.hasLoginName &&
      (!self.hasLoginName || [self.loginName isEqual:otherMessage.loginName]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      self.hasPhoneInfo == otherMessage.hasPhoneInfo &&
      (!self.hasPhoneInfo || [self.phoneInfo isEqual:otherMessage.phoneInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLoginName) {
    hashCode = hashCode * 31 + [self.loginName hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  if (self.hasPhoneInfo) {
    hashCode = hashCode * 31 + [self.phoneInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LoginPbBuilder()
@property (strong) LoginPb* resultLoginPb;
@end

@implementation LoginPbBuilder
@synthesize resultLoginPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginPb = [[LoginPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginPb;
}
- (LoginPbBuilder*) clear {
  self.resultLoginPb = [[LoginPb alloc] init];
  return self;
}
- (LoginPbBuilder*) clone {
  return [LoginPb builderWithPrototype:resultLoginPb];
}
- (LoginPb*) defaultInstance {
  return [LoginPb defaultInstance];
}
- (LoginPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginPb*) buildPartial {
  LoginPb* returnMe = resultLoginPb;
  self.resultLoginPb = nil;
  return returnMe;
}
- (LoginPbBuilder*) mergeFrom:(LoginPb*) other {
  if (other == [LoginPb defaultInstance]) {
    return self;
  }
  if (other.hasLoginName) {
    [self setLoginName:other.loginName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  if (other.hasPhoneInfo) {
    [self mergePhoneInfo:other.phoneInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setLoginName:[input readString]];
        break;
      }
      case 18: {
        [self setPassword:[input readString]];
        break;
      }
      case 26: {
        [self setToken:[input readString]];
        break;
      }
      case 34: {
        PhoneInfoPbBuilder* subBuilder = [PhoneInfoPb builder];
        if (self.hasPhoneInfo) {
          [subBuilder mergeFrom:self.phoneInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPhoneInfo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLoginName {
  return resultLoginPb.hasLoginName;
}
- (NSString*) loginName {
  return resultLoginPb.loginName;
}
- (LoginPbBuilder*) setLoginName:(NSString*) value {
  resultLoginPb.hasLoginName = YES;
  resultLoginPb.loginName = value;
  return self;
}
- (LoginPbBuilder*) clearLoginName {
  resultLoginPb.hasLoginName = NO;
  resultLoginPb.loginName = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultLoginPb.hasPassword;
}
- (NSString*) password {
  return resultLoginPb.password;
}
- (LoginPbBuilder*) setPassword:(NSString*) value {
  resultLoginPb.hasPassword = YES;
  resultLoginPb.password = value;
  return self;
}
- (LoginPbBuilder*) clearPassword {
  resultLoginPb.hasPassword = NO;
  resultLoginPb.password = @"";
  return self;
}
- (BOOL) hasToken {
  return resultLoginPb.hasToken;
}
- (NSString*) token {
  return resultLoginPb.token;
}
- (LoginPbBuilder*) setToken:(NSString*) value {
  resultLoginPb.hasToken = YES;
  resultLoginPb.token = value;
  return self;
}
- (LoginPbBuilder*) clearToken {
  resultLoginPb.hasToken = NO;
  resultLoginPb.token = @"";
  return self;
}
- (BOOL) hasPhoneInfo {
  return resultLoginPb.hasPhoneInfo;
}
- (PhoneInfoPb*) phoneInfo {
  return resultLoginPb.phoneInfo;
}
- (LoginPbBuilder*) setPhoneInfo:(PhoneInfoPb*) value {
  resultLoginPb.hasPhoneInfo = YES;
  resultLoginPb.phoneInfo = value;
  return self;
}
- (LoginPbBuilder*) setPhoneInfoBuilder:(PhoneInfoPbBuilder*) builderForValue {
  return [self setPhoneInfo:[builderForValue build]];
}
- (LoginPbBuilder*) mergePhoneInfo:(PhoneInfoPb*) value {
  if (resultLoginPb.hasPhoneInfo &&
      resultLoginPb.phoneInfo != [PhoneInfoPb defaultInstance]) {
    resultLoginPb.phoneInfo =
      [[[PhoneInfoPb builderWithPrototype:resultLoginPb.phoneInfo] mergeFrom:value] buildPartial];
  } else {
    resultLoginPb.phoneInfo = value;
  }
  resultLoginPb.hasPhoneInfo = YES;
  return self;
}
- (LoginPbBuilder*) clearPhoneInfo {
  resultLoginPb.hasPhoneInfo = NO;
  resultLoginPb.phoneInfo = [PhoneInfoPb defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
