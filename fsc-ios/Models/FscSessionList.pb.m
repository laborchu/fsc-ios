// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscSessionList.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscSessionListRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscSessionListRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FscSessionRoot registerAllExtensions:registry];
    [FscChatUserRoot registerAllExtensions:registry];
    [FscChatGroupRoot registerAllExtensions:registry];
    [FscChatPublicRoot registerAllExtensions:registry];
    [FscChatClassRoot registerAllExtensions:registry];
    [FscChatTrgRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FscSessionPbList ()
@property (strong) NSMutableArray * messagePbArray;
@property (strong) NSMutableArray * userSessionPbArray;
@property (strong) NSMutableArray * userRecorderPbArray;
@property (strong) NSMutableArray * groupSessionPbArray;
@property (strong) NSMutableArray * groupRecorderPbArray;
@property (strong) NSMutableArray * groupUserPbArray;
@property (strong) NSMutableArray * publicUserPbArray;
@property (strong) NSMutableArray * publicSessionPbArray;
@property (strong) NSMutableArray * publicRecorderPbArray;
@property (strong) NSMutableArray * classUserPbArray;
@property (strong) NSMutableArray * classSessionPbArray;
@property (strong) NSMutableArray * classRecorderPbArray;
@property (strong) NSMutableArray * trgUserPbArray;
@property (strong) NSMutableArray * trgSessionPbArray;
@property (strong) NSMutableArray * trgRecorderPbArray;
@end

@implementation FscSessionPbList

@synthesize messagePbArray;
@dynamic messagePb;
@synthesize userSessionPbArray;
@dynamic userSessionPb;
@synthesize userRecorderPbArray;
@dynamic userRecorderPb;
@synthesize groupSessionPbArray;
@dynamic groupSessionPb;
@synthesize groupRecorderPbArray;
@dynamic groupRecorderPb;
@synthesize groupUserPbArray;
@dynamic groupUserPb;
@synthesize publicUserPbArray;
@dynamic publicUserPb;
@synthesize publicSessionPbArray;
@dynamic publicSessionPb;
@synthesize publicRecorderPbArray;
@dynamic publicRecorderPb;
@synthesize classUserPbArray;
@dynamic classUserPb;
@synthesize classSessionPbArray;
@dynamic classSessionPb;
@synthesize classRecorderPbArray;
@dynamic classRecorderPb;
@synthesize trgUserPbArray;
@dynamic trgUserPb;
@synthesize trgSessionPbArray;
@dynamic trgSessionPb;
@synthesize trgRecorderPbArray;
@dynamic trgRecorderPb;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static FscSessionPbList* defaultFscSessionPbListInstance = nil;
+ (void) initialize {
  if (self == [FscSessionPbList class]) {
    defaultFscSessionPbListInstance = [[FscSessionPbList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscSessionPbListInstance;
}
- (instancetype) defaultInstance {
  return defaultFscSessionPbListInstance;
}
- (NSArray *)messagePb {
  return messagePbArray;
}
- (FscSessionPb*)messagePbAtIndex:(NSUInteger)index {
  return [messagePbArray objectAtIndex:index];
}
- (NSArray *)userSessionPb {
  return userSessionPbArray;
}
- (USessionPb*)userSessionPbAtIndex:(NSUInteger)index {
  return [userSessionPbArray objectAtIndex:index];
}
- (NSArray *)userRecorderPb {
  return userRecorderPbArray;
}
- (URecorderPb*)userRecorderPbAtIndex:(NSUInteger)index {
  return [userRecorderPbArray objectAtIndex:index];
}
- (NSArray *)groupSessionPb {
  return groupSessionPbArray;
}
- (GSessionPb*)groupSessionPbAtIndex:(NSUInteger)index {
  return [groupSessionPbArray objectAtIndex:index];
}
- (NSArray *)groupRecorderPb {
  return groupRecorderPbArray;
}
- (GRecorderPb*)groupRecorderPbAtIndex:(NSUInteger)index {
  return [groupRecorderPbArray objectAtIndex:index];
}
- (NSArray *)groupUserPb {
  return groupUserPbArray;
}
- (GUserPb*)groupUserPbAtIndex:(NSUInteger)index {
  return [groupUserPbArray objectAtIndex:index];
}
- (NSArray *)publicUserPb {
  return publicUserPbArray;
}
- (PUserPb*)publicUserPbAtIndex:(NSUInteger)index {
  return [publicUserPbArray objectAtIndex:index];
}
- (NSArray *)publicSessionPb {
  return publicSessionPbArray;
}
- (PSessionPb*)publicSessionPbAtIndex:(NSUInteger)index {
  return [publicSessionPbArray objectAtIndex:index];
}
- (NSArray *)publicRecorderPb {
  return publicRecorderPbArray;
}
- (PRecorderPb*)publicRecorderPbAtIndex:(NSUInteger)index {
  return [publicRecorderPbArray objectAtIndex:index];
}
- (NSArray *)classUserPb {
  return classUserPbArray;
}
- (CUserPb*)classUserPbAtIndex:(NSUInteger)index {
  return [classUserPbArray objectAtIndex:index];
}
- (NSArray *)classSessionPb {
  return classSessionPbArray;
}
- (CSessionPb*)classSessionPbAtIndex:(NSUInteger)index {
  return [classSessionPbArray objectAtIndex:index];
}
- (NSArray *)classRecorderPb {
  return classRecorderPbArray;
}
- (CRecorderPb*)classRecorderPbAtIndex:(NSUInteger)index {
  return [classRecorderPbArray objectAtIndex:index];
}
- (NSArray *)trgUserPb {
  return trgUserPbArray;
}
- (TUserPb*)trgUserPbAtIndex:(NSUInteger)index {
  return [trgUserPbArray objectAtIndex:index];
}
- (NSArray *)trgSessionPb {
  return trgSessionPbArray;
}
- (TSessionPb*)trgSessionPbAtIndex:(NSUInteger)index {
  return [trgSessionPbArray objectAtIndex:index];
}
- (NSArray *)trgRecorderPb {
  return trgRecorderPbArray;
}
- (TRecorderPb*)trgRecorderPbAtIndex:(NSUInteger)index {
  return [trgRecorderPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.messagePbArray enumerateObjectsUsingBlock:^(FscSessionPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.userSessionPbArray enumerateObjectsUsingBlock:^(USessionPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.userRecorderPbArray enumerateObjectsUsingBlock:^(URecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.groupSessionPbArray enumerateObjectsUsingBlock:^(GSessionPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.groupRecorderPbArray enumerateObjectsUsingBlock:^(GRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.groupUserPbArray enumerateObjectsUsingBlock:^(GUserPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  [self.publicUserPbArray enumerateObjectsUsingBlock:^(PUserPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.publicSessionPbArray enumerateObjectsUsingBlock:^(PSessionPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  [self.publicRecorderPbArray enumerateObjectsUsingBlock:^(PRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.classUserPbArray enumerateObjectsUsingBlock:^(CUserPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  [self.classSessionPbArray enumerateObjectsUsingBlock:^(CSessionPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.classRecorderPbArray enumerateObjectsUsingBlock:^(CRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  [self.trgUserPbArray enumerateObjectsUsingBlock:^(TUserPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:13 value:element];
  }];
  [self.trgSessionPbArray enumerateObjectsUsingBlock:^(TSessionPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:14 value:element];
  }];
  [self.trgRecorderPbArray enumerateObjectsUsingBlock:^(TRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:15 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.messagePbArray enumerateObjectsUsingBlock:^(FscSessionPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  [self.userSessionPbArray enumerateObjectsUsingBlock:^(USessionPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.userRecorderPbArray enumerateObjectsUsingBlock:^(URecorderPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  [self.groupSessionPbArray enumerateObjectsUsingBlock:^(GSessionPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  [self.groupRecorderPbArray enumerateObjectsUsingBlock:^(GRecorderPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  [self.groupUserPbArray enumerateObjectsUsingBlock:^(GUserPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  [self.publicUserPbArray enumerateObjectsUsingBlock:^(PUserPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  [self.publicSessionPbArray enumerateObjectsUsingBlock:^(PSessionPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  [self.publicRecorderPbArray enumerateObjectsUsingBlock:^(PRecorderPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  [self.classUserPbArray enumerateObjectsUsingBlock:^(CUserPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  [self.classSessionPbArray enumerateObjectsUsingBlock:^(CSessionPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  [self.classRecorderPbArray enumerateObjectsUsingBlock:^(CRecorderPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  [self.trgUserPbArray enumerateObjectsUsingBlock:^(TUserPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(13, element);
  }];
  [self.trgSessionPbArray enumerateObjectsUsingBlock:^(TSessionPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(14, element);
  }];
  [self.trgRecorderPbArray enumerateObjectsUsingBlock:^(TRecorderPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(15, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscSessionPbList*) parseFromData:(NSData*) data {
  return (FscSessionPbList*)[[[FscSessionPbList builder] mergeFromData:data] build];
}
+ (FscSessionPbList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscSessionPbList*)[[[FscSessionPbList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscSessionPbList*) parseFromInputStream:(NSInputStream*) input {
  return (FscSessionPbList*)[[[FscSessionPbList builder] mergeFromInputStream:input] build];
}
+ (FscSessionPbList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscSessionPbList*)[[[FscSessionPbList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscSessionPbList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscSessionPbList*)[[[FscSessionPbList builder] mergeFromCodedInputStream:input] build];
}
+ (FscSessionPbList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscSessionPbList*)[[[FscSessionPbList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscSessionPbListBuilder*) builder {
  return [[FscSessionPbListBuilder alloc] init];
}
+ (FscSessionPbListBuilder*) builderWithPrototype:(FscSessionPbList*) prototype {
  return [[FscSessionPbList builder] mergeFrom:prototype];
}
- (FscSessionPbListBuilder*) builder {
  return [FscSessionPbList builder];
}
- (FscSessionPbListBuilder*) toBuilder {
  return [FscSessionPbList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.messagePbArray enumerateObjectsUsingBlock:^(FscSessionPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"messagePb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.userSessionPbArray enumerateObjectsUsingBlock:^(USessionPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userSessionPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.userRecorderPbArray enumerateObjectsUsingBlock:^(URecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userRecorderPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.groupSessionPbArray enumerateObjectsUsingBlock:^(GSessionPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupSessionPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.groupRecorderPbArray enumerateObjectsUsingBlock:^(GRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupRecorderPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.groupUserPbArray enumerateObjectsUsingBlock:^(GUserPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupUserPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.publicUserPbArray enumerateObjectsUsingBlock:^(PUserPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"publicUserPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.publicSessionPbArray enumerateObjectsUsingBlock:^(PSessionPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"publicSessionPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.publicRecorderPbArray enumerateObjectsUsingBlock:^(PRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"publicRecorderPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.classUserPbArray enumerateObjectsUsingBlock:^(CUserPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"classUserPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.classSessionPbArray enumerateObjectsUsingBlock:^(CSessionPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"classSessionPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.classRecorderPbArray enumerateObjectsUsingBlock:^(CRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"classRecorderPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.trgUserPbArray enumerateObjectsUsingBlock:^(TUserPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"trgUserPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.trgSessionPbArray enumerateObjectsUsingBlock:^(TSessionPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"trgSessionPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.trgRecorderPbArray enumerateObjectsUsingBlock:^(TRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"trgRecorderPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (FscSessionPb* element in self.messagePbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"messagePb"];
  }
  for (USessionPb* element in self.userSessionPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userSessionPb"];
  }
  for (URecorderPb* element in self.userRecorderPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userRecorderPb"];
  }
  for (GSessionPb* element in self.groupSessionPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"groupSessionPb"];
  }
  for (GRecorderPb* element in self.groupRecorderPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"groupRecorderPb"];
  }
  for (GUserPb* element in self.groupUserPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"groupUserPb"];
  }
  for (PUserPb* element in self.publicUserPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"publicUserPb"];
  }
  for (PSessionPb* element in self.publicSessionPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"publicSessionPb"];
  }
  for (PRecorderPb* element in self.publicRecorderPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"publicRecorderPb"];
  }
  for (CUserPb* element in self.classUserPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"classUserPb"];
  }
  for (CSessionPb* element in self.classSessionPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"classSessionPb"];
  }
  for (CRecorderPb* element in self.classRecorderPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"classRecorderPb"];
  }
  for (TUserPb* element in self.trgUserPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"trgUserPb"];
  }
  for (TSessionPb* element in self.trgSessionPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"trgSessionPb"];
  }
  for (TRecorderPb* element in self.trgRecorderPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"trgRecorderPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscSessionPbList class]]) {
    return NO;
  }
  FscSessionPbList *otherMessage = other;
  return
      [self.messagePbArray isEqualToArray:otherMessage.messagePbArray] &&
      [self.userSessionPbArray isEqualToArray:otherMessage.userSessionPbArray] &&
      [self.userRecorderPbArray isEqualToArray:otherMessage.userRecorderPbArray] &&
      [self.groupSessionPbArray isEqualToArray:otherMessage.groupSessionPbArray] &&
      [self.groupRecorderPbArray isEqualToArray:otherMessage.groupRecorderPbArray] &&
      [self.groupUserPbArray isEqualToArray:otherMessage.groupUserPbArray] &&
      [self.publicUserPbArray isEqualToArray:otherMessage.publicUserPbArray] &&
      [self.publicSessionPbArray isEqualToArray:otherMessage.publicSessionPbArray] &&
      [self.publicRecorderPbArray isEqualToArray:otherMessage.publicRecorderPbArray] &&
      [self.classUserPbArray isEqualToArray:otherMessage.classUserPbArray] &&
      [self.classSessionPbArray isEqualToArray:otherMessage.classSessionPbArray] &&
      [self.classRecorderPbArray isEqualToArray:otherMessage.classRecorderPbArray] &&
      [self.trgUserPbArray isEqualToArray:otherMessage.trgUserPbArray] &&
      [self.trgSessionPbArray isEqualToArray:otherMessage.trgSessionPbArray] &&
      [self.trgRecorderPbArray isEqualToArray:otherMessage.trgRecorderPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.messagePbArray enumerateObjectsUsingBlock:^(FscSessionPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.userSessionPbArray enumerateObjectsUsingBlock:^(USessionPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.userRecorderPbArray enumerateObjectsUsingBlock:^(URecorderPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.groupSessionPbArray enumerateObjectsUsingBlock:^(GSessionPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.groupRecorderPbArray enumerateObjectsUsingBlock:^(GRecorderPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.groupUserPbArray enumerateObjectsUsingBlock:^(GUserPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.publicUserPbArray enumerateObjectsUsingBlock:^(PUserPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.publicSessionPbArray enumerateObjectsUsingBlock:^(PSessionPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.publicRecorderPbArray enumerateObjectsUsingBlock:^(PRecorderPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.classUserPbArray enumerateObjectsUsingBlock:^(CUserPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.classSessionPbArray enumerateObjectsUsingBlock:^(CSessionPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.classRecorderPbArray enumerateObjectsUsingBlock:^(CRecorderPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.trgUserPbArray enumerateObjectsUsingBlock:^(TUserPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.trgSessionPbArray enumerateObjectsUsingBlock:^(TSessionPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.trgRecorderPbArray enumerateObjectsUsingBlock:^(TRecorderPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscSessionPbListBuilder()
@property (strong) FscSessionPbList* resultFscSessionPbList;
@end

@implementation FscSessionPbListBuilder
@synthesize resultFscSessionPbList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscSessionPbList = [[FscSessionPbList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscSessionPbList;
}
- (FscSessionPbListBuilder*) clear {
  self.resultFscSessionPbList = [[FscSessionPbList alloc] init];
  return self;
}
- (FscSessionPbListBuilder*) clone {
  return [FscSessionPbList builderWithPrototype:resultFscSessionPbList];
}
- (FscSessionPbList*) defaultInstance {
  return [FscSessionPbList defaultInstance];
}
- (FscSessionPbList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscSessionPbList*) buildPartial {
  FscSessionPbList* returnMe = resultFscSessionPbList;
  self.resultFscSessionPbList = nil;
  return returnMe;
}
- (FscSessionPbListBuilder*) mergeFrom:(FscSessionPbList*) other {
  if (other == [FscSessionPbList defaultInstance]) {
    return self;
  }
  if (other.messagePbArray.count > 0) {
    if (resultFscSessionPbList.messagePbArray == nil) {
      resultFscSessionPbList.messagePbArray = [[NSMutableArray alloc] initWithArray:other.messagePbArray];
    } else {
      [resultFscSessionPbList.messagePbArray addObjectsFromArray:other.messagePbArray];
    }
  }
  if (other.userSessionPbArray.count > 0) {
    if (resultFscSessionPbList.userSessionPbArray == nil) {
      resultFscSessionPbList.userSessionPbArray = [[NSMutableArray alloc] initWithArray:other.userSessionPbArray];
    } else {
      [resultFscSessionPbList.userSessionPbArray addObjectsFromArray:other.userSessionPbArray];
    }
  }
  if (other.userRecorderPbArray.count > 0) {
    if (resultFscSessionPbList.userRecorderPbArray == nil) {
      resultFscSessionPbList.userRecorderPbArray = [[NSMutableArray alloc] initWithArray:other.userRecorderPbArray];
    } else {
      [resultFscSessionPbList.userRecorderPbArray addObjectsFromArray:other.userRecorderPbArray];
    }
  }
  if (other.groupSessionPbArray.count > 0) {
    if (resultFscSessionPbList.groupSessionPbArray == nil) {
      resultFscSessionPbList.groupSessionPbArray = [[NSMutableArray alloc] initWithArray:other.groupSessionPbArray];
    } else {
      [resultFscSessionPbList.groupSessionPbArray addObjectsFromArray:other.groupSessionPbArray];
    }
  }
  if (other.groupRecorderPbArray.count > 0) {
    if (resultFscSessionPbList.groupRecorderPbArray == nil) {
      resultFscSessionPbList.groupRecorderPbArray = [[NSMutableArray alloc] initWithArray:other.groupRecorderPbArray];
    } else {
      [resultFscSessionPbList.groupRecorderPbArray addObjectsFromArray:other.groupRecorderPbArray];
    }
  }
  if (other.groupUserPbArray.count > 0) {
    if (resultFscSessionPbList.groupUserPbArray == nil) {
      resultFscSessionPbList.groupUserPbArray = [[NSMutableArray alloc] initWithArray:other.groupUserPbArray];
    } else {
      [resultFscSessionPbList.groupUserPbArray addObjectsFromArray:other.groupUserPbArray];
    }
  }
  if (other.publicUserPbArray.count > 0) {
    if (resultFscSessionPbList.publicUserPbArray == nil) {
      resultFscSessionPbList.publicUserPbArray = [[NSMutableArray alloc] initWithArray:other.publicUserPbArray];
    } else {
      [resultFscSessionPbList.publicUserPbArray addObjectsFromArray:other.publicUserPbArray];
    }
  }
  if (other.publicSessionPbArray.count > 0) {
    if (resultFscSessionPbList.publicSessionPbArray == nil) {
      resultFscSessionPbList.publicSessionPbArray = [[NSMutableArray alloc] initWithArray:other.publicSessionPbArray];
    } else {
      [resultFscSessionPbList.publicSessionPbArray addObjectsFromArray:other.publicSessionPbArray];
    }
  }
  if (other.publicRecorderPbArray.count > 0) {
    if (resultFscSessionPbList.publicRecorderPbArray == nil) {
      resultFscSessionPbList.publicRecorderPbArray = [[NSMutableArray alloc] initWithArray:other.publicRecorderPbArray];
    } else {
      [resultFscSessionPbList.publicRecorderPbArray addObjectsFromArray:other.publicRecorderPbArray];
    }
  }
  if (other.classUserPbArray.count > 0) {
    if (resultFscSessionPbList.classUserPbArray == nil) {
      resultFscSessionPbList.classUserPbArray = [[NSMutableArray alloc] initWithArray:other.classUserPbArray];
    } else {
      [resultFscSessionPbList.classUserPbArray addObjectsFromArray:other.classUserPbArray];
    }
  }
  if (other.classSessionPbArray.count > 0) {
    if (resultFscSessionPbList.classSessionPbArray == nil) {
      resultFscSessionPbList.classSessionPbArray = [[NSMutableArray alloc] initWithArray:other.classSessionPbArray];
    } else {
      [resultFscSessionPbList.classSessionPbArray addObjectsFromArray:other.classSessionPbArray];
    }
  }
  if (other.classRecorderPbArray.count > 0) {
    if (resultFscSessionPbList.classRecorderPbArray == nil) {
      resultFscSessionPbList.classRecorderPbArray = [[NSMutableArray alloc] initWithArray:other.classRecorderPbArray];
    } else {
      [resultFscSessionPbList.classRecorderPbArray addObjectsFromArray:other.classRecorderPbArray];
    }
  }
  if (other.trgUserPbArray.count > 0) {
    if (resultFscSessionPbList.trgUserPbArray == nil) {
      resultFscSessionPbList.trgUserPbArray = [[NSMutableArray alloc] initWithArray:other.trgUserPbArray];
    } else {
      [resultFscSessionPbList.trgUserPbArray addObjectsFromArray:other.trgUserPbArray];
    }
  }
  if (other.trgSessionPbArray.count > 0) {
    if (resultFscSessionPbList.trgSessionPbArray == nil) {
      resultFscSessionPbList.trgSessionPbArray = [[NSMutableArray alloc] initWithArray:other.trgSessionPbArray];
    } else {
      [resultFscSessionPbList.trgSessionPbArray addObjectsFromArray:other.trgSessionPbArray];
    }
  }
  if (other.trgRecorderPbArray.count > 0) {
    if (resultFscSessionPbList.trgRecorderPbArray == nil) {
      resultFscSessionPbList.trgRecorderPbArray = [[NSMutableArray alloc] initWithArray:other.trgRecorderPbArray];
    } else {
      [resultFscSessionPbList.trgRecorderPbArray addObjectsFromArray:other.trgRecorderPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscSessionPbListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscSessionPbListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FscSessionPbBuilder* subBuilder = [FscSessionPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMessagePb:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        USessionPbBuilder* subBuilder = [USessionPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserSessionPb:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        URecorderPbBuilder* subBuilder = [URecorderPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserRecorderPb:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        GSessionPbBuilder* subBuilder = [GSessionPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroupSessionPb:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        GRecorderPbBuilder* subBuilder = [GRecorderPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroupRecorderPb:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        GUserPbBuilder* subBuilder = [GUserPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroupUserPb:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        PUserPbBuilder* subBuilder = [PUserPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPublicUserPb:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        PSessionPbBuilder* subBuilder = [PSessionPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPublicSessionPb:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        PRecorderPbBuilder* subBuilder = [PRecorderPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPublicRecorderPb:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        CUserPbBuilder* subBuilder = [CUserPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClassUserPb:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        CSessionPbBuilder* subBuilder = [CSessionPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClassSessionPb:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        CRecorderPbBuilder* subBuilder = [CRecorderPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClassRecorderPb:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        TUserPbBuilder* subBuilder = [TUserPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTrgUserPb:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        TSessionPbBuilder* subBuilder = [TSessionPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTrgSessionPb:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        TRecorderPbBuilder* subBuilder = [TRecorderPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTrgRecorderPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)messagePb {
  return resultFscSessionPbList.messagePbArray;
}
- (FscSessionPb*)messagePbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList messagePbAtIndex:index];
}
- (FscSessionPbListBuilder *)addMessagePb:(FscSessionPb*)value {
  if (resultFscSessionPbList.messagePbArray == nil) {
    resultFscSessionPbList.messagePbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.messagePbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setMessagePbArray:(NSArray *)array {
  resultFscSessionPbList.messagePbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearMessagePb {
  resultFscSessionPbList.messagePbArray = nil;
  return self;
}
- (NSMutableArray *)userSessionPb {
  return resultFscSessionPbList.userSessionPbArray;
}
- (USessionPb*)userSessionPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList userSessionPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addUserSessionPb:(USessionPb*)value {
  if (resultFscSessionPbList.userSessionPbArray == nil) {
    resultFscSessionPbList.userSessionPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.userSessionPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setUserSessionPbArray:(NSArray *)array {
  resultFscSessionPbList.userSessionPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearUserSessionPb {
  resultFscSessionPbList.userSessionPbArray = nil;
  return self;
}
- (NSMutableArray *)userRecorderPb {
  return resultFscSessionPbList.userRecorderPbArray;
}
- (URecorderPb*)userRecorderPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList userRecorderPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addUserRecorderPb:(URecorderPb*)value {
  if (resultFscSessionPbList.userRecorderPbArray == nil) {
    resultFscSessionPbList.userRecorderPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.userRecorderPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setUserRecorderPbArray:(NSArray *)array {
  resultFscSessionPbList.userRecorderPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearUserRecorderPb {
  resultFscSessionPbList.userRecorderPbArray = nil;
  return self;
}
- (NSMutableArray *)groupSessionPb {
  return resultFscSessionPbList.groupSessionPbArray;
}
- (GSessionPb*)groupSessionPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList groupSessionPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addGroupSessionPb:(GSessionPb*)value {
  if (resultFscSessionPbList.groupSessionPbArray == nil) {
    resultFscSessionPbList.groupSessionPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.groupSessionPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setGroupSessionPbArray:(NSArray *)array {
  resultFscSessionPbList.groupSessionPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearGroupSessionPb {
  resultFscSessionPbList.groupSessionPbArray = nil;
  return self;
}
- (NSMutableArray *)groupRecorderPb {
  return resultFscSessionPbList.groupRecorderPbArray;
}
- (GRecorderPb*)groupRecorderPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList groupRecorderPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addGroupRecorderPb:(GRecorderPb*)value {
  if (resultFscSessionPbList.groupRecorderPbArray == nil) {
    resultFscSessionPbList.groupRecorderPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.groupRecorderPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setGroupRecorderPbArray:(NSArray *)array {
  resultFscSessionPbList.groupRecorderPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearGroupRecorderPb {
  resultFscSessionPbList.groupRecorderPbArray = nil;
  return self;
}
- (NSMutableArray *)groupUserPb {
  return resultFscSessionPbList.groupUserPbArray;
}
- (GUserPb*)groupUserPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList groupUserPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addGroupUserPb:(GUserPb*)value {
  if (resultFscSessionPbList.groupUserPbArray == nil) {
    resultFscSessionPbList.groupUserPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.groupUserPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setGroupUserPbArray:(NSArray *)array {
  resultFscSessionPbList.groupUserPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearGroupUserPb {
  resultFscSessionPbList.groupUserPbArray = nil;
  return self;
}
- (NSMutableArray *)publicUserPb {
  return resultFscSessionPbList.publicUserPbArray;
}
- (PUserPb*)publicUserPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList publicUserPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addPublicUserPb:(PUserPb*)value {
  if (resultFscSessionPbList.publicUserPbArray == nil) {
    resultFscSessionPbList.publicUserPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.publicUserPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setPublicUserPbArray:(NSArray *)array {
  resultFscSessionPbList.publicUserPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearPublicUserPb {
  resultFscSessionPbList.publicUserPbArray = nil;
  return self;
}
- (NSMutableArray *)publicSessionPb {
  return resultFscSessionPbList.publicSessionPbArray;
}
- (PSessionPb*)publicSessionPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList publicSessionPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addPublicSessionPb:(PSessionPb*)value {
  if (resultFscSessionPbList.publicSessionPbArray == nil) {
    resultFscSessionPbList.publicSessionPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.publicSessionPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setPublicSessionPbArray:(NSArray *)array {
  resultFscSessionPbList.publicSessionPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearPublicSessionPb {
  resultFscSessionPbList.publicSessionPbArray = nil;
  return self;
}
- (NSMutableArray *)publicRecorderPb {
  return resultFscSessionPbList.publicRecorderPbArray;
}
- (PRecorderPb*)publicRecorderPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList publicRecorderPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addPublicRecorderPb:(PRecorderPb*)value {
  if (resultFscSessionPbList.publicRecorderPbArray == nil) {
    resultFscSessionPbList.publicRecorderPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.publicRecorderPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setPublicRecorderPbArray:(NSArray *)array {
  resultFscSessionPbList.publicRecorderPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearPublicRecorderPb {
  resultFscSessionPbList.publicRecorderPbArray = nil;
  return self;
}
- (NSMutableArray *)classUserPb {
  return resultFscSessionPbList.classUserPbArray;
}
- (CUserPb*)classUserPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList classUserPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addClassUserPb:(CUserPb*)value {
  if (resultFscSessionPbList.classUserPbArray == nil) {
    resultFscSessionPbList.classUserPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.classUserPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setClassUserPbArray:(NSArray *)array {
  resultFscSessionPbList.classUserPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearClassUserPb {
  resultFscSessionPbList.classUserPbArray = nil;
  return self;
}
- (NSMutableArray *)classSessionPb {
  return resultFscSessionPbList.classSessionPbArray;
}
- (CSessionPb*)classSessionPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList classSessionPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addClassSessionPb:(CSessionPb*)value {
  if (resultFscSessionPbList.classSessionPbArray == nil) {
    resultFscSessionPbList.classSessionPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.classSessionPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setClassSessionPbArray:(NSArray *)array {
  resultFscSessionPbList.classSessionPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearClassSessionPb {
  resultFscSessionPbList.classSessionPbArray = nil;
  return self;
}
- (NSMutableArray *)classRecorderPb {
  return resultFscSessionPbList.classRecorderPbArray;
}
- (CRecorderPb*)classRecorderPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList classRecorderPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addClassRecorderPb:(CRecorderPb*)value {
  if (resultFscSessionPbList.classRecorderPbArray == nil) {
    resultFscSessionPbList.classRecorderPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.classRecorderPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setClassRecorderPbArray:(NSArray *)array {
  resultFscSessionPbList.classRecorderPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearClassRecorderPb {
  resultFscSessionPbList.classRecorderPbArray = nil;
  return self;
}
- (NSMutableArray *)trgUserPb {
  return resultFscSessionPbList.trgUserPbArray;
}
- (TUserPb*)trgUserPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList trgUserPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addTrgUserPb:(TUserPb*)value {
  if (resultFscSessionPbList.trgUserPbArray == nil) {
    resultFscSessionPbList.trgUserPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.trgUserPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setTrgUserPbArray:(NSArray *)array {
  resultFscSessionPbList.trgUserPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearTrgUserPb {
  resultFscSessionPbList.trgUserPbArray = nil;
  return self;
}
- (NSMutableArray *)trgSessionPb {
  return resultFscSessionPbList.trgSessionPbArray;
}
- (TSessionPb*)trgSessionPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList trgSessionPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addTrgSessionPb:(TSessionPb*)value {
  if (resultFscSessionPbList.trgSessionPbArray == nil) {
    resultFscSessionPbList.trgSessionPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.trgSessionPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setTrgSessionPbArray:(NSArray *)array {
  resultFscSessionPbList.trgSessionPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearTrgSessionPb {
  resultFscSessionPbList.trgSessionPbArray = nil;
  return self;
}
- (NSMutableArray *)trgRecorderPb {
  return resultFscSessionPbList.trgRecorderPbArray;
}
- (TRecorderPb*)trgRecorderPbAtIndex:(NSUInteger)index {
  return [resultFscSessionPbList trgRecorderPbAtIndex:index];
}
- (FscSessionPbListBuilder *)addTrgRecorderPb:(TRecorderPb*)value {
  if (resultFscSessionPbList.trgRecorderPbArray == nil) {
    resultFscSessionPbList.trgRecorderPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscSessionPbList.trgRecorderPbArray addObject:value];
  return self;
}
- (FscSessionPbListBuilder *)setTrgRecorderPbArray:(NSArray *)array {
  resultFscSessionPbList.trgRecorderPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscSessionPbListBuilder *)clearTrgRecorderPb {
  resultFscSessionPbList.trgRecorderPbArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
