// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscWork.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscWorkRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscWorkRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FscWorkReqPb ()
@property SInt64 nodeId;
@property SInt64 workId;
@property SInt64 studentId;
@property (strong) NSMutableArray * fscWorkReqImgPbArray;
@end

@implementation FscWorkReqPb

- (BOOL) hasNodeId {
  return !!hasNodeId_;
}
- (void) setHasNodeId:(BOOL) _value_ {
  hasNodeId_ = !!_value_;
}
@synthesize nodeId;
- (BOOL) hasWorkId {
  return !!hasWorkId_;
}
- (void) setHasWorkId:(BOOL) _value_ {
  hasWorkId_ = !!_value_;
}
@synthesize workId;
- (BOOL) hasStudentId {
  return !!hasStudentId_;
}
- (void) setHasStudentId:(BOOL) _value_ {
  hasStudentId_ = !!_value_;
}
@synthesize studentId;
@synthesize fscWorkReqImgPbArray;
@dynamic fscWorkReqImgPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.nodeId = 0L;
    self.workId = 0L;
    self.studentId = 0L;
  }
  return self;
}
static FscWorkReqPb* defaultFscWorkReqPbInstance = nil;
+ (void) initialize {
  if (self == [FscWorkReqPb class]) {
    defaultFscWorkReqPbInstance = [[FscWorkReqPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscWorkReqPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscWorkReqPbInstance;
}
- (NSArray *)fscWorkReqImgPb {
  return fscWorkReqImgPbArray;
}
- (FscWorkReqImgPb*)fscWorkReqImgPbAtIndex:(NSUInteger)index {
  return [fscWorkReqImgPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNodeId) {
    [output writeInt64:1 value:self.nodeId];
  }
  if (self.hasWorkId) {
    [output writeInt64:2 value:self.workId];
  }
  if (self.hasStudentId) {
    [output writeInt64:3 value:self.studentId];
  }
  [self.fscWorkReqImgPbArray enumerateObjectsUsingBlock:^(FscWorkReqImgPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNodeId) {
    size_ += computeInt64Size(1, self.nodeId);
  }
  if (self.hasWorkId) {
    size_ += computeInt64Size(2, self.workId);
  }
  if (self.hasStudentId) {
    size_ += computeInt64Size(3, self.studentId);
  }
  [self.fscWorkReqImgPbArray enumerateObjectsUsingBlock:^(FscWorkReqImgPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscWorkReqPb*) parseFromData:(NSData*) data {
  return (FscWorkReqPb*)[[[FscWorkReqPb builder] mergeFromData:data] build];
}
+ (FscWorkReqPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkReqPb*)[[[FscWorkReqPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscWorkReqPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscWorkReqPb*)[[[FscWorkReqPb builder] mergeFromInputStream:input] build];
}
+ (FscWorkReqPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkReqPb*)[[[FscWorkReqPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscWorkReqPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscWorkReqPb*)[[[FscWorkReqPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscWorkReqPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkReqPb*)[[[FscWorkReqPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscWorkReqPbBuilder*) builder {
  return [[FscWorkReqPbBuilder alloc] init];
}
+ (FscWorkReqPbBuilder*) builderWithPrototype:(FscWorkReqPb*) prototype {
  return [[FscWorkReqPb builder] mergeFrom:prototype];
}
- (FscWorkReqPbBuilder*) builder {
  return [FscWorkReqPb builder];
}
- (FscWorkReqPbBuilder*) toBuilder {
  return [FscWorkReqPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nodeId", [NSNumber numberWithLongLong:self.nodeId]];
  }
  if (self.hasWorkId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"workId", [NSNumber numberWithLongLong:self.workId]];
  }
  if (self.hasStudentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentId", [NSNumber numberWithLongLong:self.studentId]];
  }
  [self.fscWorkReqImgPbArray enumerateObjectsUsingBlock:^(FscWorkReqImgPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"fscWorkReqImgPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNodeId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.nodeId] forKey: @"nodeId"];
  }
  if (self.hasWorkId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.workId] forKey: @"workId"];
  }
  if (self.hasStudentId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.studentId] forKey: @"studentId"];
  }
  for (FscWorkReqImgPb* element in self.fscWorkReqImgPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"fscWorkReqImgPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscWorkReqPb class]]) {
    return NO;
  }
  FscWorkReqPb *otherMessage = other;
  return
      self.hasNodeId == otherMessage.hasNodeId &&
      (!self.hasNodeId || self.nodeId == otherMessage.nodeId) &&
      self.hasWorkId == otherMessage.hasWorkId &&
      (!self.hasWorkId || self.workId == otherMessage.workId) &&
      self.hasStudentId == otherMessage.hasStudentId &&
      (!self.hasStudentId || self.studentId == otherMessage.studentId) &&
      [self.fscWorkReqImgPbArray isEqualToArray:otherMessage.fscWorkReqImgPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.nodeId] hash];
  }
  if (self.hasWorkId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.workId] hash];
  }
  if (self.hasStudentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.studentId] hash];
  }
  [self.fscWorkReqImgPbArray enumerateObjectsUsingBlock:^(FscWorkReqImgPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscWorkReqPbBuilder()
@property (strong) FscWorkReqPb* resultFscWorkReqPb;
@end

@implementation FscWorkReqPbBuilder
@synthesize resultFscWorkReqPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscWorkReqPb = [[FscWorkReqPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscWorkReqPb;
}
- (FscWorkReqPbBuilder*) clear {
  self.resultFscWorkReqPb = [[FscWorkReqPb alloc] init];
  return self;
}
- (FscWorkReqPbBuilder*) clone {
  return [FscWorkReqPb builderWithPrototype:resultFscWorkReqPb];
}
- (FscWorkReqPb*) defaultInstance {
  return [FscWorkReqPb defaultInstance];
}
- (FscWorkReqPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscWorkReqPb*) buildPartial {
  FscWorkReqPb* returnMe = resultFscWorkReqPb;
  self.resultFscWorkReqPb = nil;
  return returnMe;
}
- (FscWorkReqPbBuilder*) mergeFrom:(FscWorkReqPb*) other {
  if (other == [FscWorkReqPb defaultInstance]) {
    return self;
  }
  if (other.hasNodeId) {
    [self setNodeId:other.nodeId];
  }
  if (other.hasWorkId) {
    [self setWorkId:other.workId];
  }
  if (other.hasStudentId) {
    [self setStudentId:other.studentId];
  }
  if (other.fscWorkReqImgPbArray.count > 0) {
    if (resultFscWorkReqPb.fscWorkReqImgPbArray == nil) {
      resultFscWorkReqPb.fscWorkReqImgPbArray = [[NSMutableArray alloc] initWithArray:other.fscWorkReqImgPbArray];
    } else {
      [resultFscWorkReqPb.fscWorkReqImgPbArray addObjectsFromArray:other.fscWorkReqImgPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscWorkReqPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscWorkReqPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNodeId:[input readInt64]];
        break;
      }
      case 16: {
        [self setWorkId:[input readInt64]];
        break;
      }
      case 24: {
        [self setStudentId:[input readInt64]];
        break;
      }
      case 34: {
        FscWorkReqImgPbBuilder* subBuilder = [FscWorkReqImgPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFscWorkReqImgPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNodeId {
  return resultFscWorkReqPb.hasNodeId;
}
- (SInt64) nodeId {
  return resultFscWorkReqPb.nodeId;
}
- (FscWorkReqPbBuilder*) setNodeId:(SInt64) value {
  resultFscWorkReqPb.hasNodeId = YES;
  resultFscWorkReqPb.nodeId = value;
  return self;
}
- (FscWorkReqPbBuilder*) clearNodeId {
  resultFscWorkReqPb.hasNodeId = NO;
  resultFscWorkReqPb.nodeId = 0L;
  return self;
}
- (BOOL) hasWorkId {
  return resultFscWorkReqPb.hasWorkId;
}
- (SInt64) workId {
  return resultFscWorkReqPb.workId;
}
- (FscWorkReqPbBuilder*) setWorkId:(SInt64) value {
  resultFscWorkReqPb.hasWorkId = YES;
  resultFscWorkReqPb.workId = value;
  return self;
}
- (FscWorkReqPbBuilder*) clearWorkId {
  resultFscWorkReqPb.hasWorkId = NO;
  resultFscWorkReqPb.workId = 0L;
  return self;
}
- (BOOL) hasStudentId {
  return resultFscWorkReqPb.hasStudentId;
}
- (SInt64) studentId {
  return resultFscWorkReqPb.studentId;
}
- (FscWorkReqPbBuilder*) setStudentId:(SInt64) value {
  resultFscWorkReqPb.hasStudentId = YES;
  resultFscWorkReqPb.studentId = value;
  return self;
}
- (FscWorkReqPbBuilder*) clearStudentId {
  resultFscWorkReqPb.hasStudentId = NO;
  resultFscWorkReqPb.studentId = 0L;
  return self;
}
- (NSMutableArray *)fscWorkReqImgPb {
  return resultFscWorkReqPb.fscWorkReqImgPbArray;
}
- (FscWorkReqImgPb*)fscWorkReqImgPbAtIndex:(NSUInteger)index {
  return [resultFscWorkReqPb fscWorkReqImgPbAtIndex:index];
}
- (FscWorkReqPbBuilder *)addFscWorkReqImgPb:(FscWorkReqImgPb*)value {
  if (resultFscWorkReqPb.fscWorkReqImgPbArray == nil) {
    resultFscWorkReqPb.fscWorkReqImgPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscWorkReqPb.fscWorkReqImgPbArray addObject:value];
  return self;
}
- (FscWorkReqPbBuilder *)setFscWorkReqImgPbArray:(NSArray *)array {
  resultFscWorkReqPb.fscWorkReqImgPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscWorkReqPbBuilder *)clearFscWorkReqImgPb {
  resultFscWorkReqPb.fscWorkReqImgPbArray = nil;
  return self;
}
@end

@interface FscWorkPb ()
@property SInt64 paperId;
@property (strong) NSString* workType;
@property (strong) NSString* title;
@property SInt32 totalScore;
@property SInt32 studentScore;
@property SInt32 workStatus;
@property (strong) NSString* sheetPath;
@end

@implementation FscWorkPb

- (BOOL) hasPaperId {
  return !!hasPaperId_;
}
- (void) setHasPaperId:(BOOL) _value_ {
  hasPaperId_ = !!_value_;
}
@synthesize paperId;
- (BOOL) hasWorkType {
  return !!hasWorkType_;
}
- (void) setHasWorkType:(BOOL) _value_ {
  hasWorkType_ = !!_value_;
}
@synthesize workType;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasTotalScore {
  return !!hasTotalScore_;
}
- (void) setHasTotalScore:(BOOL) _value_ {
  hasTotalScore_ = !!_value_;
}
@synthesize totalScore;
- (BOOL) hasStudentScore {
  return !!hasStudentScore_;
}
- (void) setHasStudentScore:(BOOL) _value_ {
  hasStudentScore_ = !!_value_;
}
@synthesize studentScore;
- (BOOL) hasWorkStatus {
  return !!hasWorkStatus_;
}
- (void) setHasWorkStatus:(BOOL) _value_ {
  hasWorkStatus_ = !!_value_;
}
@synthesize workStatus;
- (BOOL) hasSheetPath {
  return !!hasSheetPath_;
}
- (void) setHasSheetPath:(BOOL) _value_ {
  hasSheetPath_ = !!_value_;
}
@synthesize sheetPath;
- (instancetype) init {
  if ((self = [super init])) {
    self.paperId = 0L;
    self.workType = @"";
    self.title = @"";
    self.totalScore = 0;
    self.studentScore = 0;
    self.workStatus = 0;
    self.sheetPath = @"";
  }
  return self;
}
static FscWorkPb* defaultFscWorkPbInstance = nil;
+ (void) initialize {
  if (self == [FscWorkPb class]) {
    defaultFscWorkPbInstance = [[FscWorkPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscWorkPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscWorkPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPaperId) {
    [output writeInt64:1 value:self.paperId];
  }
  if (self.hasWorkType) {
    [output writeString:2 value:self.workType];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasTotalScore) {
    [output writeInt32:4 value:self.totalScore];
  }
  if (self.hasStudentScore) {
    [output writeInt32:5 value:self.studentScore];
  }
  if (self.hasWorkStatus) {
    [output writeInt32:6 value:self.workStatus];
  }
  if (self.hasSheetPath) {
    [output writeString:7 value:self.sheetPath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPaperId) {
    size_ += computeInt64Size(1, self.paperId);
  }
  if (self.hasWorkType) {
    size_ += computeStringSize(2, self.workType);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasTotalScore) {
    size_ += computeInt32Size(4, self.totalScore);
  }
  if (self.hasStudentScore) {
    size_ += computeInt32Size(5, self.studentScore);
  }
  if (self.hasWorkStatus) {
    size_ += computeInt32Size(6, self.workStatus);
  }
  if (self.hasSheetPath) {
    size_ += computeStringSize(7, self.sheetPath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscWorkPb*) parseFromData:(NSData*) data {
  return (FscWorkPb*)[[[FscWorkPb builder] mergeFromData:data] build];
}
+ (FscWorkPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkPb*)[[[FscWorkPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscWorkPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscWorkPb*)[[[FscWorkPb builder] mergeFromInputStream:input] build];
}
+ (FscWorkPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkPb*)[[[FscWorkPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscWorkPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscWorkPb*)[[[FscWorkPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscWorkPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkPb*)[[[FscWorkPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscWorkPbBuilder*) builder {
  return [[FscWorkPbBuilder alloc] init];
}
+ (FscWorkPbBuilder*) builderWithPrototype:(FscWorkPb*) prototype {
  return [[FscWorkPb builder] mergeFrom:prototype];
}
- (FscWorkPbBuilder*) builder {
  return [FscWorkPb builder];
}
- (FscWorkPbBuilder*) toBuilder {
  return [FscWorkPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPaperId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"paperId", [NSNumber numberWithLongLong:self.paperId]];
  }
  if (self.hasWorkType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"workType", self.workType];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasTotalScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalScore", [NSNumber numberWithInteger:self.totalScore]];
  }
  if (self.hasStudentScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentScore", [NSNumber numberWithInteger:self.studentScore]];
  }
  if (self.hasWorkStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"workStatus", [NSNumber numberWithInteger:self.workStatus]];
  }
  if (self.hasSheetPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sheetPath", self.sheetPath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPaperId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.paperId] forKey: @"paperId"];
  }
  if (self.hasWorkType) {
    [dictionary setObject: self.workType forKey: @"workType"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasTotalScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.totalScore] forKey: @"totalScore"];
  }
  if (self.hasStudentScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.studentScore] forKey: @"studentScore"];
  }
  if (self.hasWorkStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.workStatus] forKey: @"workStatus"];
  }
  if (self.hasSheetPath) {
    [dictionary setObject: self.sheetPath forKey: @"sheetPath"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscWorkPb class]]) {
    return NO;
  }
  FscWorkPb *otherMessage = other;
  return
      self.hasPaperId == otherMessage.hasPaperId &&
      (!self.hasPaperId || self.paperId == otherMessage.paperId) &&
      self.hasWorkType == otherMessage.hasWorkType &&
      (!self.hasWorkType || [self.workType isEqual:otherMessage.workType]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasTotalScore == otherMessage.hasTotalScore &&
      (!self.hasTotalScore || self.totalScore == otherMessage.totalScore) &&
      self.hasStudentScore == otherMessage.hasStudentScore &&
      (!self.hasStudentScore || self.studentScore == otherMessage.studentScore) &&
      self.hasWorkStatus == otherMessage.hasWorkStatus &&
      (!self.hasWorkStatus || self.workStatus == otherMessage.workStatus) &&
      self.hasSheetPath == otherMessage.hasSheetPath &&
      (!self.hasSheetPath || [self.sheetPath isEqual:otherMessage.sheetPath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPaperId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.paperId] hash];
  }
  if (self.hasWorkType) {
    hashCode = hashCode * 31 + [self.workType hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasTotalScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalScore] hash];
  }
  if (self.hasStudentScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.studentScore] hash];
  }
  if (self.hasWorkStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.workStatus] hash];
  }
  if (self.hasSheetPath) {
    hashCode = hashCode * 31 + [self.sheetPath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscWorkPbBuilder()
@property (strong) FscWorkPb* resultFscWorkPb;
@end

@implementation FscWorkPbBuilder
@synthesize resultFscWorkPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscWorkPb = [[FscWorkPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscWorkPb;
}
- (FscWorkPbBuilder*) clear {
  self.resultFscWorkPb = [[FscWorkPb alloc] init];
  return self;
}
- (FscWorkPbBuilder*) clone {
  return [FscWorkPb builderWithPrototype:resultFscWorkPb];
}
- (FscWorkPb*) defaultInstance {
  return [FscWorkPb defaultInstance];
}
- (FscWorkPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscWorkPb*) buildPartial {
  FscWorkPb* returnMe = resultFscWorkPb;
  self.resultFscWorkPb = nil;
  return returnMe;
}
- (FscWorkPbBuilder*) mergeFrom:(FscWorkPb*) other {
  if (other == [FscWorkPb defaultInstance]) {
    return self;
  }
  if (other.hasPaperId) {
    [self setPaperId:other.paperId];
  }
  if (other.hasWorkType) {
    [self setWorkType:other.workType];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasTotalScore) {
    [self setTotalScore:other.totalScore];
  }
  if (other.hasStudentScore) {
    [self setStudentScore:other.studentScore];
  }
  if (other.hasWorkStatus) {
    [self setWorkStatus:other.workStatus];
  }
  if (other.hasSheetPath) {
    [self setSheetPath:other.sheetPath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscWorkPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscWorkPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPaperId:[input readInt64]];
        break;
      }
      case 18: {
        [self setWorkType:[input readString]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 32: {
        [self setTotalScore:[input readInt32]];
        break;
      }
      case 40: {
        [self setStudentScore:[input readInt32]];
        break;
      }
      case 48: {
        [self setWorkStatus:[input readInt32]];
        break;
      }
      case 58: {
        [self setSheetPath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPaperId {
  return resultFscWorkPb.hasPaperId;
}
- (SInt64) paperId {
  return resultFscWorkPb.paperId;
}
- (FscWorkPbBuilder*) setPaperId:(SInt64) value {
  resultFscWorkPb.hasPaperId = YES;
  resultFscWorkPb.paperId = value;
  return self;
}
- (FscWorkPbBuilder*) clearPaperId {
  resultFscWorkPb.hasPaperId = NO;
  resultFscWorkPb.paperId = 0L;
  return self;
}
- (BOOL) hasWorkType {
  return resultFscWorkPb.hasWorkType;
}
- (NSString*) workType {
  return resultFscWorkPb.workType;
}
- (FscWorkPbBuilder*) setWorkType:(NSString*) value {
  resultFscWorkPb.hasWorkType = YES;
  resultFscWorkPb.workType = value;
  return self;
}
- (FscWorkPbBuilder*) clearWorkType {
  resultFscWorkPb.hasWorkType = NO;
  resultFscWorkPb.workType = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultFscWorkPb.hasTitle;
}
- (NSString*) title {
  return resultFscWorkPb.title;
}
- (FscWorkPbBuilder*) setTitle:(NSString*) value {
  resultFscWorkPb.hasTitle = YES;
  resultFscWorkPb.title = value;
  return self;
}
- (FscWorkPbBuilder*) clearTitle {
  resultFscWorkPb.hasTitle = NO;
  resultFscWorkPb.title = @"";
  return self;
}
- (BOOL) hasTotalScore {
  return resultFscWorkPb.hasTotalScore;
}
- (SInt32) totalScore {
  return resultFscWorkPb.totalScore;
}
- (FscWorkPbBuilder*) setTotalScore:(SInt32) value {
  resultFscWorkPb.hasTotalScore = YES;
  resultFscWorkPb.totalScore = value;
  return self;
}
- (FscWorkPbBuilder*) clearTotalScore {
  resultFscWorkPb.hasTotalScore = NO;
  resultFscWorkPb.totalScore = 0;
  return self;
}
- (BOOL) hasStudentScore {
  return resultFscWorkPb.hasStudentScore;
}
- (SInt32) studentScore {
  return resultFscWorkPb.studentScore;
}
- (FscWorkPbBuilder*) setStudentScore:(SInt32) value {
  resultFscWorkPb.hasStudentScore = YES;
  resultFscWorkPb.studentScore = value;
  return self;
}
- (FscWorkPbBuilder*) clearStudentScore {
  resultFscWorkPb.hasStudentScore = NO;
  resultFscWorkPb.studentScore = 0;
  return self;
}
- (BOOL) hasWorkStatus {
  return resultFscWorkPb.hasWorkStatus;
}
- (SInt32) workStatus {
  return resultFscWorkPb.workStatus;
}
- (FscWorkPbBuilder*) setWorkStatus:(SInt32) value {
  resultFscWorkPb.hasWorkStatus = YES;
  resultFscWorkPb.workStatus = value;
  return self;
}
- (FscWorkPbBuilder*) clearWorkStatus {
  resultFscWorkPb.hasWorkStatus = NO;
  resultFscWorkPb.workStatus = 0;
  return self;
}
- (BOOL) hasSheetPath {
  return resultFscWorkPb.hasSheetPath;
}
- (NSString*) sheetPath {
  return resultFscWorkPb.sheetPath;
}
- (FscWorkPbBuilder*) setSheetPath:(NSString*) value {
  resultFscWorkPb.hasSheetPath = YES;
  resultFscWorkPb.sheetPath = value;
  return self;
}
- (FscWorkPbBuilder*) clearSheetPath {
  resultFscWorkPb.hasSheetPath = NO;
  resultFscWorkPb.sheetPath = @"";
  return self;
}
@end

@interface FscWorkPaperPb ()
@property SInt64 paperId;
@property SInt32 studentScore;
@property SInt32 workStatus;
@property (strong) NSString* sheetPath;
@end

@implementation FscWorkPaperPb

- (BOOL) hasPaperId {
  return !!hasPaperId_;
}
- (void) setHasPaperId:(BOOL) _value_ {
  hasPaperId_ = !!_value_;
}
@synthesize paperId;
- (BOOL) hasStudentScore {
  return !!hasStudentScore_;
}
- (void) setHasStudentScore:(BOOL) _value_ {
  hasStudentScore_ = !!_value_;
}
@synthesize studentScore;
- (BOOL) hasWorkStatus {
  return !!hasWorkStatus_;
}
- (void) setHasWorkStatus:(BOOL) _value_ {
  hasWorkStatus_ = !!_value_;
}
@synthesize workStatus;
- (BOOL) hasSheetPath {
  return !!hasSheetPath_;
}
- (void) setHasSheetPath:(BOOL) _value_ {
  hasSheetPath_ = !!_value_;
}
@synthesize sheetPath;
- (instancetype) init {
  if ((self = [super init])) {
    self.paperId = 0L;
    self.studentScore = 0;
    self.workStatus = 0;
    self.sheetPath = @"";
  }
  return self;
}
static FscWorkPaperPb* defaultFscWorkPaperPbInstance = nil;
+ (void) initialize {
  if (self == [FscWorkPaperPb class]) {
    defaultFscWorkPaperPbInstance = [[FscWorkPaperPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscWorkPaperPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscWorkPaperPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPaperId) {
    [output writeInt64:1 value:self.paperId];
  }
  if (self.hasStudentScore) {
    [output writeInt32:2 value:self.studentScore];
  }
  if (self.hasWorkStatus) {
    [output writeInt32:3 value:self.workStatus];
  }
  if (self.hasSheetPath) {
    [output writeString:4 value:self.sheetPath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPaperId) {
    size_ += computeInt64Size(1, self.paperId);
  }
  if (self.hasStudentScore) {
    size_ += computeInt32Size(2, self.studentScore);
  }
  if (self.hasWorkStatus) {
    size_ += computeInt32Size(3, self.workStatus);
  }
  if (self.hasSheetPath) {
    size_ += computeStringSize(4, self.sheetPath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscWorkPaperPb*) parseFromData:(NSData*) data {
  return (FscWorkPaperPb*)[[[FscWorkPaperPb builder] mergeFromData:data] build];
}
+ (FscWorkPaperPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkPaperPb*)[[[FscWorkPaperPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscWorkPaperPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscWorkPaperPb*)[[[FscWorkPaperPb builder] mergeFromInputStream:input] build];
}
+ (FscWorkPaperPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkPaperPb*)[[[FscWorkPaperPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscWorkPaperPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscWorkPaperPb*)[[[FscWorkPaperPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscWorkPaperPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkPaperPb*)[[[FscWorkPaperPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscWorkPaperPbBuilder*) builder {
  return [[FscWorkPaperPbBuilder alloc] init];
}
+ (FscWorkPaperPbBuilder*) builderWithPrototype:(FscWorkPaperPb*) prototype {
  return [[FscWorkPaperPb builder] mergeFrom:prototype];
}
- (FscWorkPaperPbBuilder*) builder {
  return [FscWorkPaperPb builder];
}
- (FscWorkPaperPbBuilder*) toBuilder {
  return [FscWorkPaperPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPaperId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"paperId", [NSNumber numberWithLongLong:self.paperId]];
  }
  if (self.hasStudentScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentScore", [NSNumber numberWithInteger:self.studentScore]];
  }
  if (self.hasWorkStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"workStatus", [NSNumber numberWithInteger:self.workStatus]];
  }
  if (self.hasSheetPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sheetPath", self.sheetPath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPaperId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.paperId] forKey: @"paperId"];
  }
  if (self.hasStudentScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.studentScore] forKey: @"studentScore"];
  }
  if (self.hasWorkStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.workStatus] forKey: @"workStatus"];
  }
  if (self.hasSheetPath) {
    [dictionary setObject: self.sheetPath forKey: @"sheetPath"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscWorkPaperPb class]]) {
    return NO;
  }
  FscWorkPaperPb *otherMessage = other;
  return
      self.hasPaperId == otherMessage.hasPaperId &&
      (!self.hasPaperId || self.paperId == otherMessage.paperId) &&
      self.hasStudentScore == otherMessage.hasStudentScore &&
      (!self.hasStudentScore || self.studentScore == otherMessage.studentScore) &&
      self.hasWorkStatus == otherMessage.hasWorkStatus &&
      (!self.hasWorkStatus || self.workStatus == otherMessage.workStatus) &&
      self.hasSheetPath == otherMessage.hasSheetPath &&
      (!self.hasSheetPath || [self.sheetPath isEqual:otherMessage.sheetPath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPaperId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.paperId] hash];
  }
  if (self.hasStudentScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.studentScore] hash];
  }
  if (self.hasWorkStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.workStatus] hash];
  }
  if (self.hasSheetPath) {
    hashCode = hashCode * 31 + [self.sheetPath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscWorkPaperPbBuilder()
@property (strong) FscWorkPaperPb* resultFscWorkPaperPb;
@end

@implementation FscWorkPaperPbBuilder
@synthesize resultFscWorkPaperPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscWorkPaperPb = [[FscWorkPaperPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscWorkPaperPb;
}
- (FscWorkPaperPbBuilder*) clear {
  self.resultFscWorkPaperPb = [[FscWorkPaperPb alloc] init];
  return self;
}
- (FscWorkPaperPbBuilder*) clone {
  return [FscWorkPaperPb builderWithPrototype:resultFscWorkPaperPb];
}
- (FscWorkPaperPb*) defaultInstance {
  return [FscWorkPaperPb defaultInstance];
}
- (FscWorkPaperPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscWorkPaperPb*) buildPartial {
  FscWorkPaperPb* returnMe = resultFscWorkPaperPb;
  self.resultFscWorkPaperPb = nil;
  return returnMe;
}
- (FscWorkPaperPbBuilder*) mergeFrom:(FscWorkPaperPb*) other {
  if (other == [FscWorkPaperPb defaultInstance]) {
    return self;
  }
  if (other.hasPaperId) {
    [self setPaperId:other.paperId];
  }
  if (other.hasStudentScore) {
    [self setStudentScore:other.studentScore];
  }
  if (other.hasWorkStatus) {
    [self setWorkStatus:other.workStatus];
  }
  if (other.hasSheetPath) {
    [self setSheetPath:other.sheetPath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscWorkPaperPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscWorkPaperPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPaperId:[input readInt64]];
        break;
      }
      case 16: {
        [self setStudentScore:[input readInt32]];
        break;
      }
      case 24: {
        [self setWorkStatus:[input readInt32]];
        break;
      }
      case 34: {
        [self setSheetPath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPaperId {
  return resultFscWorkPaperPb.hasPaperId;
}
- (SInt64) paperId {
  return resultFscWorkPaperPb.paperId;
}
- (FscWorkPaperPbBuilder*) setPaperId:(SInt64) value {
  resultFscWorkPaperPb.hasPaperId = YES;
  resultFscWorkPaperPb.paperId = value;
  return self;
}
- (FscWorkPaperPbBuilder*) clearPaperId {
  resultFscWorkPaperPb.hasPaperId = NO;
  resultFscWorkPaperPb.paperId = 0L;
  return self;
}
- (BOOL) hasStudentScore {
  return resultFscWorkPaperPb.hasStudentScore;
}
- (SInt32) studentScore {
  return resultFscWorkPaperPb.studentScore;
}
- (FscWorkPaperPbBuilder*) setStudentScore:(SInt32) value {
  resultFscWorkPaperPb.hasStudentScore = YES;
  resultFscWorkPaperPb.studentScore = value;
  return self;
}
- (FscWorkPaperPbBuilder*) clearStudentScore {
  resultFscWorkPaperPb.hasStudentScore = NO;
  resultFscWorkPaperPb.studentScore = 0;
  return self;
}
- (BOOL) hasWorkStatus {
  return resultFscWorkPaperPb.hasWorkStatus;
}
- (SInt32) workStatus {
  return resultFscWorkPaperPb.workStatus;
}
- (FscWorkPaperPbBuilder*) setWorkStatus:(SInt32) value {
  resultFscWorkPaperPb.hasWorkStatus = YES;
  resultFscWorkPaperPb.workStatus = value;
  return self;
}
- (FscWorkPaperPbBuilder*) clearWorkStatus {
  resultFscWorkPaperPb.hasWorkStatus = NO;
  resultFscWorkPaperPb.workStatus = 0;
  return self;
}
- (BOOL) hasSheetPath {
  return resultFscWorkPaperPb.hasSheetPath;
}
- (NSString*) sheetPath {
  return resultFscWorkPaperPb.sheetPath;
}
- (FscWorkPaperPbBuilder*) setSheetPath:(NSString*) value {
  resultFscWorkPaperPb.hasSheetPath = YES;
  resultFscWorkPaperPb.sheetPath = value;
  return self;
}
- (FscWorkPaperPbBuilder*) clearSheetPath {
  resultFscWorkPaperPb.hasSheetPath = NO;
  resultFscWorkPaperPb.sheetPath = @"";
  return self;
}
@end

@interface FscWorkReqImgPb ()
@property (strong) NSData* imgByte;
@end

@implementation FscWorkReqImgPb

- (BOOL) hasImgByte {
  return !!hasImgByte_;
}
- (void) setHasImgByte:(BOOL) _value_ {
  hasImgByte_ = !!_value_;
}
@synthesize imgByte;
- (instancetype) init {
  if ((self = [super init])) {
    self.imgByte = [NSData data];
  }
  return self;
}
static FscWorkReqImgPb* defaultFscWorkReqImgPbInstance = nil;
+ (void) initialize {
  if (self == [FscWorkReqImgPb class]) {
    defaultFscWorkReqImgPbInstance = [[FscWorkReqImgPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscWorkReqImgPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscWorkReqImgPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasImgByte) {
    [output writeData:1 value:self.imgByte];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasImgByte) {
    size_ += computeDataSize(1, self.imgByte);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscWorkReqImgPb*) parseFromData:(NSData*) data {
  return (FscWorkReqImgPb*)[[[FscWorkReqImgPb builder] mergeFromData:data] build];
}
+ (FscWorkReqImgPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkReqImgPb*)[[[FscWorkReqImgPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscWorkReqImgPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscWorkReqImgPb*)[[[FscWorkReqImgPb builder] mergeFromInputStream:input] build];
}
+ (FscWorkReqImgPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkReqImgPb*)[[[FscWorkReqImgPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscWorkReqImgPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscWorkReqImgPb*)[[[FscWorkReqImgPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscWorkReqImgPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscWorkReqImgPb*)[[[FscWorkReqImgPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscWorkReqImgPbBuilder*) builder {
  return [[FscWorkReqImgPbBuilder alloc] init];
}
+ (FscWorkReqImgPbBuilder*) builderWithPrototype:(FscWorkReqImgPb*) prototype {
  return [[FscWorkReqImgPb builder] mergeFrom:prototype];
}
- (FscWorkReqImgPbBuilder*) builder {
  return [FscWorkReqImgPb builder];
}
- (FscWorkReqImgPbBuilder*) toBuilder {
  return [FscWorkReqImgPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasImgByte) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgByte", self.imgByte];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasImgByte) {
    [dictionary setObject: self.imgByte forKey: @"imgByte"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscWorkReqImgPb class]]) {
    return NO;
  }
  FscWorkReqImgPb *otherMessage = other;
  return
      self.hasImgByte == otherMessage.hasImgByte &&
      (!self.hasImgByte || [self.imgByte isEqual:otherMessage.imgByte]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasImgByte) {
    hashCode = hashCode * 31 + [self.imgByte hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscWorkReqImgPbBuilder()
@property (strong) FscWorkReqImgPb* resultFscWorkReqImgPb;
@end

@implementation FscWorkReqImgPbBuilder
@synthesize resultFscWorkReqImgPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscWorkReqImgPb = [[FscWorkReqImgPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscWorkReqImgPb;
}
- (FscWorkReqImgPbBuilder*) clear {
  self.resultFscWorkReqImgPb = [[FscWorkReqImgPb alloc] init];
  return self;
}
- (FscWorkReqImgPbBuilder*) clone {
  return [FscWorkReqImgPb builderWithPrototype:resultFscWorkReqImgPb];
}
- (FscWorkReqImgPb*) defaultInstance {
  return [FscWorkReqImgPb defaultInstance];
}
- (FscWorkReqImgPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscWorkReqImgPb*) buildPartial {
  FscWorkReqImgPb* returnMe = resultFscWorkReqImgPb;
  self.resultFscWorkReqImgPb = nil;
  return returnMe;
}
- (FscWorkReqImgPbBuilder*) mergeFrom:(FscWorkReqImgPb*) other {
  if (other == [FscWorkReqImgPb defaultInstance]) {
    return self;
  }
  if (other.hasImgByte) {
    [self setImgByte:other.imgByte];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscWorkReqImgPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscWorkReqImgPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setImgByte:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasImgByte {
  return resultFscWorkReqImgPb.hasImgByte;
}
- (NSData*) imgByte {
  return resultFscWorkReqImgPb.imgByte;
}
- (FscWorkReqImgPbBuilder*) setImgByte:(NSData*) value {
  resultFscWorkReqImgPb.hasImgByte = YES;
  resultFscWorkReqImgPb.imgByte = value;
  return self;
}
- (FscWorkReqImgPbBuilder*) clearImgByte {
  resultFscWorkReqImgPb.hasImgByte = NO;
  resultFscWorkReqImgPb.imgByte = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
