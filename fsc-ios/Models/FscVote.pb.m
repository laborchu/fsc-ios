// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscVote.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscVoteRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscVoteRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FscVoteListPb ()
@property (strong) NSMutableArray * votePbArray;
@end

@implementation FscVoteListPb

@synthesize votePbArray;
@dynamic votePb;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static FscVoteListPb* defaultFscVoteListPbInstance = nil;
+ (void) initialize {
  if (self == [FscVoteListPb class]) {
    defaultFscVoteListPbInstance = [[FscVoteListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscVoteListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscVoteListPbInstance;
}
- (NSArray *)votePb {
  return votePbArray;
}
- (FscVotePb*)votePbAtIndex:(NSUInteger)index {
  return [votePbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.votePbArray enumerateObjectsUsingBlock:^(FscVotePb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.votePbArray enumerateObjectsUsingBlock:^(FscVotePb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscVoteListPb*) parseFromData:(NSData*) data {
  return (FscVoteListPb*)[[[FscVoteListPb builder] mergeFromData:data] build];
}
+ (FscVoteListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVoteListPb*)[[[FscVoteListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscVoteListPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscVoteListPb*)[[[FscVoteListPb builder] mergeFromInputStream:input] build];
}
+ (FscVoteListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVoteListPb*)[[[FscVoteListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscVoteListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscVoteListPb*)[[[FscVoteListPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscVoteListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVoteListPb*)[[[FscVoteListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscVoteListPbBuilder*) builder {
  return [[FscVoteListPbBuilder alloc] init];
}
+ (FscVoteListPbBuilder*) builderWithPrototype:(FscVoteListPb*) prototype {
  return [[FscVoteListPb builder] mergeFrom:prototype];
}
- (FscVoteListPbBuilder*) builder {
  return [FscVoteListPb builder];
}
- (FscVoteListPbBuilder*) toBuilder {
  return [FscVoteListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.votePbArray enumerateObjectsUsingBlock:^(FscVotePb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"votePb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (FscVotePb* element in self.votePbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"votePb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscVoteListPb class]]) {
    return NO;
  }
  FscVoteListPb *otherMessage = other;
  return
      [self.votePbArray isEqualToArray:otherMessage.votePbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.votePbArray enumerateObjectsUsingBlock:^(FscVotePb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscVoteListPbBuilder()
@property (strong) FscVoteListPb* resultFscVoteListPb;
@end

@implementation FscVoteListPbBuilder
@synthesize resultFscVoteListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscVoteListPb = [[FscVoteListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscVoteListPb;
}
- (FscVoteListPbBuilder*) clear {
  self.resultFscVoteListPb = [[FscVoteListPb alloc] init];
  return self;
}
- (FscVoteListPbBuilder*) clone {
  return [FscVoteListPb builderWithPrototype:resultFscVoteListPb];
}
- (FscVoteListPb*) defaultInstance {
  return [FscVoteListPb defaultInstance];
}
- (FscVoteListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscVoteListPb*) buildPartial {
  FscVoteListPb* returnMe = resultFscVoteListPb;
  self.resultFscVoteListPb = nil;
  return returnMe;
}
- (FscVoteListPbBuilder*) mergeFrom:(FscVoteListPb*) other {
  if (other == [FscVoteListPb defaultInstance]) {
    return self;
  }
  if (other.votePbArray.count > 0) {
    if (resultFscVoteListPb.votePbArray == nil) {
      resultFscVoteListPb.votePbArray = [[NSMutableArray alloc] initWithArray:other.votePbArray];
    } else {
      [resultFscVoteListPb.votePbArray addObjectsFromArray:other.votePbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscVoteListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscVoteListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FscVotePbBuilder* subBuilder = [FscVotePb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addVotePb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)votePb {
  return resultFscVoteListPb.votePbArray;
}
- (FscVotePb*)votePbAtIndex:(NSUInteger)index {
  return [resultFscVoteListPb votePbAtIndex:index];
}
- (FscVoteListPbBuilder *)addVotePb:(FscVotePb*)value {
  if (resultFscVoteListPb.votePbArray == nil) {
    resultFscVoteListPb.votePbArray = [[NSMutableArray alloc]init];
  }
  [resultFscVoteListPb.votePbArray addObject:value];
  return self;
}
- (FscVoteListPbBuilder *)setVotePbArray:(NSArray *)array {
  resultFscVoteListPb.votePbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscVoteListPbBuilder *)clearVotePb {
  resultFscVoteListPb.votePbArray = nil;
  return self;
}
@end

@interface FscVotePb ()
@property SInt64 id;
@property (strong) NSString* voteName;
@property SInt64 voteNum;
@property (strong) NSString* coverImg;
@property SInt64 deadline;
@property SInt64 modifiedDate;
@property (strong) NSString* quesList;
@property (strong) NSMutableArray * fscVoteQuesPbArray;
@property SInt32 applyStatus;
@end

@implementation FscVotePb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasVoteName {
  return !!hasVoteName_;
}
- (void) setHasVoteName:(BOOL) _value_ {
  hasVoteName_ = !!_value_;
}
@synthesize voteName;
- (BOOL) hasVoteNum {
  return !!hasVoteNum_;
}
- (void) setHasVoteNum:(BOOL) _value_ {
  hasVoteNum_ = !!_value_;
}
@synthesize voteNum;
- (BOOL) hasCoverImg {
  return !!hasCoverImg_;
}
- (void) setHasCoverImg:(BOOL) _value_ {
  hasCoverImg_ = !!_value_;
}
@synthesize coverImg;
- (BOOL) hasDeadline {
  return !!hasDeadline_;
}
- (void) setHasDeadline:(BOOL) _value_ {
  hasDeadline_ = !!_value_;
}
@synthesize deadline;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (BOOL) hasQuesList {
  return !!hasQuesList_;
}
- (void) setHasQuesList:(BOOL) _value_ {
  hasQuesList_ = !!_value_;
}
@synthesize quesList;
@synthesize fscVoteQuesPbArray;
@dynamic fscVoteQuesPb;
- (BOOL) hasApplyStatus {
  return !!hasApplyStatus_;
}
- (void) setHasApplyStatus:(BOOL) _value_ {
  hasApplyStatus_ = !!_value_;
}
@synthesize applyStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.voteName = @"";
    self.voteNum = 0L;
    self.coverImg = @"";
    self.deadline = 0L;
    self.modifiedDate = 0L;
    self.quesList = @"";
    self.applyStatus = 0;
  }
  return self;
}
static FscVotePb* defaultFscVotePbInstance = nil;
+ (void) initialize {
  if (self == [FscVotePb class]) {
    defaultFscVotePbInstance = [[FscVotePb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscVotePbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscVotePbInstance;
}
- (NSArray *)fscVoteQuesPb {
  return fscVoteQuesPbArray;
}
- (FscVoteQuesPb*)fscVoteQuesPbAtIndex:(NSUInteger)index {
  return [fscVoteQuesPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasVoteName) {
    [output writeString:2 value:self.voteName];
  }
  if (self.hasVoteNum) {
    [output writeInt64:3 value:self.voteNum];
  }
  if (self.hasCoverImg) {
    [output writeString:4 value:self.coverImg];
  }
  if (self.hasDeadline) {
    [output writeInt64:5 value:self.deadline];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:6 value:self.modifiedDate];
  }
  if (self.hasQuesList) {
    [output writeString:7 value:self.quesList];
  }
  [self.fscVoteQuesPbArray enumerateObjectsUsingBlock:^(FscVoteQuesPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  if (self.hasApplyStatus) {
    [output writeInt32:9 value:self.applyStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasVoteName) {
    size_ += computeStringSize(2, self.voteName);
  }
  if (self.hasVoteNum) {
    size_ += computeInt64Size(3, self.voteNum);
  }
  if (self.hasCoverImg) {
    size_ += computeStringSize(4, self.coverImg);
  }
  if (self.hasDeadline) {
    size_ += computeInt64Size(5, self.deadline);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(6, self.modifiedDate);
  }
  if (self.hasQuesList) {
    size_ += computeStringSize(7, self.quesList);
  }
  [self.fscVoteQuesPbArray enumerateObjectsUsingBlock:^(FscVoteQuesPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  if (self.hasApplyStatus) {
    size_ += computeInt32Size(9, self.applyStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscVotePb*) parseFromData:(NSData*) data {
  return (FscVotePb*)[[[FscVotePb builder] mergeFromData:data] build];
}
+ (FscVotePb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVotePb*)[[[FscVotePb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscVotePb*) parseFromInputStream:(NSInputStream*) input {
  return (FscVotePb*)[[[FscVotePb builder] mergeFromInputStream:input] build];
}
+ (FscVotePb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVotePb*)[[[FscVotePb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscVotePb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscVotePb*)[[[FscVotePb builder] mergeFromCodedInputStream:input] build];
}
+ (FscVotePb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVotePb*)[[[FscVotePb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscVotePbBuilder*) builder {
  return [[FscVotePbBuilder alloc] init];
}
+ (FscVotePbBuilder*) builderWithPrototype:(FscVotePb*) prototype {
  return [[FscVotePb builder] mergeFrom:prototype];
}
- (FscVotePbBuilder*) builder {
  return [FscVotePb builder];
}
- (FscVotePbBuilder*) toBuilder {
  return [FscVotePb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasVoteName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voteName", self.voteName];
  }
  if (self.hasVoteNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voteNum", [NSNumber numberWithLongLong:self.voteNum]];
  }
  if (self.hasCoverImg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coverImg", self.coverImg];
  }
  if (self.hasDeadline) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deadline", [NSNumber numberWithLongLong:self.deadline]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  if (self.hasQuesList) {
    [output appendFormat:@"%@%@: %@\n", indent, @"quesList", self.quesList];
  }
  [self.fscVoteQuesPbArray enumerateObjectsUsingBlock:^(FscVoteQuesPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"fscVoteQuesPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasApplyStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyStatus", [NSNumber numberWithInteger:self.applyStatus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasVoteName) {
    [dictionary setObject: self.voteName forKey: @"voteName"];
  }
  if (self.hasVoteNum) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.voteNum] forKey: @"voteNum"];
  }
  if (self.hasCoverImg) {
    [dictionary setObject: self.coverImg forKey: @"coverImg"];
  }
  if (self.hasDeadline) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.deadline] forKey: @"deadline"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  if (self.hasQuesList) {
    [dictionary setObject: self.quesList forKey: @"quesList"];
  }
  for (FscVoteQuesPb* element in self.fscVoteQuesPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"fscVoteQuesPb"];
  }
  if (self.hasApplyStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.applyStatus] forKey: @"applyStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscVotePb class]]) {
    return NO;
  }
  FscVotePb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasVoteName == otherMessage.hasVoteName &&
      (!self.hasVoteName || [self.voteName isEqual:otherMessage.voteName]) &&
      self.hasVoteNum == otherMessage.hasVoteNum &&
      (!self.hasVoteNum || self.voteNum == otherMessage.voteNum) &&
      self.hasCoverImg == otherMessage.hasCoverImg &&
      (!self.hasCoverImg || [self.coverImg isEqual:otherMessage.coverImg]) &&
      self.hasDeadline == otherMessage.hasDeadline &&
      (!self.hasDeadline || self.deadline == otherMessage.deadline) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      self.hasQuesList == otherMessage.hasQuesList &&
      (!self.hasQuesList || [self.quesList isEqual:otherMessage.quesList]) &&
      [self.fscVoteQuesPbArray isEqualToArray:otherMessage.fscVoteQuesPbArray] &&
      self.hasApplyStatus == otherMessage.hasApplyStatus &&
      (!self.hasApplyStatus || self.applyStatus == otherMessage.applyStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasVoteName) {
    hashCode = hashCode * 31 + [self.voteName hash];
  }
  if (self.hasVoteNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.voteNum] hash];
  }
  if (self.hasCoverImg) {
    hashCode = hashCode * 31 + [self.coverImg hash];
  }
  if (self.hasDeadline) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.deadline] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  if (self.hasQuesList) {
    hashCode = hashCode * 31 + [self.quesList hash];
  }
  [self.fscVoteQuesPbArray enumerateObjectsUsingBlock:^(FscVoteQuesPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasApplyStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.applyStatus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscVotePbBuilder()
@property (strong) FscVotePb* resultFscVotePb;
@end

@implementation FscVotePbBuilder
@synthesize resultFscVotePb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscVotePb = [[FscVotePb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscVotePb;
}
- (FscVotePbBuilder*) clear {
  self.resultFscVotePb = [[FscVotePb alloc] init];
  return self;
}
- (FscVotePbBuilder*) clone {
  return [FscVotePb builderWithPrototype:resultFscVotePb];
}
- (FscVotePb*) defaultInstance {
  return [FscVotePb defaultInstance];
}
- (FscVotePb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscVotePb*) buildPartial {
  FscVotePb* returnMe = resultFscVotePb;
  self.resultFscVotePb = nil;
  return returnMe;
}
- (FscVotePbBuilder*) mergeFrom:(FscVotePb*) other {
  if (other == [FscVotePb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasVoteName) {
    [self setVoteName:other.voteName];
  }
  if (other.hasVoteNum) {
    [self setVoteNum:other.voteNum];
  }
  if (other.hasCoverImg) {
    [self setCoverImg:other.coverImg];
  }
  if (other.hasDeadline) {
    [self setDeadline:other.deadline];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasQuesList) {
    [self setQuesList:other.quesList];
  }
  if (other.fscVoteQuesPbArray.count > 0) {
    if (resultFscVotePb.fscVoteQuesPbArray == nil) {
      resultFscVotePb.fscVoteQuesPbArray = [[NSMutableArray alloc] initWithArray:other.fscVoteQuesPbArray];
    } else {
      [resultFscVotePb.fscVoteQuesPbArray addObjectsFromArray:other.fscVoteQuesPbArray];
    }
  }
  if (other.hasApplyStatus) {
    [self setApplyStatus:other.applyStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscVotePbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscVotePbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setVoteName:[input readString]];
        break;
      }
      case 24: {
        [self setVoteNum:[input readInt64]];
        break;
      }
      case 34: {
        [self setCoverImg:[input readString]];
        break;
      }
      case 40: {
        [self setDeadline:[input readInt64]];
        break;
      }
      case 48: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 58: {
        [self setQuesList:[input readString]];
        break;
      }
      case 66: {
        FscVoteQuesPbBuilder* subBuilder = [FscVoteQuesPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFscVoteQuesPb:[subBuilder buildPartial]];
        break;
      }
      case 72: {
        [self setApplyStatus:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultFscVotePb.hasId;
}
- (SInt64) id {
  return resultFscVotePb.id;
}
- (FscVotePbBuilder*) setId:(SInt64) value {
  resultFscVotePb.hasId = YES;
  resultFscVotePb.id = value;
  return self;
}
- (FscVotePbBuilder*) clearId {
  resultFscVotePb.hasId = NO;
  resultFscVotePb.id = 0L;
  return self;
}
- (BOOL) hasVoteName {
  return resultFscVotePb.hasVoteName;
}
- (NSString*) voteName {
  return resultFscVotePb.voteName;
}
- (FscVotePbBuilder*) setVoteName:(NSString*) value {
  resultFscVotePb.hasVoteName = YES;
  resultFscVotePb.voteName = value;
  return self;
}
- (FscVotePbBuilder*) clearVoteName {
  resultFscVotePb.hasVoteName = NO;
  resultFscVotePb.voteName = @"";
  return self;
}
- (BOOL) hasVoteNum {
  return resultFscVotePb.hasVoteNum;
}
- (SInt64) voteNum {
  return resultFscVotePb.voteNum;
}
- (FscVotePbBuilder*) setVoteNum:(SInt64) value {
  resultFscVotePb.hasVoteNum = YES;
  resultFscVotePb.voteNum = value;
  return self;
}
- (FscVotePbBuilder*) clearVoteNum {
  resultFscVotePb.hasVoteNum = NO;
  resultFscVotePb.voteNum = 0L;
  return self;
}
- (BOOL) hasCoverImg {
  return resultFscVotePb.hasCoverImg;
}
- (NSString*) coverImg {
  return resultFscVotePb.coverImg;
}
- (FscVotePbBuilder*) setCoverImg:(NSString*) value {
  resultFscVotePb.hasCoverImg = YES;
  resultFscVotePb.coverImg = value;
  return self;
}
- (FscVotePbBuilder*) clearCoverImg {
  resultFscVotePb.hasCoverImg = NO;
  resultFscVotePb.coverImg = @"";
  return self;
}
- (BOOL) hasDeadline {
  return resultFscVotePb.hasDeadline;
}
- (SInt64) deadline {
  return resultFscVotePb.deadline;
}
- (FscVotePbBuilder*) setDeadline:(SInt64) value {
  resultFscVotePb.hasDeadline = YES;
  resultFscVotePb.deadline = value;
  return self;
}
- (FscVotePbBuilder*) clearDeadline {
  resultFscVotePb.hasDeadline = NO;
  resultFscVotePb.deadline = 0L;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultFscVotePb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultFscVotePb.modifiedDate;
}
- (FscVotePbBuilder*) setModifiedDate:(SInt64) value {
  resultFscVotePb.hasModifiedDate = YES;
  resultFscVotePb.modifiedDate = value;
  return self;
}
- (FscVotePbBuilder*) clearModifiedDate {
  resultFscVotePb.hasModifiedDate = NO;
  resultFscVotePb.modifiedDate = 0L;
  return self;
}
- (BOOL) hasQuesList {
  return resultFscVotePb.hasQuesList;
}
- (NSString*) quesList {
  return resultFscVotePb.quesList;
}
- (FscVotePbBuilder*) setQuesList:(NSString*) value {
  resultFscVotePb.hasQuesList = YES;
  resultFscVotePb.quesList = value;
  return self;
}
- (FscVotePbBuilder*) clearQuesList {
  resultFscVotePb.hasQuesList = NO;
  resultFscVotePb.quesList = @"";
  return self;
}
- (NSMutableArray *)fscVoteQuesPb {
  return resultFscVotePb.fscVoteQuesPbArray;
}
- (FscVoteQuesPb*)fscVoteQuesPbAtIndex:(NSUInteger)index {
  return [resultFscVotePb fscVoteQuesPbAtIndex:index];
}
- (FscVotePbBuilder *)addFscVoteQuesPb:(FscVoteQuesPb*)value {
  if (resultFscVotePb.fscVoteQuesPbArray == nil) {
    resultFscVotePb.fscVoteQuesPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscVotePb.fscVoteQuesPbArray addObject:value];
  return self;
}
- (FscVotePbBuilder *)setFscVoteQuesPbArray:(NSArray *)array {
  resultFscVotePb.fscVoteQuesPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscVotePbBuilder *)clearFscVoteQuesPb {
  resultFscVotePb.fscVoteQuesPbArray = nil;
  return self;
}
- (BOOL) hasApplyStatus {
  return resultFscVotePb.hasApplyStatus;
}
- (SInt32) applyStatus {
  return resultFscVotePb.applyStatus;
}
- (FscVotePbBuilder*) setApplyStatus:(SInt32) value {
  resultFscVotePb.hasApplyStatus = YES;
  resultFscVotePb.applyStatus = value;
  return self;
}
- (FscVotePbBuilder*) clearApplyStatus {
  resultFscVotePb.hasApplyStatus = NO;
  resultFscVotePb.applyStatus = 0;
  return self;
}
@end

@interface FscVoteQuesPb ()
@property SInt64 id;
@property SInt64 voteId;
@property (strong) NSString* title;
@property SInt32 checkType;
@property (strong) NSMutableArray * fscVoteQuesItemPbArray;
@end

@implementation FscVoteQuesPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasVoteId {
  return !!hasVoteId_;
}
- (void) setHasVoteId:(BOOL) _value_ {
  hasVoteId_ = !!_value_;
}
@synthesize voteId;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasCheckType {
  return !!hasCheckType_;
}
- (void) setHasCheckType:(BOOL) _value_ {
  hasCheckType_ = !!_value_;
}
@synthesize checkType;
@synthesize fscVoteQuesItemPbArray;
@dynamic fscVoteQuesItemPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.voteId = 0L;
    self.title = @"";
    self.checkType = 0;
  }
  return self;
}
static FscVoteQuesPb* defaultFscVoteQuesPbInstance = nil;
+ (void) initialize {
  if (self == [FscVoteQuesPb class]) {
    defaultFscVoteQuesPbInstance = [[FscVoteQuesPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscVoteQuesPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscVoteQuesPbInstance;
}
- (NSArray *)fscVoteQuesItemPb {
  return fscVoteQuesItemPbArray;
}
- (FscVoteQuesItemPb*)fscVoteQuesItemPbAtIndex:(NSUInteger)index {
  return [fscVoteQuesItemPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasVoteId) {
    [output writeInt64:2 value:self.voteId];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasCheckType) {
    [output writeInt32:4 value:self.checkType];
  }
  [self.fscVoteQuesItemPbArray enumerateObjectsUsingBlock:^(FscVoteQuesItemPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasVoteId) {
    size_ += computeInt64Size(2, self.voteId);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasCheckType) {
    size_ += computeInt32Size(4, self.checkType);
  }
  [self.fscVoteQuesItemPbArray enumerateObjectsUsingBlock:^(FscVoteQuesItemPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscVoteQuesPb*) parseFromData:(NSData*) data {
  return (FscVoteQuesPb*)[[[FscVoteQuesPb builder] mergeFromData:data] build];
}
+ (FscVoteQuesPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVoteQuesPb*)[[[FscVoteQuesPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscVoteQuesPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscVoteQuesPb*)[[[FscVoteQuesPb builder] mergeFromInputStream:input] build];
}
+ (FscVoteQuesPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVoteQuesPb*)[[[FscVoteQuesPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscVoteQuesPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscVoteQuesPb*)[[[FscVoteQuesPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscVoteQuesPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVoteQuesPb*)[[[FscVoteQuesPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscVoteQuesPbBuilder*) builder {
  return [[FscVoteQuesPbBuilder alloc] init];
}
+ (FscVoteQuesPbBuilder*) builderWithPrototype:(FscVoteQuesPb*) prototype {
  return [[FscVoteQuesPb builder] mergeFrom:prototype];
}
- (FscVoteQuesPbBuilder*) builder {
  return [FscVoteQuesPb builder];
}
- (FscVoteQuesPbBuilder*) toBuilder {
  return [FscVoteQuesPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasVoteId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voteId", [NSNumber numberWithLongLong:self.voteId]];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasCheckType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"checkType", [NSNumber numberWithInteger:self.checkType]];
  }
  [self.fscVoteQuesItemPbArray enumerateObjectsUsingBlock:^(FscVoteQuesItemPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"fscVoteQuesItemPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasVoteId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.voteId] forKey: @"voteId"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasCheckType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.checkType] forKey: @"checkType"];
  }
  for (FscVoteQuesItemPb* element in self.fscVoteQuesItemPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"fscVoteQuesItemPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscVoteQuesPb class]]) {
    return NO;
  }
  FscVoteQuesPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasVoteId == otherMessage.hasVoteId &&
      (!self.hasVoteId || self.voteId == otherMessage.voteId) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasCheckType == otherMessage.hasCheckType &&
      (!self.hasCheckType || self.checkType == otherMessage.checkType) &&
      [self.fscVoteQuesItemPbArray isEqualToArray:otherMessage.fscVoteQuesItemPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasVoteId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.voteId] hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasCheckType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.checkType] hash];
  }
  [self.fscVoteQuesItemPbArray enumerateObjectsUsingBlock:^(FscVoteQuesItemPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscVoteQuesPbBuilder()
@property (strong) FscVoteQuesPb* resultFscVoteQuesPb;
@end

@implementation FscVoteQuesPbBuilder
@synthesize resultFscVoteQuesPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscVoteQuesPb = [[FscVoteQuesPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscVoteQuesPb;
}
- (FscVoteQuesPbBuilder*) clear {
  self.resultFscVoteQuesPb = [[FscVoteQuesPb alloc] init];
  return self;
}
- (FscVoteQuesPbBuilder*) clone {
  return [FscVoteQuesPb builderWithPrototype:resultFscVoteQuesPb];
}
- (FscVoteQuesPb*) defaultInstance {
  return [FscVoteQuesPb defaultInstance];
}
- (FscVoteQuesPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscVoteQuesPb*) buildPartial {
  FscVoteQuesPb* returnMe = resultFscVoteQuesPb;
  self.resultFscVoteQuesPb = nil;
  return returnMe;
}
- (FscVoteQuesPbBuilder*) mergeFrom:(FscVoteQuesPb*) other {
  if (other == [FscVoteQuesPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasVoteId) {
    [self setVoteId:other.voteId];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasCheckType) {
    [self setCheckType:other.checkType];
  }
  if (other.fscVoteQuesItemPbArray.count > 0) {
    if (resultFscVoteQuesPb.fscVoteQuesItemPbArray == nil) {
      resultFscVoteQuesPb.fscVoteQuesItemPbArray = [[NSMutableArray alloc] initWithArray:other.fscVoteQuesItemPbArray];
    } else {
      [resultFscVoteQuesPb.fscVoteQuesItemPbArray addObjectsFromArray:other.fscVoteQuesItemPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscVoteQuesPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscVoteQuesPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setVoteId:[input readInt64]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 32: {
        [self setCheckType:[input readInt32]];
        break;
      }
      case 42: {
        FscVoteQuesItemPbBuilder* subBuilder = [FscVoteQuesItemPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFscVoteQuesItemPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultFscVoteQuesPb.hasId;
}
- (SInt64) id {
  return resultFscVoteQuesPb.id;
}
- (FscVoteQuesPbBuilder*) setId:(SInt64) value {
  resultFscVoteQuesPb.hasId = YES;
  resultFscVoteQuesPb.id = value;
  return self;
}
- (FscVoteQuesPbBuilder*) clearId {
  resultFscVoteQuesPb.hasId = NO;
  resultFscVoteQuesPb.id = 0L;
  return self;
}
- (BOOL) hasVoteId {
  return resultFscVoteQuesPb.hasVoteId;
}
- (SInt64) voteId {
  return resultFscVoteQuesPb.voteId;
}
- (FscVoteQuesPbBuilder*) setVoteId:(SInt64) value {
  resultFscVoteQuesPb.hasVoteId = YES;
  resultFscVoteQuesPb.voteId = value;
  return self;
}
- (FscVoteQuesPbBuilder*) clearVoteId {
  resultFscVoteQuesPb.hasVoteId = NO;
  resultFscVoteQuesPb.voteId = 0L;
  return self;
}
- (BOOL) hasTitle {
  return resultFscVoteQuesPb.hasTitle;
}
- (NSString*) title {
  return resultFscVoteQuesPb.title;
}
- (FscVoteQuesPbBuilder*) setTitle:(NSString*) value {
  resultFscVoteQuesPb.hasTitle = YES;
  resultFscVoteQuesPb.title = value;
  return self;
}
- (FscVoteQuesPbBuilder*) clearTitle {
  resultFscVoteQuesPb.hasTitle = NO;
  resultFscVoteQuesPb.title = @"";
  return self;
}
- (BOOL) hasCheckType {
  return resultFscVoteQuesPb.hasCheckType;
}
- (SInt32) checkType {
  return resultFscVoteQuesPb.checkType;
}
- (FscVoteQuesPbBuilder*) setCheckType:(SInt32) value {
  resultFscVoteQuesPb.hasCheckType = YES;
  resultFscVoteQuesPb.checkType = value;
  return self;
}
- (FscVoteQuesPbBuilder*) clearCheckType {
  resultFscVoteQuesPb.hasCheckType = NO;
  resultFscVoteQuesPb.checkType = 0;
  return self;
}
- (NSMutableArray *)fscVoteQuesItemPb {
  return resultFscVoteQuesPb.fscVoteQuesItemPbArray;
}
- (FscVoteQuesItemPb*)fscVoteQuesItemPbAtIndex:(NSUInteger)index {
  return [resultFscVoteQuesPb fscVoteQuesItemPbAtIndex:index];
}
- (FscVoteQuesPbBuilder *)addFscVoteQuesItemPb:(FscVoteQuesItemPb*)value {
  if (resultFscVoteQuesPb.fscVoteQuesItemPbArray == nil) {
    resultFscVoteQuesPb.fscVoteQuesItemPbArray = [[NSMutableArray alloc]init];
  }
  [resultFscVoteQuesPb.fscVoteQuesItemPbArray addObject:value];
  return self;
}
- (FscVoteQuesPbBuilder *)setFscVoteQuesItemPbArray:(NSArray *)array {
  resultFscVoteQuesPb.fscVoteQuesItemPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscVoteQuesPbBuilder *)clearFscVoteQuesItemPb {
  resultFscVoteQuesPb.fscVoteQuesItemPbArray = nil;
  return self;
}
@end

@interface FscVoteQuesItemPb ()
@property SInt64 id;
@property SInt64 voteQuesId;
@property (strong) NSString* title;
@end

@implementation FscVoteQuesItemPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasVoteQuesId {
  return !!hasVoteQuesId_;
}
- (void) setHasVoteQuesId:(BOOL) _value_ {
  hasVoteQuesId_ = !!_value_;
}
@synthesize voteQuesId;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.voteQuesId = 0L;
    self.title = @"";
  }
  return self;
}
static FscVoteQuesItemPb* defaultFscVoteQuesItemPbInstance = nil;
+ (void) initialize {
  if (self == [FscVoteQuesItemPb class]) {
    defaultFscVoteQuesItemPbInstance = [[FscVoteQuesItemPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscVoteQuesItemPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscVoteQuesItemPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasVoteQuesId) {
    [output writeInt64:2 value:self.voteQuesId];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasVoteQuesId) {
    size_ += computeInt64Size(2, self.voteQuesId);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscVoteQuesItemPb*) parseFromData:(NSData*) data {
  return (FscVoteQuesItemPb*)[[[FscVoteQuesItemPb builder] mergeFromData:data] build];
}
+ (FscVoteQuesItemPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVoteQuesItemPb*)[[[FscVoteQuesItemPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscVoteQuesItemPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscVoteQuesItemPb*)[[[FscVoteQuesItemPb builder] mergeFromInputStream:input] build];
}
+ (FscVoteQuesItemPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVoteQuesItemPb*)[[[FscVoteQuesItemPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscVoteQuesItemPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscVoteQuesItemPb*)[[[FscVoteQuesItemPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscVoteQuesItemPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscVoteQuesItemPb*)[[[FscVoteQuesItemPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscVoteQuesItemPbBuilder*) builder {
  return [[FscVoteQuesItemPbBuilder alloc] init];
}
+ (FscVoteQuesItemPbBuilder*) builderWithPrototype:(FscVoteQuesItemPb*) prototype {
  return [[FscVoteQuesItemPb builder] mergeFrom:prototype];
}
- (FscVoteQuesItemPbBuilder*) builder {
  return [FscVoteQuesItemPb builder];
}
- (FscVoteQuesItemPbBuilder*) toBuilder {
  return [FscVoteQuesItemPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasVoteQuesId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voteQuesId", [NSNumber numberWithLongLong:self.voteQuesId]];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasVoteQuesId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.voteQuesId] forKey: @"voteQuesId"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscVoteQuesItemPb class]]) {
    return NO;
  }
  FscVoteQuesItemPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasVoteQuesId == otherMessage.hasVoteQuesId &&
      (!self.hasVoteQuesId || self.voteQuesId == otherMessage.voteQuesId) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasVoteQuesId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.voteQuesId] hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscVoteQuesItemPbBuilder()
@property (strong) FscVoteQuesItemPb* resultFscVoteQuesItemPb;
@end

@implementation FscVoteQuesItemPbBuilder
@synthesize resultFscVoteQuesItemPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscVoteQuesItemPb = [[FscVoteQuesItemPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscVoteQuesItemPb;
}
- (FscVoteQuesItemPbBuilder*) clear {
  self.resultFscVoteQuesItemPb = [[FscVoteQuesItemPb alloc] init];
  return self;
}
- (FscVoteQuesItemPbBuilder*) clone {
  return [FscVoteQuesItemPb builderWithPrototype:resultFscVoteQuesItemPb];
}
- (FscVoteQuesItemPb*) defaultInstance {
  return [FscVoteQuesItemPb defaultInstance];
}
- (FscVoteQuesItemPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscVoteQuesItemPb*) buildPartial {
  FscVoteQuesItemPb* returnMe = resultFscVoteQuesItemPb;
  self.resultFscVoteQuesItemPb = nil;
  return returnMe;
}
- (FscVoteQuesItemPbBuilder*) mergeFrom:(FscVoteQuesItemPb*) other {
  if (other == [FscVoteQuesItemPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasVoteQuesId) {
    [self setVoteQuesId:other.voteQuesId];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscVoteQuesItemPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscVoteQuesItemPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setVoteQuesId:[input readInt64]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultFscVoteQuesItemPb.hasId;
}
- (SInt64) id {
  return resultFscVoteQuesItemPb.id;
}
- (FscVoteQuesItemPbBuilder*) setId:(SInt64) value {
  resultFscVoteQuesItemPb.hasId = YES;
  resultFscVoteQuesItemPb.id = value;
  return self;
}
- (FscVoteQuesItemPbBuilder*) clearId {
  resultFscVoteQuesItemPb.hasId = NO;
  resultFscVoteQuesItemPb.id = 0L;
  return self;
}
- (BOOL) hasVoteQuesId {
  return resultFscVoteQuesItemPb.hasVoteQuesId;
}
- (SInt64) voteQuesId {
  return resultFscVoteQuesItemPb.voteQuesId;
}
- (FscVoteQuesItemPbBuilder*) setVoteQuesId:(SInt64) value {
  resultFscVoteQuesItemPb.hasVoteQuesId = YES;
  resultFscVoteQuesItemPb.voteQuesId = value;
  return self;
}
- (FscVoteQuesItemPbBuilder*) clearVoteQuesId {
  resultFscVoteQuesItemPb.hasVoteQuesId = NO;
  resultFscVoteQuesItemPb.voteQuesId = 0L;
  return self;
}
- (BOOL) hasTitle {
  return resultFscVoteQuesItemPb.hasTitle;
}
- (NSString*) title {
  return resultFscVoteQuesItemPb.title;
}
- (FscVoteQuesItemPbBuilder*) setTitle:(NSString*) value {
  resultFscVoteQuesItemPb.hasTitle = YES;
  resultFscVoteQuesItemPb.title = value;
  return self;
}
- (FscVoteQuesItemPbBuilder*) clearTitle {
  resultFscVoteQuesItemPb.hasTitle = NO;
  resultFscVoteQuesItemPb.title = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
