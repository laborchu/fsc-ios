// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscNotice.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscNoticeRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscNoticeRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FscNoticeListPb ()
@property (strong) NSMutableArray * noticePbArray;
@end

@implementation FscNoticeListPb

@synthesize noticePbArray;
@dynamic noticePb;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static FscNoticeListPb* defaultFscNoticeListPbInstance = nil;
+ (void) initialize {
  if (self == [FscNoticeListPb class]) {
    defaultFscNoticeListPbInstance = [[FscNoticeListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscNoticeListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscNoticeListPbInstance;
}
- (NSArray *)noticePb {
  return noticePbArray;
}
- (FscNoticePb*)noticePbAtIndex:(NSUInteger)index {
  return [noticePbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.noticePbArray enumerateObjectsUsingBlock:^(FscNoticePb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.noticePbArray enumerateObjectsUsingBlock:^(FscNoticePb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscNoticeListPb*) parseFromData:(NSData*) data {
  return (FscNoticeListPb*)[[[FscNoticeListPb builder] mergeFromData:data] build];
}
+ (FscNoticeListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscNoticeListPb*)[[[FscNoticeListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscNoticeListPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscNoticeListPb*)[[[FscNoticeListPb builder] mergeFromInputStream:input] build];
}
+ (FscNoticeListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscNoticeListPb*)[[[FscNoticeListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscNoticeListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscNoticeListPb*)[[[FscNoticeListPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscNoticeListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscNoticeListPb*)[[[FscNoticeListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscNoticeListPbBuilder*) builder {
  return [[FscNoticeListPbBuilder alloc] init];
}
+ (FscNoticeListPbBuilder*) builderWithPrototype:(FscNoticeListPb*) prototype {
  return [[FscNoticeListPb builder] mergeFrom:prototype];
}
- (FscNoticeListPbBuilder*) builder {
  return [FscNoticeListPb builder];
}
- (FscNoticeListPbBuilder*) toBuilder {
  return [FscNoticeListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.noticePbArray enumerateObjectsUsingBlock:^(FscNoticePb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"noticePb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (FscNoticePb* element in self.noticePbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"noticePb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscNoticeListPb class]]) {
    return NO;
  }
  FscNoticeListPb *otherMessage = other;
  return
      [self.noticePbArray isEqualToArray:otherMessage.noticePbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.noticePbArray enumerateObjectsUsingBlock:^(FscNoticePb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscNoticeListPbBuilder()
@property (strong) FscNoticeListPb* resultFscNoticeListPb;
@end

@implementation FscNoticeListPbBuilder
@synthesize resultFscNoticeListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscNoticeListPb = [[FscNoticeListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscNoticeListPb;
}
- (FscNoticeListPbBuilder*) clear {
  self.resultFscNoticeListPb = [[FscNoticeListPb alloc] init];
  return self;
}
- (FscNoticeListPbBuilder*) clone {
  return [FscNoticeListPb builderWithPrototype:resultFscNoticeListPb];
}
- (FscNoticeListPb*) defaultInstance {
  return [FscNoticeListPb defaultInstance];
}
- (FscNoticeListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscNoticeListPb*) buildPartial {
  FscNoticeListPb* returnMe = resultFscNoticeListPb;
  self.resultFscNoticeListPb = nil;
  return returnMe;
}
- (FscNoticeListPbBuilder*) mergeFrom:(FscNoticeListPb*) other {
  if (other == [FscNoticeListPb defaultInstance]) {
    return self;
  }
  if (other.noticePbArray.count > 0) {
    if (resultFscNoticeListPb.noticePbArray == nil) {
      resultFscNoticeListPb.noticePbArray = [[NSMutableArray alloc] initWithArray:other.noticePbArray];
    } else {
      [resultFscNoticeListPb.noticePbArray addObjectsFromArray:other.noticePbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscNoticeListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscNoticeListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FscNoticePbBuilder* subBuilder = [FscNoticePb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNoticePb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)noticePb {
  return resultFscNoticeListPb.noticePbArray;
}
- (FscNoticePb*)noticePbAtIndex:(NSUInteger)index {
  return [resultFscNoticeListPb noticePbAtIndex:index];
}
- (FscNoticeListPbBuilder *)addNoticePb:(FscNoticePb*)value {
  if (resultFscNoticeListPb.noticePbArray == nil) {
    resultFscNoticeListPb.noticePbArray = [[NSMutableArray alloc]init];
  }
  [resultFscNoticeListPb.noticePbArray addObject:value];
  return self;
}
- (FscNoticeListPbBuilder *)setNoticePbArray:(NSArray *)array {
  resultFscNoticeListPb.noticePbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FscNoticeListPbBuilder *)clearNoticePb {
  resultFscNoticeListPb.noticePbArray = nil;
  return self;
}
@end

@interface FscNoticePb ()
@property SInt64 id;
@property (strong) NSString* noticeType;
@property (strong) NSString* title;
@property (strong) NSString* coverImg;
@property (strong) NSString* summary;
@property SInt64 createdDate;
@property SInt64 modifiedDate;
@end

@implementation FscNoticePb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasNoticeType {
  return !!hasNoticeType_;
}
- (void) setHasNoticeType:(BOOL) _value_ {
  hasNoticeType_ = !!_value_;
}
@synthesize noticeType;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasCoverImg {
  return !!hasCoverImg_;
}
- (void) setHasCoverImg:(BOOL) _value_ {
  hasCoverImg_ = !!_value_;
}
@synthesize coverImg;
- (BOOL) hasSummary {
  return !!hasSummary_;
}
- (void) setHasSummary:(BOOL) _value_ {
  hasSummary_ = !!_value_;
}
@synthesize summary;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.noticeType = @"";
    self.title = @"";
    self.coverImg = @"";
    self.summary = @"";
    self.createdDate = 0L;
    self.modifiedDate = 0L;
  }
  return self;
}
static FscNoticePb* defaultFscNoticePbInstance = nil;
+ (void) initialize {
  if (self == [FscNoticePb class]) {
    defaultFscNoticePbInstance = [[FscNoticePb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscNoticePbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscNoticePbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasNoticeType) {
    [output writeString:2 value:self.noticeType];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasCoverImg) {
    [output writeString:4 value:self.coverImg];
  }
  if (self.hasSummary) {
    [output writeString:5 value:self.summary];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:6 value:self.createdDate];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:7 value:self.modifiedDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasNoticeType) {
    size_ += computeStringSize(2, self.noticeType);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasCoverImg) {
    size_ += computeStringSize(4, self.coverImg);
  }
  if (self.hasSummary) {
    size_ += computeStringSize(5, self.summary);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(6, self.createdDate);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(7, self.modifiedDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscNoticePb*) parseFromData:(NSData*) data {
  return (FscNoticePb*)[[[FscNoticePb builder] mergeFromData:data] build];
}
+ (FscNoticePb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscNoticePb*)[[[FscNoticePb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscNoticePb*) parseFromInputStream:(NSInputStream*) input {
  return (FscNoticePb*)[[[FscNoticePb builder] mergeFromInputStream:input] build];
}
+ (FscNoticePb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscNoticePb*)[[[FscNoticePb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscNoticePb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscNoticePb*)[[[FscNoticePb builder] mergeFromCodedInputStream:input] build];
}
+ (FscNoticePb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscNoticePb*)[[[FscNoticePb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscNoticePbBuilder*) builder {
  return [[FscNoticePbBuilder alloc] init];
}
+ (FscNoticePbBuilder*) builderWithPrototype:(FscNoticePb*) prototype {
  return [[FscNoticePb builder] mergeFrom:prototype];
}
- (FscNoticePbBuilder*) builder {
  return [FscNoticePb builder];
}
- (FscNoticePbBuilder*) toBuilder {
  return [FscNoticePb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasNoticeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"noticeType", self.noticeType];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasCoverImg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coverImg", self.coverImg];
  }
  if (self.hasSummary) {
    [output appendFormat:@"%@%@: %@\n", indent, @"summary", self.summary];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasNoticeType) {
    [dictionary setObject: self.noticeType forKey: @"noticeType"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasCoverImg) {
    [dictionary setObject: self.coverImg forKey: @"coverImg"];
  }
  if (self.hasSummary) {
    [dictionary setObject: self.summary forKey: @"summary"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscNoticePb class]]) {
    return NO;
  }
  FscNoticePb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasNoticeType == otherMessage.hasNoticeType &&
      (!self.hasNoticeType || [self.noticeType isEqual:otherMessage.noticeType]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasCoverImg == otherMessage.hasCoverImg &&
      (!self.hasCoverImg || [self.coverImg isEqual:otherMessage.coverImg]) &&
      self.hasSummary == otherMessage.hasSummary &&
      (!self.hasSummary || [self.summary isEqual:otherMessage.summary]) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasNoticeType) {
    hashCode = hashCode * 31 + [self.noticeType hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasCoverImg) {
    hashCode = hashCode * 31 + [self.coverImg hash];
  }
  if (self.hasSummary) {
    hashCode = hashCode * 31 + [self.summary hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscNoticePbBuilder()
@property (strong) FscNoticePb* resultFscNoticePb;
@end

@implementation FscNoticePbBuilder
@synthesize resultFscNoticePb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscNoticePb = [[FscNoticePb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscNoticePb;
}
- (FscNoticePbBuilder*) clear {
  self.resultFscNoticePb = [[FscNoticePb alloc] init];
  return self;
}
- (FscNoticePbBuilder*) clone {
  return [FscNoticePb builderWithPrototype:resultFscNoticePb];
}
- (FscNoticePb*) defaultInstance {
  return [FscNoticePb defaultInstance];
}
- (FscNoticePb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscNoticePb*) buildPartial {
  FscNoticePb* returnMe = resultFscNoticePb;
  self.resultFscNoticePb = nil;
  return returnMe;
}
- (FscNoticePbBuilder*) mergeFrom:(FscNoticePb*) other {
  if (other == [FscNoticePb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasNoticeType) {
    [self setNoticeType:other.noticeType];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasCoverImg) {
    [self setCoverImg:other.coverImg];
  }
  if (other.hasSummary) {
    [self setSummary:other.summary];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscNoticePbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscNoticePbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setNoticeType:[input readString]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 34: {
        [self setCoverImg:[input readString]];
        break;
      }
      case 42: {
        [self setSummary:[input readString]];
        break;
      }
      case 48: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 56: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultFscNoticePb.hasId;
}
- (SInt64) id {
  return resultFscNoticePb.id;
}
- (FscNoticePbBuilder*) setId:(SInt64) value {
  resultFscNoticePb.hasId = YES;
  resultFscNoticePb.id = value;
  return self;
}
- (FscNoticePbBuilder*) clearId {
  resultFscNoticePb.hasId = NO;
  resultFscNoticePb.id = 0L;
  return self;
}
- (BOOL) hasNoticeType {
  return resultFscNoticePb.hasNoticeType;
}
- (NSString*) noticeType {
  return resultFscNoticePb.noticeType;
}
- (FscNoticePbBuilder*) setNoticeType:(NSString*) value {
  resultFscNoticePb.hasNoticeType = YES;
  resultFscNoticePb.noticeType = value;
  return self;
}
- (FscNoticePbBuilder*) clearNoticeType {
  resultFscNoticePb.hasNoticeType = NO;
  resultFscNoticePb.noticeType = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultFscNoticePb.hasTitle;
}
- (NSString*) title {
  return resultFscNoticePb.title;
}
- (FscNoticePbBuilder*) setTitle:(NSString*) value {
  resultFscNoticePb.hasTitle = YES;
  resultFscNoticePb.title = value;
  return self;
}
- (FscNoticePbBuilder*) clearTitle {
  resultFscNoticePb.hasTitle = NO;
  resultFscNoticePb.title = @"";
  return self;
}
- (BOOL) hasCoverImg {
  return resultFscNoticePb.hasCoverImg;
}
- (NSString*) coverImg {
  return resultFscNoticePb.coverImg;
}
- (FscNoticePbBuilder*) setCoverImg:(NSString*) value {
  resultFscNoticePb.hasCoverImg = YES;
  resultFscNoticePb.coverImg = value;
  return self;
}
- (FscNoticePbBuilder*) clearCoverImg {
  resultFscNoticePb.hasCoverImg = NO;
  resultFscNoticePb.coverImg = @"";
  return self;
}
- (BOOL) hasSummary {
  return resultFscNoticePb.hasSummary;
}
- (NSString*) summary {
  return resultFscNoticePb.summary;
}
- (FscNoticePbBuilder*) setSummary:(NSString*) value {
  resultFscNoticePb.hasSummary = YES;
  resultFscNoticePb.summary = value;
  return self;
}
- (FscNoticePbBuilder*) clearSummary {
  resultFscNoticePb.hasSummary = NO;
  resultFscNoticePb.summary = @"";
  return self;
}
- (BOOL) hasCreatedDate {
  return resultFscNoticePb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultFscNoticePb.createdDate;
}
- (FscNoticePbBuilder*) setCreatedDate:(SInt64) value {
  resultFscNoticePb.hasCreatedDate = YES;
  resultFscNoticePb.createdDate = value;
  return self;
}
- (FscNoticePbBuilder*) clearCreatedDate {
  resultFscNoticePb.hasCreatedDate = NO;
  resultFscNoticePb.createdDate = 0L;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultFscNoticePb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultFscNoticePb.modifiedDate;
}
- (FscNoticePbBuilder*) setModifiedDate:(SInt64) value {
  resultFscNoticePb.hasModifiedDate = YES;
  resultFscNoticePb.modifiedDate = value;
  return self;
}
- (FscNoticePbBuilder*) clearModifiedDate {
  resultFscNoticePb.hasModifiedDate = NO;
  resultFscNoticePb.modifiedDate = 0L;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
