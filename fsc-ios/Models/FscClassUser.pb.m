// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscClassUser.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscClassUserRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscClassUserRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ClassUserListPb ()
@property (strong) NSMutableArray * classUserIdsArray;
@property (strong) NSMutableArray * classUserArray;
@property (strong) NSMutableArray * classStudentArray;
@property SInt64 userModifiedDate;
@property SInt64 studentModifiedDate;
@end

@implementation ClassUserListPb

@synthesize classUserIdsArray;
@dynamic classUserIds;
@synthesize classUserArray;
@dynamic classUser;
@synthesize classStudentArray;
@dynamic classStudent;
- (BOOL) hasUserModifiedDate {
  return !!hasUserModifiedDate_;
}
- (void) setHasUserModifiedDate:(BOOL) _value_ {
  hasUserModifiedDate_ = !!_value_;
}
@synthesize userModifiedDate;
- (BOOL) hasStudentModifiedDate {
  return !!hasStudentModifiedDate_;
}
- (void) setHasStudentModifiedDate:(BOOL) _value_ {
  hasStudentModifiedDate_ = !!_value_;
}
@synthesize studentModifiedDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.userModifiedDate = 0L;
    self.studentModifiedDate = 0L;
  }
  return self;
}
static ClassUserListPb* defaultClassUserListPbInstance = nil;
+ (void) initialize {
  if (self == [ClassUserListPb class]) {
    defaultClassUserListPbInstance = [[ClassUserListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultClassUserListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultClassUserListPbInstance;
}
- (NSArray *)classUserIds {
  return classUserIdsArray;
}
- (NSString*)classUserIdsAtIndex:(NSUInteger)index {
  return [classUserIdsArray objectAtIndex:index];
}
- (NSArray *)classUser {
  return classUserArray;
}
- (ClassUserPb*)classUserAtIndex:(NSUInteger)index {
  return [classUserArray objectAtIndex:index];
}
- (NSArray *)classStudent {
  return classStudentArray;
}
- (ClassStudentPb*)classStudentAtIndex:(NSUInteger)index {
  return [classStudentArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.classUserIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  [self.classUserArray enumerateObjectsUsingBlock:^(ClassUserPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.classStudentArray enumerateObjectsUsingBlock:^(ClassStudentPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasUserModifiedDate) {
    [output writeInt64:4 value:self.userModifiedDate];
  }
  if (self.hasStudentModifiedDate) {
    [output writeInt64:5 value:self.studentModifiedDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.classUserIdsArray.count;
    [self.classUserIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.classUserArray enumerateObjectsUsingBlock:^(ClassUserPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.classStudentArray enumerateObjectsUsingBlock:^(ClassStudentPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasUserModifiedDate) {
    size_ += computeInt64Size(4, self.userModifiedDate);
  }
  if (self.hasStudentModifiedDate) {
    size_ += computeInt64Size(5, self.studentModifiedDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClassUserListPb*) parseFromData:(NSData*) data {
  return (ClassUserListPb*)[[[ClassUserListPb builder] mergeFromData:data] build];
}
+ (ClassUserListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClassUserListPb*)[[[ClassUserListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClassUserListPb*) parseFromInputStream:(NSInputStream*) input {
  return (ClassUserListPb*)[[[ClassUserListPb builder] mergeFromInputStream:input] build];
}
+ (ClassUserListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClassUserListPb*)[[[ClassUserListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClassUserListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClassUserListPb*)[[[ClassUserListPb builder] mergeFromCodedInputStream:input] build];
}
+ (ClassUserListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClassUserListPb*)[[[ClassUserListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClassUserListPbBuilder*) builder {
  return [[ClassUserListPbBuilder alloc] init];
}
+ (ClassUserListPbBuilder*) builderWithPrototype:(ClassUserListPb*) prototype {
  return [[ClassUserListPb builder] mergeFrom:prototype];
}
- (ClassUserListPbBuilder*) builder {
  return [ClassUserListPb builder];
}
- (ClassUserListPbBuilder*) toBuilder {
  return [ClassUserListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.classUserIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classUserIds", obj];
  }];
  [self.classUserArray enumerateObjectsUsingBlock:^(ClassUserPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"classUser"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.classStudentArray enumerateObjectsUsingBlock:^(ClassStudentPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"classStudent"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasUserModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userModifiedDate", [NSNumber numberWithLongLong:self.userModifiedDate]];
  }
  if (self.hasStudentModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentModifiedDate", [NSNumber numberWithLongLong:self.studentModifiedDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.classUserIds forKey: @"classUserIds"];
  for (ClassUserPb* element in self.classUserArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"classUser"];
  }
  for (ClassStudentPb* element in self.classStudentArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"classStudent"];
  }
  if (self.hasUserModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userModifiedDate] forKey: @"userModifiedDate"];
  }
  if (self.hasStudentModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.studentModifiedDate] forKey: @"studentModifiedDate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClassUserListPb class]]) {
    return NO;
  }
  ClassUserListPb *otherMessage = other;
  return
      [self.classUserIdsArray isEqualToArray:otherMessage.classUserIdsArray] &&
      [self.classUserArray isEqualToArray:otherMessage.classUserArray] &&
      [self.classStudentArray isEqualToArray:otherMessage.classStudentArray] &&
      self.hasUserModifiedDate == otherMessage.hasUserModifiedDate &&
      (!self.hasUserModifiedDate || self.userModifiedDate == otherMessage.userModifiedDate) &&
      self.hasStudentModifiedDate == otherMessage.hasStudentModifiedDate &&
      (!self.hasStudentModifiedDate || self.studentModifiedDate == otherMessage.studentModifiedDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.classUserIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.classUserArray enumerateObjectsUsingBlock:^(ClassUserPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.classStudentArray enumerateObjectsUsingBlock:^(ClassStudentPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUserModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userModifiedDate] hash];
  }
  if (self.hasStudentModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.studentModifiedDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClassUserListPbBuilder()
@property (strong) ClassUserListPb* resultClassUserListPb;
@end

@implementation ClassUserListPbBuilder
@synthesize resultClassUserListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultClassUserListPb = [[ClassUserListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultClassUserListPb;
}
- (ClassUserListPbBuilder*) clear {
  self.resultClassUserListPb = [[ClassUserListPb alloc] init];
  return self;
}
- (ClassUserListPbBuilder*) clone {
  return [ClassUserListPb builderWithPrototype:resultClassUserListPb];
}
- (ClassUserListPb*) defaultInstance {
  return [ClassUserListPb defaultInstance];
}
- (ClassUserListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClassUserListPb*) buildPartial {
  ClassUserListPb* returnMe = resultClassUserListPb;
  self.resultClassUserListPb = nil;
  return returnMe;
}
- (ClassUserListPbBuilder*) mergeFrom:(ClassUserListPb*) other {
  if (other == [ClassUserListPb defaultInstance]) {
    return self;
  }
  if (other.classUserIdsArray.count > 0) {
    if (resultClassUserListPb.classUserIdsArray == nil) {
      resultClassUserListPb.classUserIdsArray = [[NSMutableArray alloc] initWithArray:other.classUserIdsArray];
    } else {
      [resultClassUserListPb.classUserIdsArray addObjectsFromArray:other.classUserIdsArray];
    }
  }
  if (other.classUserArray.count > 0) {
    if (resultClassUserListPb.classUserArray == nil) {
      resultClassUserListPb.classUserArray = [[NSMutableArray alloc] initWithArray:other.classUserArray];
    } else {
      [resultClassUserListPb.classUserArray addObjectsFromArray:other.classUserArray];
    }
  }
  if (other.classStudentArray.count > 0) {
    if (resultClassUserListPb.classStudentArray == nil) {
      resultClassUserListPb.classStudentArray = [[NSMutableArray alloc] initWithArray:other.classStudentArray];
    } else {
      [resultClassUserListPb.classStudentArray addObjectsFromArray:other.classStudentArray];
    }
  }
  if (other.hasUserModifiedDate) {
    [self setUserModifiedDate:other.userModifiedDate];
  }
  if (other.hasStudentModifiedDate) {
    [self setStudentModifiedDate:other.studentModifiedDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClassUserListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClassUserListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addClassUserIds:[input readString]];
        break;
      }
      case 18: {
        ClassUserPbBuilder* subBuilder = [ClassUserPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClassUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        ClassStudentPbBuilder* subBuilder = [ClassStudentPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClassStudent:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setUserModifiedDate:[input readInt64]];
        break;
      }
      case 40: {
        [self setStudentModifiedDate:[input readInt64]];
        break;
      }
    }
  }
}
- (NSMutableArray *)classUserIds {
  return resultClassUserListPb.classUserIdsArray;
}
- (NSString*)classUserIdsAtIndex:(NSUInteger)index {
  return [resultClassUserListPb classUserIdsAtIndex:index];
}
- (ClassUserListPbBuilder *)addClassUserIds:(NSString*)value {
  if (resultClassUserListPb.classUserIdsArray == nil) {
    resultClassUserListPb.classUserIdsArray = [[NSMutableArray alloc]init];
  }
  [resultClassUserListPb.classUserIdsArray addObject:value];
  return self;
}
- (ClassUserListPbBuilder *)setClassUserIdsArray:(NSArray *)array {
  resultClassUserListPb.classUserIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ClassUserListPbBuilder *)clearClassUserIds {
  resultClassUserListPb.classUserIdsArray = nil;
  return self;
}
- (NSMutableArray *)classUser {
  return resultClassUserListPb.classUserArray;
}
- (ClassUserPb*)classUserAtIndex:(NSUInteger)index {
  return [resultClassUserListPb classUserAtIndex:index];
}
- (ClassUserListPbBuilder *)addClassUser:(ClassUserPb*)value {
  if (resultClassUserListPb.classUserArray == nil) {
    resultClassUserListPb.classUserArray = [[NSMutableArray alloc]init];
  }
  [resultClassUserListPb.classUserArray addObject:value];
  return self;
}
- (ClassUserListPbBuilder *)setClassUserArray:(NSArray *)array {
  resultClassUserListPb.classUserArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ClassUserListPbBuilder *)clearClassUser {
  resultClassUserListPb.classUserArray = nil;
  return self;
}
- (NSMutableArray *)classStudent {
  return resultClassUserListPb.classStudentArray;
}
- (ClassStudentPb*)classStudentAtIndex:(NSUInteger)index {
  return [resultClassUserListPb classStudentAtIndex:index];
}
- (ClassUserListPbBuilder *)addClassStudent:(ClassStudentPb*)value {
  if (resultClassUserListPb.classStudentArray == nil) {
    resultClassUserListPb.classStudentArray = [[NSMutableArray alloc]init];
  }
  [resultClassUserListPb.classStudentArray addObject:value];
  return self;
}
- (ClassUserListPbBuilder *)setClassStudentArray:(NSArray *)array {
  resultClassUserListPb.classStudentArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ClassUserListPbBuilder *)clearClassStudent {
  resultClassUserListPb.classStudentArray = nil;
  return self;
}
- (BOOL) hasUserModifiedDate {
  return resultClassUserListPb.hasUserModifiedDate;
}
- (SInt64) userModifiedDate {
  return resultClassUserListPb.userModifiedDate;
}
- (ClassUserListPbBuilder*) setUserModifiedDate:(SInt64) value {
  resultClassUserListPb.hasUserModifiedDate = YES;
  resultClassUserListPb.userModifiedDate = value;
  return self;
}
- (ClassUserListPbBuilder*) clearUserModifiedDate {
  resultClassUserListPb.hasUserModifiedDate = NO;
  resultClassUserListPb.userModifiedDate = 0L;
  return self;
}
- (BOOL) hasStudentModifiedDate {
  return resultClassUserListPb.hasStudentModifiedDate;
}
- (SInt64) studentModifiedDate {
  return resultClassUserListPb.studentModifiedDate;
}
- (ClassUserListPbBuilder*) setStudentModifiedDate:(SInt64) value {
  resultClassUserListPb.hasStudentModifiedDate = YES;
  resultClassUserListPb.studentModifiedDate = value;
  return self;
}
- (ClassUserListPbBuilder*) clearStudentModifiedDate {
  resultClassUserListPb.hasStudentModifiedDate = NO;
  resultClassUserListPb.studentModifiedDate = 0L;
  return self;
}
@end

@interface ClassUserPb ()
@property SInt64 id;
@property SInt64 classId;
@property (strong) NSString* uuid;
@property (strong) NSString* username;
@property (strong) NSString* name;
@property (strong) NSString* portrait;
@property SInt32 userType;
@property SInt32 gender;
@property (strong) NSString* schoolName;
@property SInt32 userStatus;
@property SInt64 modifiedDate;
@property (strong) NSString* studentName;
@end

@implementation ClassUserPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasClassId {
  return !!hasClassId_;
}
- (void) setHasClassId:(BOOL) _value_ {
  hasClassId_ = !!_value_;
}
@synthesize classId;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) _value_ {
  hasUsername_ = !!_value_;
}
@synthesize username;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasPortrait {
  return !!hasPortrait_;
}
- (void) setHasPortrait:(BOOL) _value_ {
  hasPortrait_ = !!_value_;
}
@synthesize portrait;
- (BOOL) hasUserType {
  return !!hasUserType_;
}
- (void) setHasUserType:(BOOL) _value_ {
  hasUserType_ = !!_value_;
}
@synthesize userType;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
@synthesize gender;
- (BOOL) hasSchoolName {
  return !!hasSchoolName_;
}
- (void) setHasSchoolName:(BOOL) _value_ {
  hasSchoolName_ = !!_value_;
}
@synthesize schoolName;
- (BOOL) hasUserStatus {
  return !!hasUserStatus_;
}
- (void) setHasUserStatus:(BOOL) _value_ {
  hasUserStatus_ = !!_value_;
}
@synthesize userStatus;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (BOOL) hasStudentName {
  return !!hasStudentName_;
}
- (void) setHasStudentName:(BOOL) _value_ {
  hasStudentName_ = !!_value_;
}
@synthesize studentName;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.classId = 0L;
    self.uuid = @"";
    self.username = @"";
    self.name = @"";
    self.portrait = @"";
    self.userType = 0;
    self.gender = 0;
    self.schoolName = @"";
    self.userStatus = 0;
    self.modifiedDate = 0L;
    self.studentName = @"";
  }
  return self;
}
static ClassUserPb* defaultClassUserPbInstance = nil;
+ (void) initialize {
  if (self == [ClassUserPb class]) {
    defaultClassUserPbInstance = [[ClassUserPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultClassUserPbInstance;
}
- (instancetype) defaultInstance {
  return defaultClassUserPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasClassId) {
    [output writeInt64:2 value:self.classId];
  }
  if (self.hasUuid) {
    [output writeString:3 value:self.uuid];
  }
  if (self.hasUsername) {
    [output writeString:4 value:self.username];
  }
  if (self.hasName) {
    [output writeString:5 value:self.name];
  }
  if (self.hasPortrait) {
    [output writeString:6 value:self.portrait];
  }
  if (self.hasUserType) {
    [output writeInt32:7 value:self.userType];
  }
  if (self.hasGender) {
    [output writeInt32:8 value:self.gender];
  }
  if (self.hasSchoolName) {
    [output writeString:9 value:self.schoolName];
  }
  if (self.hasUserStatus) {
    [output writeInt32:10 value:self.userStatus];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:11 value:self.modifiedDate];
  }
  if (self.hasStudentName) {
    [output writeString:12 value:self.studentName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasClassId) {
    size_ += computeInt64Size(2, self.classId);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(3, self.uuid);
  }
  if (self.hasUsername) {
    size_ += computeStringSize(4, self.username);
  }
  if (self.hasName) {
    size_ += computeStringSize(5, self.name);
  }
  if (self.hasPortrait) {
    size_ += computeStringSize(6, self.portrait);
  }
  if (self.hasUserType) {
    size_ += computeInt32Size(7, self.userType);
  }
  if (self.hasGender) {
    size_ += computeInt32Size(8, self.gender);
  }
  if (self.hasSchoolName) {
    size_ += computeStringSize(9, self.schoolName);
  }
  if (self.hasUserStatus) {
    size_ += computeInt32Size(10, self.userStatus);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(11, self.modifiedDate);
  }
  if (self.hasStudentName) {
    size_ += computeStringSize(12, self.studentName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClassUserPb*) parseFromData:(NSData*) data {
  return (ClassUserPb*)[[[ClassUserPb builder] mergeFromData:data] build];
}
+ (ClassUserPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClassUserPb*)[[[ClassUserPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClassUserPb*) parseFromInputStream:(NSInputStream*) input {
  return (ClassUserPb*)[[[ClassUserPb builder] mergeFromInputStream:input] build];
}
+ (ClassUserPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClassUserPb*)[[[ClassUserPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClassUserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClassUserPb*)[[[ClassUserPb builder] mergeFromCodedInputStream:input] build];
}
+ (ClassUserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClassUserPb*)[[[ClassUserPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClassUserPbBuilder*) builder {
  return [[ClassUserPbBuilder alloc] init];
}
+ (ClassUserPbBuilder*) builderWithPrototype:(ClassUserPb*) prototype {
  return [[ClassUserPb builder] mergeFrom:prototype];
}
- (ClassUserPbBuilder*) builder {
  return [ClassUserPb builder];
}
- (ClassUserPbBuilder*) toBuilder {
  return [ClassUserPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasClassId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classId", [NSNumber numberWithLongLong:self.classId]];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasPortrait) {
    [output appendFormat:@"%@%@: %@\n", indent, @"portrait", self.portrait];
  }
  if (self.hasUserType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userType", [NSNumber numberWithInteger:self.userType]];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithInteger:self.gender]];
  }
  if (self.hasSchoolName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolName", self.schoolName];
  }
  if (self.hasUserStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userStatus", [NSNumber numberWithInteger:self.userStatus]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  if (self.hasStudentName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentName", self.studentName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasClassId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.classId] forKey: @"classId"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasUsername) {
    [dictionary setObject: self.username forKey: @"username"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasPortrait) {
    [dictionary setObject: self.portrait forKey: @"portrait"];
  }
  if (self.hasUserType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userType] forKey: @"userType"];
  }
  if (self.hasGender) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gender] forKey: @"gender"];
  }
  if (self.hasSchoolName) {
    [dictionary setObject: self.schoolName forKey: @"schoolName"];
  }
  if (self.hasUserStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userStatus] forKey: @"userStatus"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  if (self.hasStudentName) {
    [dictionary setObject: self.studentName forKey: @"studentName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClassUserPb class]]) {
    return NO;
  }
  ClassUserPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasClassId == otherMessage.hasClassId &&
      (!self.hasClassId || self.classId == otherMessage.classId) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasPortrait == otherMessage.hasPortrait &&
      (!self.hasPortrait || [self.portrait isEqual:otherMessage.portrait]) &&
      self.hasUserType == otherMessage.hasUserType &&
      (!self.hasUserType || self.userType == otherMessage.userType) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasSchoolName == otherMessage.hasSchoolName &&
      (!self.hasSchoolName || [self.schoolName isEqual:otherMessage.schoolName]) &&
      self.hasUserStatus == otherMessage.hasUserStatus &&
      (!self.hasUserStatus || self.userStatus == otherMessage.userStatus) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      self.hasStudentName == otherMessage.hasStudentName &&
      (!self.hasStudentName || [self.studentName isEqual:otherMessage.studentName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasClassId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.classId] hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasPortrait) {
    hashCode = hashCode * 31 + [self.portrait hash];
  }
  if (self.hasUserType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userType] hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gender] hash];
  }
  if (self.hasSchoolName) {
    hashCode = hashCode * 31 + [self.schoolName hash];
  }
  if (self.hasUserStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userStatus] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  if (self.hasStudentName) {
    hashCode = hashCode * 31 + [self.studentName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClassUserPbBuilder()
@property (strong) ClassUserPb* resultClassUserPb;
@end

@implementation ClassUserPbBuilder
@synthesize resultClassUserPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultClassUserPb = [[ClassUserPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultClassUserPb;
}
- (ClassUserPbBuilder*) clear {
  self.resultClassUserPb = [[ClassUserPb alloc] init];
  return self;
}
- (ClassUserPbBuilder*) clone {
  return [ClassUserPb builderWithPrototype:resultClassUserPb];
}
- (ClassUserPb*) defaultInstance {
  return [ClassUserPb defaultInstance];
}
- (ClassUserPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClassUserPb*) buildPartial {
  ClassUserPb* returnMe = resultClassUserPb;
  self.resultClassUserPb = nil;
  return returnMe;
}
- (ClassUserPbBuilder*) mergeFrom:(ClassUserPb*) other {
  if (other == [ClassUserPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasClassId) {
    [self setClassId:other.classId];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasPortrait) {
    [self setPortrait:other.portrait];
  }
  if (other.hasUserType) {
    [self setUserType:other.userType];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasSchoolName) {
    [self setSchoolName:other.schoolName];
  }
  if (other.hasUserStatus) {
    [self setUserStatus:other.userStatus];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasStudentName) {
    [self setStudentName:other.studentName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClassUserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClassUserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setClassId:[input readInt64]];
        break;
      }
      case 26: {
        [self setUuid:[input readString]];
        break;
      }
      case 34: {
        [self setUsername:[input readString]];
        break;
      }
      case 42: {
        [self setName:[input readString]];
        break;
      }
      case 50: {
        [self setPortrait:[input readString]];
        break;
      }
      case 56: {
        [self setUserType:[input readInt32]];
        break;
      }
      case 64: {
        [self setGender:[input readInt32]];
        break;
      }
      case 74: {
        [self setSchoolName:[input readString]];
        break;
      }
      case 80: {
        [self setUserStatus:[input readInt32]];
        break;
      }
      case 88: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 98: {
        [self setStudentName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultClassUserPb.hasId;
}
- (SInt64) id {
  return resultClassUserPb.id;
}
- (ClassUserPbBuilder*) setId:(SInt64) value {
  resultClassUserPb.hasId = YES;
  resultClassUserPb.id = value;
  return self;
}
- (ClassUserPbBuilder*) clearId {
  resultClassUserPb.hasId = NO;
  resultClassUserPb.id = 0L;
  return self;
}
- (BOOL) hasClassId {
  return resultClassUserPb.hasClassId;
}
- (SInt64) classId {
  return resultClassUserPb.classId;
}
- (ClassUserPbBuilder*) setClassId:(SInt64) value {
  resultClassUserPb.hasClassId = YES;
  resultClassUserPb.classId = value;
  return self;
}
- (ClassUserPbBuilder*) clearClassId {
  resultClassUserPb.hasClassId = NO;
  resultClassUserPb.classId = 0L;
  return self;
}
- (BOOL) hasUuid {
  return resultClassUserPb.hasUuid;
}
- (NSString*) uuid {
  return resultClassUserPb.uuid;
}
- (ClassUserPbBuilder*) setUuid:(NSString*) value {
  resultClassUserPb.hasUuid = YES;
  resultClassUserPb.uuid = value;
  return self;
}
- (ClassUserPbBuilder*) clearUuid {
  resultClassUserPb.hasUuid = NO;
  resultClassUserPb.uuid = @"";
  return self;
}
- (BOOL) hasUsername {
  return resultClassUserPb.hasUsername;
}
- (NSString*) username {
  return resultClassUserPb.username;
}
- (ClassUserPbBuilder*) setUsername:(NSString*) value {
  resultClassUserPb.hasUsername = YES;
  resultClassUserPb.username = value;
  return self;
}
- (ClassUserPbBuilder*) clearUsername {
  resultClassUserPb.hasUsername = NO;
  resultClassUserPb.username = @"";
  return self;
}
- (BOOL) hasName {
  return resultClassUserPb.hasName;
}
- (NSString*) name {
  return resultClassUserPb.name;
}
- (ClassUserPbBuilder*) setName:(NSString*) value {
  resultClassUserPb.hasName = YES;
  resultClassUserPb.name = value;
  return self;
}
- (ClassUserPbBuilder*) clearName {
  resultClassUserPb.hasName = NO;
  resultClassUserPb.name = @"";
  return self;
}
- (BOOL) hasPortrait {
  return resultClassUserPb.hasPortrait;
}
- (NSString*) portrait {
  return resultClassUserPb.portrait;
}
- (ClassUserPbBuilder*) setPortrait:(NSString*) value {
  resultClassUserPb.hasPortrait = YES;
  resultClassUserPb.portrait = value;
  return self;
}
- (ClassUserPbBuilder*) clearPortrait {
  resultClassUserPb.hasPortrait = NO;
  resultClassUserPb.portrait = @"";
  return self;
}
- (BOOL) hasUserType {
  return resultClassUserPb.hasUserType;
}
- (SInt32) userType {
  return resultClassUserPb.userType;
}
- (ClassUserPbBuilder*) setUserType:(SInt32) value {
  resultClassUserPb.hasUserType = YES;
  resultClassUserPb.userType = value;
  return self;
}
- (ClassUserPbBuilder*) clearUserType {
  resultClassUserPb.hasUserType = NO;
  resultClassUserPb.userType = 0;
  return self;
}
- (BOOL) hasGender {
  return resultClassUserPb.hasGender;
}
- (SInt32) gender {
  return resultClassUserPb.gender;
}
- (ClassUserPbBuilder*) setGender:(SInt32) value {
  resultClassUserPb.hasGender = YES;
  resultClassUserPb.gender = value;
  return self;
}
- (ClassUserPbBuilder*) clearGender {
  resultClassUserPb.hasGender = NO;
  resultClassUserPb.gender = 0;
  return self;
}
- (BOOL) hasSchoolName {
  return resultClassUserPb.hasSchoolName;
}
- (NSString*) schoolName {
  return resultClassUserPb.schoolName;
}
- (ClassUserPbBuilder*) setSchoolName:(NSString*) value {
  resultClassUserPb.hasSchoolName = YES;
  resultClassUserPb.schoolName = value;
  return self;
}
- (ClassUserPbBuilder*) clearSchoolName {
  resultClassUserPb.hasSchoolName = NO;
  resultClassUserPb.schoolName = @"";
  return self;
}
- (BOOL) hasUserStatus {
  return resultClassUserPb.hasUserStatus;
}
- (SInt32) userStatus {
  return resultClassUserPb.userStatus;
}
- (ClassUserPbBuilder*) setUserStatus:(SInt32) value {
  resultClassUserPb.hasUserStatus = YES;
  resultClassUserPb.userStatus = value;
  return self;
}
- (ClassUserPbBuilder*) clearUserStatus {
  resultClassUserPb.hasUserStatus = NO;
  resultClassUserPb.userStatus = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultClassUserPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultClassUserPb.modifiedDate;
}
- (ClassUserPbBuilder*) setModifiedDate:(SInt64) value {
  resultClassUserPb.hasModifiedDate = YES;
  resultClassUserPb.modifiedDate = value;
  return self;
}
- (ClassUserPbBuilder*) clearModifiedDate {
  resultClassUserPb.hasModifiedDate = NO;
  resultClassUserPb.modifiedDate = 0L;
  return self;
}
- (BOOL) hasStudentName {
  return resultClassUserPb.hasStudentName;
}
- (NSString*) studentName {
  return resultClassUserPb.studentName;
}
- (ClassUserPbBuilder*) setStudentName:(NSString*) value {
  resultClassUserPb.hasStudentName = YES;
  resultClassUserPb.studentName = value;
  return self;
}
- (ClassUserPbBuilder*) clearStudentName {
  resultClassUserPb.hasStudentName = NO;
  resultClassUserPb.studentName = @"";
  return self;
}
@end

@interface ClassStudentPb ()
@property SInt64 id;
@property (strong) NSString* name;
@property SInt64 classId;
@property SInt64 gradeId;
@property (strong) NSString* portrait;
@property SInt32 userType;
@property SInt32 gender;
@property (strong) NSString* schoolName;
@property SInt32 dataStatus;
@property SInt64 modifiedDate;
@end

@implementation ClassStudentPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasClassId {
  return !!hasClassId_;
}
- (void) setHasClassId:(BOOL) _value_ {
  hasClassId_ = !!_value_;
}
@synthesize classId;
- (BOOL) hasGradeId {
  return !!hasGradeId_;
}
- (void) setHasGradeId:(BOOL) _value_ {
  hasGradeId_ = !!_value_;
}
@synthesize gradeId;
- (BOOL) hasPortrait {
  return !!hasPortrait_;
}
- (void) setHasPortrait:(BOOL) _value_ {
  hasPortrait_ = !!_value_;
}
@synthesize portrait;
- (BOOL) hasUserType {
  return !!hasUserType_;
}
- (void) setHasUserType:(BOOL) _value_ {
  hasUserType_ = !!_value_;
}
@synthesize userType;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
@synthesize gender;
- (BOOL) hasSchoolName {
  return !!hasSchoolName_;
}
- (void) setHasSchoolName:(BOOL) _value_ {
  hasSchoolName_ = !!_value_;
}
@synthesize schoolName;
- (BOOL) hasDataStatus {
  return !!hasDataStatus_;
}
- (void) setHasDataStatus:(BOOL) _value_ {
  hasDataStatus_ = !!_value_;
}
@synthesize dataStatus;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.name = @"";
    self.classId = 0L;
    self.gradeId = 0L;
    self.portrait = @"";
    self.userType = 0;
    self.gender = 0;
    self.schoolName = @"";
    self.dataStatus = 0;
    self.modifiedDate = 0L;
  }
  return self;
}
static ClassStudentPb* defaultClassStudentPbInstance = nil;
+ (void) initialize {
  if (self == [ClassStudentPb class]) {
    defaultClassStudentPbInstance = [[ClassStudentPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultClassStudentPbInstance;
}
- (instancetype) defaultInstance {
  return defaultClassStudentPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasClassId) {
    [output writeInt64:3 value:self.classId];
  }
  if (self.hasGradeId) {
    [output writeInt64:4 value:self.gradeId];
  }
  if (self.hasPortrait) {
    [output writeString:5 value:self.portrait];
  }
  if (self.hasUserType) {
    [output writeInt32:6 value:self.userType];
  }
  if (self.hasGender) {
    [output writeInt32:7 value:self.gender];
  }
  if (self.hasSchoolName) {
    [output writeString:8 value:self.schoolName];
  }
  if (self.hasDataStatus) {
    [output writeInt32:9 value:self.dataStatus];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:10 value:self.modifiedDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasClassId) {
    size_ += computeInt64Size(3, self.classId);
  }
  if (self.hasGradeId) {
    size_ += computeInt64Size(4, self.gradeId);
  }
  if (self.hasPortrait) {
    size_ += computeStringSize(5, self.portrait);
  }
  if (self.hasUserType) {
    size_ += computeInt32Size(6, self.userType);
  }
  if (self.hasGender) {
    size_ += computeInt32Size(7, self.gender);
  }
  if (self.hasSchoolName) {
    size_ += computeStringSize(8, self.schoolName);
  }
  if (self.hasDataStatus) {
    size_ += computeInt32Size(9, self.dataStatus);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(10, self.modifiedDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClassStudentPb*) parseFromData:(NSData*) data {
  return (ClassStudentPb*)[[[ClassStudentPb builder] mergeFromData:data] build];
}
+ (ClassStudentPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClassStudentPb*)[[[ClassStudentPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClassStudentPb*) parseFromInputStream:(NSInputStream*) input {
  return (ClassStudentPb*)[[[ClassStudentPb builder] mergeFromInputStream:input] build];
}
+ (ClassStudentPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClassStudentPb*)[[[ClassStudentPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClassStudentPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClassStudentPb*)[[[ClassStudentPb builder] mergeFromCodedInputStream:input] build];
}
+ (ClassStudentPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClassStudentPb*)[[[ClassStudentPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClassStudentPbBuilder*) builder {
  return [[ClassStudentPbBuilder alloc] init];
}
+ (ClassStudentPbBuilder*) builderWithPrototype:(ClassStudentPb*) prototype {
  return [[ClassStudentPb builder] mergeFrom:prototype];
}
- (ClassStudentPbBuilder*) builder {
  return [ClassStudentPb builder];
}
- (ClassStudentPbBuilder*) toBuilder {
  return [ClassStudentPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasClassId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classId", [NSNumber numberWithLongLong:self.classId]];
  }
  if (self.hasGradeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gradeId", [NSNumber numberWithLongLong:self.gradeId]];
  }
  if (self.hasPortrait) {
    [output appendFormat:@"%@%@: %@\n", indent, @"portrait", self.portrait];
  }
  if (self.hasUserType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userType", [NSNumber numberWithInteger:self.userType]];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithInteger:self.gender]];
  }
  if (self.hasSchoolName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolName", self.schoolName];
  }
  if (self.hasDataStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataStatus", [NSNumber numberWithInteger:self.dataStatus]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasClassId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.classId] forKey: @"classId"];
  }
  if (self.hasGradeId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.gradeId] forKey: @"gradeId"];
  }
  if (self.hasPortrait) {
    [dictionary setObject: self.portrait forKey: @"portrait"];
  }
  if (self.hasUserType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userType] forKey: @"userType"];
  }
  if (self.hasGender) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gender] forKey: @"gender"];
  }
  if (self.hasSchoolName) {
    [dictionary setObject: self.schoolName forKey: @"schoolName"];
  }
  if (self.hasDataStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dataStatus] forKey: @"dataStatus"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClassStudentPb class]]) {
    return NO;
  }
  ClassStudentPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasClassId == otherMessage.hasClassId &&
      (!self.hasClassId || self.classId == otherMessage.classId) &&
      self.hasGradeId == otherMessage.hasGradeId &&
      (!self.hasGradeId || self.gradeId == otherMessage.gradeId) &&
      self.hasPortrait == otherMessage.hasPortrait &&
      (!self.hasPortrait || [self.portrait isEqual:otherMessage.portrait]) &&
      self.hasUserType == otherMessage.hasUserType &&
      (!self.hasUserType || self.userType == otherMessage.userType) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasSchoolName == otherMessage.hasSchoolName &&
      (!self.hasSchoolName || [self.schoolName isEqual:otherMessage.schoolName]) &&
      self.hasDataStatus == otherMessage.hasDataStatus &&
      (!self.hasDataStatus || self.dataStatus == otherMessage.dataStatus) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasClassId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.classId] hash];
  }
  if (self.hasGradeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.gradeId] hash];
  }
  if (self.hasPortrait) {
    hashCode = hashCode * 31 + [self.portrait hash];
  }
  if (self.hasUserType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userType] hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gender] hash];
  }
  if (self.hasSchoolName) {
    hashCode = hashCode * 31 + [self.schoolName hash];
  }
  if (self.hasDataStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dataStatus] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClassStudentPbBuilder()
@property (strong) ClassStudentPb* resultClassStudentPb;
@end

@implementation ClassStudentPbBuilder
@synthesize resultClassStudentPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultClassStudentPb = [[ClassStudentPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultClassStudentPb;
}
- (ClassStudentPbBuilder*) clear {
  self.resultClassStudentPb = [[ClassStudentPb alloc] init];
  return self;
}
- (ClassStudentPbBuilder*) clone {
  return [ClassStudentPb builderWithPrototype:resultClassStudentPb];
}
- (ClassStudentPb*) defaultInstance {
  return [ClassStudentPb defaultInstance];
}
- (ClassStudentPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClassStudentPb*) buildPartial {
  ClassStudentPb* returnMe = resultClassStudentPb;
  self.resultClassStudentPb = nil;
  return returnMe;
}
- (ClassStudentPbBuilder*) mergeFrom:(ClassStudentPb*) other {
  if (other == [ClassStudentPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasClassId) {
    [self setClassId:other.classId];
  }
  if (other.hasGradeId) {
    [self setGradeId:other.gradeId];
  }
  if (other.hasPortrait) {
    [self setPortrait:other.portrait];
  }
  if (other.hasUserType) {
    [self setUserType:other.userType];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasSchoolName) {
    [self setSchoolName:other.schoolName];
  }
  if (other.hasDataStatus) {
    [self setDataStatus:other.dataStatus];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClassStudentPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClassStudentPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setClassId:[input readInt64]];
        break;
      }
      case 32: {
        [self setGradeId:[input readInt64]];
        break;
      }
      case 42: {
        [self setPortrait:[input readString]];
        break;
      }
      case 48: {
        [self setUserType:[input readInt32]];
        break;
      }
      case 56: {
        [self setGender:[input readInt32]];
        break;
      }
      case 66: {
        [self setSchoolName:[input readString]];
        break;
      }
      case 72: {
        [self setDataStatus:[input readInt32]];
        break;
      }
      case 80: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultClassStudentPb.hasId;
}
- (SInt64) id {
  return resultClassStudentPb.id;
}
- (ClassStudentPbBuilder*) setId:(SInt64) value {
  resultClassStudentPb.hasId = YES;
  resultClassStudentPb.id = value;
  return self;
}
- (ClassStudentPbBuilder*) clearId {
  resultClassStudentPb.hasId = NO;
  resultClassStudentPb.id = 0L;
  return self;
}
- (BOOL) hasName {
  return resultClassStudentPb.hasName;
}
- (NSString*) name {
  return resultClassStudentPb.name;
}
- (ClassStudentPbBuilder*) setName:(NSString*) value {
  resultClassStudentPb.hasName = YES;
  resultClassStudentPb.name = value;
  return self;
}
- (ClassStudentPbBuilder*) clearName {
  resultClassStudentPb.hasName = NO;
  resultClassStudentPb.name = @"";
  return self;
}
- (BOOL) hasClassId {
  return resultClassStudentPb.hasClassId;
}
- (SInt64) classId {
  return resultClassStudentPb.classId;
}
- (ClassStudentPbBuilder*) setClassId:(SInt64) value {
  resultClassStudentPb.hasClassId = YES;
  resultClassStudentPb.classId = value;
  return self;
}
- (ClassStudentPbBuilder*) clearClassId {
  resultClassStudentPb.hasClassId = NO;
  resultClassStudentPb.classId = 0L;
  return self;
}
- (BOOL) hasGradeId {
  return resultClassStudentPb.hasGradeId;
}
- (SInt64) gradeId {
  return resultClassStudentPb.gradeId;
}
- (ClassStudentPbBuilder*) setGradeId:(SInt64) value {
  resultClassStudentPb.hasGradeId = YES;
  resultClassStudentPb.gradeId = value;
  return self;
}
- (ClassStudentPbBuilder*) clearGradeId {
  resultClassStudentPb.hasGradeId = NO;
  resultClassStudentPb.gradeId = 0L;
  return self;
}
- (BOOL) hasPortrait {
  return resultClassStudentPb.hasPortrait;
}
- (NSString*) portrait {
  return resultClassStudentPb.portrait;
}
- (ClassStudentPbBuilder*) setPortrait:(NSString*) value {
  resultClassStudentPb.hasPortrait = YES;
  resultClassStudentPb.portrait = value;
  return self;
}
- (ClassStudentPbBuilder*) clearPortrait {
  resultClassStudentPb.hasPortrait = NO;
  resultClassStudentPb.portrait = @"";
  return self;
}
- (BOOL) hasUserType {
  return resultClassStudentPb.hasUserType;
}
- (SInt32) userType {
  return resultClassStudentPb.userType;
}
- (ClassStudentPbBuilder*) setUserType:(SInt32) value {
  resultClassStudentPb.hasUserType = YES;
  resultClassStudentPb.userType = value;
  return self;
}
- (ClassStudentPbBuilder*) clearUserType {
  resultClassStudentPb.hasUserType = NO;
  resultClassStudentPb.userType = 0;
  return self;
}
- (BOOL) hasGender {
  return resultClassStudentPb.hasGender;
}
- (SInt32) gender {
  return resultClassStudentPb.gender;
}
- (ClassStudentPbBuilder*) setGender:(SInt32) value {
  resultClassStudentPb.hasGender = YES;
  resultClassStudentPb.gender = value;
  return self;
}
- (ClassStudentPbBuilder*) clearGender {
  resultClassStudentPb.hasGender = NO;
  resultClassStudentPb.gender = 0;
  return self;
}
- (BOOL) hasSchoolName {
  return resultClassStudentPb.hasSchoolName;
}
- (NSString*) schoolName {
  return resultClassStudentPb.schoolName;
}
- (ClassStudentPbBuilder*) setSchoolName:(NSString*) value {
  resultClassStudentPb.hasSchoolName = YES;
  resultClassStudentPb.schoolName = value;
  return self;
}
- (ClassStudentPbBuilder*) clearSchoolName {
  resultClassStudentPb.hasSchoolName = NO;
  resultClassStudentPb.schoolName = @"";
  return self;
}
- (BOOL) hasDataStatus {
  return resultClassStudentPb.hasDataStatus;
}
- (SInt32) dataStatus {
  return resultClassStudentPb.dataStatus;
}
- (ClassStudentPbBuilder*) setDataStatus:(SInt32) value {
  resultClassStudentPb.hasDataStatus = YES;
  resultClassStudentPb.dataStatus = value;
  return self;
}
- (ClassStudentPbBuilder*) clearDataStatus {
  resultClassStudentPb.hasDataStatus = NO;
  resultClassStudentPb.dataStatus = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultClassStudentPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultClassStudentPb.modifiedDate;
}
- (ClassStudentPbBuilder*) setModifiedDate:(SInt64) value {
  resultClassStudentPb.hasModifiedDate = YES;
  resultClassStudentPb.modifiedDate = value;
  return self;
}
- (ClassStudentPbBuilder*) clearModifiedDate {
  resultClassStudentPb.hasModifiedDate = NO;
  resultClassStudentPb.modifiedDate = 0L;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
