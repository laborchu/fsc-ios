// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "User.pb.h"
// @@protoc_insertion_point(imports)

@implementation UserRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UserRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FscClassRoot registerAllExtensions:registry];
    [FscTeachPlanRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface UserPb ()
@property SInt64 id;
@property SInt64 schoolId;
@property (strong) NSString* uuid;
@property (strong) NSString* username;
@property (strong) NSString* password;
@property (strong) NSString* name;
@property SInt32 userType;
@property SInt64 phaseId;
@property SInt32 gender;
@property (strong) NSString* address;
@property (strong) NSString* email;
@property (strong) NSString* token;
@property (strong) NSString* schoolName;
@property (strong) NSString* portrait;
@property (strong) NSData* file;
@property (strong) ParentsPb* parentsPb;
@property (strong) TeacherPb* teacherPb;
@property (strong) SchoolPb* schoolPb;
@property (strong) NSMutableArray * funcCtrlPbArray;
@property SInt32 hasInitPwd;
@end

@implementation UserPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasSchoolId {
  return !!hasSchoolId_;
}
- (void) setHasSchoolId:(BOOL) _value_ {
  hasSchoolId_ = !!_value_;
}
@synthesize schoolId;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) _value_ {
  hasUsername_ = !!_value_;
}
@synthesize username;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasUserType {
  return !!hasUserType_;
}
- (void) setHasUserType:(BOOL) _value_ {
  hasUserType_ = !!_value_;
}
@synthesize userType;
- (BOOL) hasPhaseId {
  return !!hasPhaseId_;
}
- (void) setHasPhaseId:(BOOL) _value_ {
  hasPhaseId_ = !!_value_;
}
@synthesize phaseId;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
@synthesize gender;
- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) _value_ {
  hasAddress_ = !!_value_;
}
@synthesize address;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) _value_ {
  hasEmail_ = !!_value_;
}
@synthesize email;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) _value_ {
  hasToken_ = !!_value_;
}
@synthesize token;
- (BOOL) hasSchoolName {
  return !!hasSchoolName_;
}
- (void) setHasSchoolName:(BOOL) _value_ {
  hasSchoolName_ = !!_value_;
}
@synthesize schoolName;
- (BOOL) hasPortrait {
  return !!hasPortrait_;
}
- (void) setHasPortrait:(BOOL) _value_ {
  hasPortrait_ = !!_value_;
}
@synthesize portrait;
- (BOOL) hasFile {
  return !!hasFile_;
}
- (void) setHasFile:(BOOL) _value_ {
  hasFile_ = !!_value_;
}
@synthesize file;
- (BOOL) hasParentsPb {
  return !!hasParentsPb_;
}
- (void) setHasParentsPb:(BOOL) _value_ {
  hasParentsPb_ = !!_value_;
}
@synthesize parentsPb;
- (BOOL) hasTeacherPb {
  return !!hasTeacherPb_;
}
- (void) setHasTeacherPb:(BOOL) _value_ {
  hasTeacherPb_ = !!_value_;
}
@synthesize teacherPb;
- (BOOL) hasSchoolPb {
  return !!hasSchoolPb_;
}
- (void) setHasSchoolPb:(BOOL) _value_ {
  hasSchoolPb_ = !!_value_;
}
@synthesize schoolPb;
@synthesize funcCtrlPbArray;
@dynamic funcCtrlPb;
- (BOOL) hasHasInitPwd {
  return !!hasHasInitPwd_;
}
- (void) setHasHasInitPwd:(BOOL) _value_ {
  hasHasInitPwd_ = !!_value_;
}
@synthesize hasInitPwd;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.schoolId = 0L;
    self.uuid = @"";
    self.username = @"";
    self.password = @"";
    self.name = @"";
    self.userType = 0;
    self.phaseId = 0L;
    self.gender = 0;
    self.address = @"";
    self.email = @"";
    self.token = @"";
    self.schoolName = @"";
    self.portrait = @"";
    self.file = [NSData data];
    self.parentsPb = [ParentsPb defaultInstance];
    self.teacherPb = [TeacherPb defaultInstance];
    self.schoolPb = [SchoolPb defaultInstance];
    self.hasInitPwd = 0;
  }
  return self;
}
static UserPb* defaultUserPbInstance = nil;
+ (void) initialize {
  if (self == [UserPb class]) {
    defaultUserPbInstance = [[UserPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserPbInstance;
}
- (instancetype) defaultInstance {
  return defaultUserPbInstance;
}
- (NSArray *)funcCtrlPb {
  return funcCtrlPbArray;
}
- (FuncCtrlPb*)funcCtrlPbAtIndex:(NSUInteger)index {
  return [funcCtrlPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasSchoolId) {
    [output writeInt64:2 value:self.schoolId];
  }
  if (self.hasUuid) {
    [output writeString:3 value:self.uuid];
  }
  if (self.hasUsername) {
    [output writeString:4 value:self.username];
  }
  if (self.hasPassword) {
    [output writeString:5 value:self.password];
  }
  if (self.hasName) {
    [output writeString:6 value:self.name];
  }
  if (self.hasUserType) {
    [output writeInt32:7 value:self.userType];
  }
  if (self.hasPhaseId) {
    [output writeInt64:8 value:self.phaseId];
  }
  if (self.hasGender) {
    [output writeInt32:9 value:self.gender];
  }
  if (self.hasAddress) {
    [output writeString:10 value:self.address];
  }
  if (self.hasEmail) {
    [output writeString:11 value:self.email];
  }
  if (self.hasToken) {
    [output writeString:12 value:self.token];
  }
  if (self.hasSchoolName) {
    [output writeString:13 value:self.schoolName];
  }
  if (self.hasPortrait) {
    [output writeString:14 value:self.portrait];
  }
  if (self.hasFile) {
    [output writeData:15 value:self.file];
  }
  if (self.hasParentsPb) {
    [output writeMessage:16 value:self.parentsPb];
  }
  if (self.hasTeacherPb) {
    [output writeMessage:17 value:self.teacherPb];
  }
  if (self.hasSchoolPb) {
    [output writeMessage:18 value:self.schoolPb];
  }
  [self.funcCtrlPbArray enumerateObjectsUsingBlock:^(FuncCtrlPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:19 value:element];
  }];
  if (self.hasHasInitPwd) {
    [output writeInt32:20 value:self.hasInitPwd];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasSchoolId) {
    size_ += computeInt64Size(2, self.schoolId);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(3, self.uuid);
  }
  if (self.hasUsername) {
    size_ += computeStringSize(4, self.username);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(5, self.password);
  }
  if (self.hasName) {
    size_ += computeStringSize(6, self.name);
  }
  if (self.hasUserType) {
    size_ += computeInt32Size(7, self.userType);
  }
  if (self.hasPhaseId) {
    size_ += computeInt64Size(8, self.phaseId);
  }
  if (self.hasGender) {
    size_ += computeInt32Size(9, self.gender);
  }
  if (self.hasAddress) {
    size_ += computeStringSize(10, self.address);
  }
  if (self.hasEmail) {
    size_ += computeStringSize(11, self.email);
  }
  if (self.hasToken) {
    size_ += computeStringSize(12, self.token);
  }
  if (self.hasSchoolName) {
    size_ += computeStringSize(13, self.schoolName);
  }
  if (self.hasPortrait) {
    size_ += computeStringSize(14, self.portrait);
  }
  if (self.hasFile) {
    size_ += computeDataSize(15, self.file);
  }
  if (self.hasParentsPb) {
    size_ += computeMessageSize(16, self.parentsPb);
  }
  if (self.hasTeacherPb) {
    size_ += computeMessageSize(17, self.teacherPb);
  }
  if (self.hasSchoolPb) {
    size_ += computeMessageSize(18, self.schoolPb);
  }
  [self.funcCtrlPbArray enumerateObjectsUsingBlock:^(FuncCtrlPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(19, element);
  }];
  if (self.hasHasInitPwd) {
    size_ += computeInt32Size(20, self.hasInitPwd);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserPb*) parseFromData:(NSData*) data {
  return (UserPb*)[[[UserPb builder] mergeFromData:data] build];
}
+ (UserPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserPb*)[[[UserPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserPb*) parseFromInputStream:(NSInputStream*) input {
  return (UserPb*)[[[UserPb builder] mergeFromInputStream:input] build];
}
+ (UserPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserPb*)[[[UserPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserPb*)[[[UserPb builder] mergeFromCodedInputStream:input] build];
}
+ (UserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserPb*)[[[UserPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserPbBuilder*) builder {
  return [[UserPbBuilder alloc] init];
}
+ (UserPbBuilder*) builderWithPrototype:(UserPb*) prototype {
  return [[UserPb builder] mergeFrom:prototype];
}
- (UserPbBuilder*) builder {
  return [UserPb builder];
}
- (UserPbBuilder*) toBuilder {
  return [UserPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasSchoolId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolId", [NSNumber numberWithLongLong:self.schoolId]];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasUserType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userType", [NSNumber numberWithInteger:self.userType]];
  }
  if (self.hasPhaseId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phaseId", [NSNumber numberWithLongLong:self.phaseId]];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithInteger:self.gender]];
  }
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  if (self.hasSchoolName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolName", self.schoolName];
  }
  if (self.hasPortrait) {
    [output appendFormat:@"%@%@: %@\n", indent, @"portrait", self.portrait];
  }
  if (self.hasFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"file", self.file];
  }
  if (self.hasParentsPb) {
    [output appendFormat:@"%@%@ {\n", indent, @"parentsPb"];
    [self.parentsPb writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTeacherPb) {
    [output appendFormat:@"%@%@ {\n", indent, @"teacherPb"];
    [self.teacherPb writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSchoolPb) {
    [output appendFormat:@"%@%@ {\n", indent, @"schoolPb"];
    [self.schoolPb writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.funcCtrlPbArray enumerateObjectsUsingBlock:^(FuncCtrlPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"funcCtrlPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasHasInitPwd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasInitPwd", [NSNumber numberWithInteger:self.hasInitPwd]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasSchoolId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.schoolId] forKey: @"schoolId"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasUsername) {
    [dictionary setObject: self.username forKey: @"username"];
  }
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasUserType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userType] forKey: @"userType"];
  }
  if (self.hasPhaseId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.phaseId] forKey: @"phaseId"];
  }
  if (self.hasGender) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gender] forKey: @"gender"];
  }
  if (self.hasAddress) {
    [dictionary setObject: self.address forKey: @"address"];
  }
  if (self.hasEmail) {
    [dictionary setObject: self.email forKey: @"email"];
  }
  if (self.hasToken) {
    [dictionary setObject: self.token forKey: @"token"];
  }
  if (self.hasSchoolName) {
    [dictionary setObject: self.schoolName forKey: @"schoolName"];
  }
  if (self.hasPortrait) {
    [dictionary setObject: self.portrait forKey: @"portrait"];
  }
  if (self.hasFile) {
    [dictionary setObject: self.file forKey: @"file"];
  }
  if (self.hasParentsPb) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.parentsPb storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"parentsPb"];
  }
  if (self.hasTeacherPb) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.teacherPb storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"teacherPb"];
  }
  if (self.hasSchoolPb) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.schoolPb storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"schoolPb"];
  }
  for (FuncCtrlPb* element in self.funcCtrlPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"funcCtrlPb"];
  }
  if (self.hasHasInitPwd) {
    [dictionary setObject: [NSNumber numberWithInteger:self.hasInitPwd] forKey: @"hasInitPwd"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserPb class]]) {
    return NO;
  }
  UserPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasSchoolId == otherMessage.hasSchoolId &&
      (!self.hasSchoolId || self.schoolId == otherMessage.schoolId) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasUserType == otherMessage.hasUserType &&
      (!self.hasUserType || self.userType == otherMessage.userType) &&
      self.hasPhaseId == otherMessage.hasPhaseId &&
      (!self.hasPhaseId || self.phaseId == otherMessage.phaseId) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      self.hasSchoolName == otherMessage.hasSchoolName &&
      (!self.hasSchoolName || [self.schoolName isEqual:otherMessage.schoolName]) &&
      self.hasPortrait == otherMessage.hasPortrait &&
      (!self.hasPortrait || [self.portrait isEqual:otherMessage.portrait]) &&
      self.hasFile == otherMessage.hasFile &&
      (!self.hasFile || [self.file isEqual:otherMessage.file]) &&
      self.hasParentsPb == otherMessage.hasParentsPb &&
      (!self.hasParentsPb || [self.parentsPb isEqual:otherMessage.parentsPb]) &&
      self.hasTeacherPb == otherMessage.hasTeacherPb &&
      (!self.hasTeacherPb || [self.teacherPb isEqual:otherMessage.teacherPb]) &&
      self.hasSchoolPb == otherMessage.hasSchoolPb &&
      (!self.hasSchoolPb || [self.schoolPb isEqual:otherMessage.schoolPb]) &&
      [self.funcCtrlPbArray isEqualToArray:otherMessage.funcCtrlPbArray] &&
      self.hasHasInitPwd == otherMessage.hasHasInitPwd &&
      (!self.hasHasInitPwd || self.hasInitPwd == otherMessage.hasInitPwd) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasSchoolId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.schoolId] hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasUserType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userType] hash];
  }
  if (self.hasPhaseId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.phaseId] hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gender] hash];
  }
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  if (self.hasSchoolName) {
    hashCode = hashCode * 31 + [self.schoolName hash];
  }
  if (self.hasPortrait) {
    hashCode = hashCode * 31 + [self.portrait hash];
  }
  if (self.hasFile) {
    hashCode = hashCode * 31 + [self.file hash];
  }
  if (self.hasParentsPb) {
    hashCode = hashCode * 31 + [self.parentsPb hash];
  }
  if (self.hasTeacherPb) {
    hashCode = hashCode * 31 + [self.teacherPb hash];
  }
  if (self.hasSchoolPb) {
    hashCode = hashCode * 31 + [self.schoolPb hash];
  }
  [self.funcCtrlPbArray enumerateObjectsUsingBlock:^(FuncCtrlPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasHasInitPwd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.hasInitPwd] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserPbBuilder()
@property (strong) UserPb* resultUserPb;
@end

@implementation UserPbBuilder
@synthesize resultUserPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserPb = [[UserPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserPb;
}
- (UserPbBuilder*) clear {
  self.resultUserPb = [[UserPb alloc] init];
  return self;
}
- (UserPbBuilder*) clone {
  return [UserPb builderWithPrototype:resultUserPb];
}
- (UserPb*) defaultInstance {
  return [UserPb defaultInstance];
}
- (UserPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserPb*) buildPartial {
  UserPb* returnMe = resultUserPb;
  self.resultUserPb = nil;
  return returnMe;
}
- (UserPbBuilder*) mergeFrom:(UserPb*) other {
  if (other == [UserPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasSchoolId) {
    [self setSchoolId:other.schoolId];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasUserType) {
    [self setUserType:other.userType];
  }
  if (other.hasPhaseId) {
    [self setPhaseId:other.phaseId];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  if (other.hasSchoolName) {
    [self setSchoolName:other.schoolName];
  }
  if (other.hasPortrait) {
    [self setPortrait:other.portrait];
  }
  if (other.hasFile) {
    [self setFile:other.file];
  }
  if (other.hasParentsPb) {
    [self mergeParentsPb:other.parentsPb];
  }
  if (other.hasTeacherPb) {
    [self mergeTeacherPb:other.teacherPb];
  }
  if (other.hasSchoolPb) {
    [self mergeSchoolPb:other.schoolPb];
  }
  if (other.funcCtrlPbArray.count > 0) {
    if (resultUserPb.funcCtrlPbArray == nil) {
      resultUserPb.funcCtrlPbArray = [[NSMutableArray alloc] initWithArray:other.funcCtrlPbArray];
    } else {
      [resultUserPb.funcCtrlPbArray addObjectsFromArray:other.funcCtrlPbArray];
    }
  }
  if (other.hasHasInitPwd) {
    [self setHasInitPwd:other.hasInitPwd];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setSchoolId:[input readInt64]];
        break;
      }
      case 26: {
        [self setUuid:[input readString]];
        break;
      }
      case 34: {
        [self setUsername:[input readString]];
        break;
      }
      case 42: {
        [self setPassword:[input readString]];
        break;
      }
      case 50: {
        [self setName:[input readString]];
        break;
      }
      case 56: {
        [self setUserType:[input readInt32]];
        break;
      }
      case 64: {
        [self setPhaseId:[input readInt64]];
        break;
      }
      case 72: {
        [self setGender:[input readInt32]];
        break;
      }
      case 82: {
        [self setAddress:[input readString]];
        break;
      }
      case 90: {
        [self setEmail:[input readString]];
        break;
      }
      case 98: {
        [self setToken:[input readString]];
        break;
      }
      case 106: {
        [self setSchoolName:[input readString]];
        break;
      }
      case 114: {
        [self setPortrait:[input readString]];
        break;
      }
      case 122: {
        [self setFile:[input readData]];
        break;
      }
      case 130: {
        ParentsPbBuilder* subBuilder = [ParentsPb builder];
        if (self.hasParentsPb) {
          [subBuilder mergeFrom:self.parentsPb];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setParentsPb:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        TeacherPbBuilder* subBuilder = [TeacherPb builder];
        if (self.hasTeacherPb) {
          [subBuilder mergeFrom:self.teacherPb];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTeacherPb:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        SchoolPbBuilder* subBuilder = [SchoolPb builder];
        if (self.hasSchoolPb) {
          [subBuilder mergeFrom:self.schoolPb];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSchoolPb:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        FuncCtrlPbBuilder* subBuilder = [FuncCtrlPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFuncCtrlPb:[subBuilder buildPartial]];
        break;
      }
      case 160: {
        [self setHasInitPwd:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultUserPb.hasId;
}
- (SInt64) id {
  return resultUserPb.id;
}
- (UserPbBuilder*) setId:(SInt64) value {
  resultUserPb.hasId = YES;
  resultUserPb.id = value;
  return self;
}
- (UserPbBuilder*) clearId {
  resultUserPb.hasId = NO;
  resultUserPb.id = 0L;
  return self;
}
- (BOOL) hasSchoolId {
  return resultUserPb.hasSchoolId;
}
- (SInt64) schoolId {
  return resultUserPb.schoolId;
}
- (UserPbBuilder*) setSchoolId:(SInt64) value {
  resultUserPb.hasSchoolId = YES;
  resultUserPb.schoolId = value;
  return self;
}
- (UserPbBuilder*) clearSchoolId {
  resultUserPb.hasSchoolId = NO;
  resultUserPb.schoolId = 0L;
  return self;
}
- (BOOL) hasUuid {
  return resultUserPb.hasUuid;
}
- (NSString*) uuid {
  return resultUserPb.uuid;
}
- (UserPbBuilder*) setUuid:(NSString*) value {
  resultUserPb.hasUuid = YES;
  resultUserPb.uuid = value;
  return self;
}
- (UserPbBuilder*) clearUuid {
  resultUserPb.hasUuid = NO;
  resultUserPb.uuid = @"";
  return self;
}
- (BOOL) hasUsername {
  return resultUserPb.hasUsername;
}
- (NSString*) username {
  return resultUserPb.username;
}
- (UserPbBuilder*) setUsername:(NSString*) value {
  resultUserPb.hasUsername = YES;
  resultUserPb.username = value;
  return self;
}
- (UserPbBuilder*) clearUsername {
  resultUserPb.hasUsername = NO;
  resultUserPb.username = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultUserPb.hasPassword;
}
- (NSString*) password {
  return resultUserPb.password;
}
- (UserPbBuilder*) setPassword:(NSString*) value {
  resultUserPb.hasPassword = YES;
  resultUserPb.password = value;
  return self;
}
- (UserPbBuilder*) clearPassword {
  resultUserPb.hasPassword = NO;
  resultUserPb.password = @"";
  return self;
}
- (BOOL) hasName {
  return resultUserPb.hasName;
}
- (NSString*) name {
  return resultUserPb.name;
}
- (UserPbBuilder*) setName:(NSString*) value {
  resultUserPb.hasName = YES;
  resultUserPb.name = value;
  return self;
}
- (UserPbBuilder*) clearName {
  resultUserPb.hasName = NO;
  resultUserPb.name = @"";
  return self;
}
- (BOOL) hasUserType {
  return resultUserPb.hasUserType;
}
- (SInt32) userType {
  return resultUserPb.userType;
}
- (UserPbBuilder*) setUserType:(SInt32) value {
  resultUserPb.hasUserType = YES;
  resultUserPb.userType = value;
  return self;
}
- (UserPbBuilder*) clearUserType {
  resultUserPb.hasUserType = NO;
  resultUserPb.userType = 0;
  return self;
}
- (BOOL) hasPhaseId {
  return resultUserPb.hasPhaseId;
}
- (SInt64) phaseId {
  return resultUserPb.phaseId;
}
- (UserPbBuilder*) setPhaseId:(SInt64) value {
  resultUserPb.hasPhaseId = YES;
  resultUserPb.phaseId = value;
  return self;
}
- (UserPbBuilder*) clearPhaseId {
  resultUserPb.hasPhaseId = NO;
  resultUserPb.phaseId = 0L;
  return self;
}
- (BOOL) hasGender {
  return resultUserPb.hasGender;
}
- (SInt32) gender {
  return resultUserPb.gender;
}
- (UserPbBuilder*) setGender:(SInt32) value {
  resultUserPb.hasGender = YES;
  resultUserPb.gender = value;
  return self;
}
- (UserPbBuilder*) clearGender {
  resultUserPb.hasGender = NO;
  resultUserPb.gender = 0;
  return self;
}
- (BOOL) hasAddress {
  return resultUserPb.hasAddress;
}
- (NSString*) address {
  return resultUserPb.address;
}
- (UserPbBuilder*) setAddress:(NSString*) value {
  resultUserPb.hasAddress = YES;
  resultUserPb.address = value;
  return self;
}
- (UserPbBuilder*) clearAddress {
  resultUserPb.hasAddress = NO;
  resultUserPb.address = @"";
  return self;
}
- (BOOL) hasEmail {
  return resultUserPb.hasEmail;
}
- (NSString*) email {
  return resultUserPb.email;
}
- (UserPbBuilder*) setEmail:(NSString*) value {
  resultUserPb.hasEmail = YES;
  resultUserPb.email = value;
  return self;
}
- (UserPbBuilder*) clearEmail {
  resultUserPb.hasEmail = NO;
  resultUserPb.email = @"";
  return self;
}
- (BOOL) hasToken {
  return resultUserPb.hasToken;
}
- (NSString*) token {
  return resultUserPb.token;
}
- (UserPbBuilder*) setToken:(NSString*) value {
  resultUserPb.hasToken = YES;
  resultUserPb.token = value;
  return self;
}
- (UserPbBuilder*) clearToken {
  resultUserPb.hasToken = NO;
  resultUserPb.token = @"";
  return self;
}
- (BOOL) hasSchoolName {
  return resultUserPb.hasSchoolName;
}
- (NSString*) schoolName {
  return resultUserPb.schoolName;
}
- (UserPbBuilder*) setSchoolName:(NSString*) value {
  resultUserPb.hasSchoolName = YES;
  resultUserPb.schoolName = value;
  return self;
}
- (UserPbBuilder*) clearSchoolName {
  resultUserPb.hasSchoolName = NO;
  resultUserPb.schoolName = @"";
  return self;
}
- (BOOL) hasPortrait {
  return resultUserPb.hasPortrait;
}
- (NSString*) portrait {
  return resultUserPb.portrait;
}
- (UserPbBuilder*) setPortrait:(NSString*) value {
  resultUserPb.hasPortrait = YES;
  resultUserPb.portrait = value;
  return self;
}
- (UserPbBuilder*) clearPortrait {
  resultUserPb.hasPortrait = NO;
  resultUserPb.portrait = @"";
  return self;
}
- (BOOL) hasFile {
  return resultUserPb.hasFile;
}
- (NSData*) file {
  return resultUserPb.file;
}
- (UserPbBuilder*) setFile:(NSData*) value {
  resultUserPb.hasFile = YES;
  resultUserPb.file = value;
  return self;
}
- (UserPbBuilder*) clearFile {
  resultUserPb.hasFile = NO;
  resultUserPb.file = [NSData data];
  return self;
}
- (BOOL) hasParentsPb {
  return resultUserPb.hasParentsPb;
}
- (ParentsPb*) parentsPb {
  return resultUserPb.parentsPb;
}
- (UserPbBuilder*) setParentsPb:(ParentsPb*) value {
  resultUserPb.hasParentsPb = YES;
  resultUserPb.parentsPb = value;
  return self;
}
- (UserPbBuilder*) setParentsPbBuilder:(ParentsPbBuilder*) builderForValue {
  return [self setParentsPb:[builderForValue build]];
}
- (UserPbBuilder*) mergeParentsPb:(ParentsPb*) value {
  if (resultUserPb.hasParentsPb &&
      resultUserPb.parentsPb != [ParentsPb defaultInstance]) {
    resultUserPb.parentsPb =
      [[[ParentsPb builderWithPrototype:resultUserPb.parentsPb] mergeFrom:value] buildPartial];
  } else {
    resultUserPb.parentsPb = value;
  }
  resultUserPb.hasParentsPb = YES;
  return self;
}
- (UserPbBuilder*) clearParentsPb {
  resultUserPb.hasParentsPb = NO;
  resultUserPb.parentsPb = [ParentsPb defaultInstance];
  return self;
}
- (BOOL) hasTeacherPb {
  return resultUserPb.hasTeacherPb;
}
- (TeacherPb*) teacherPb {
  return resultUserPb.teacherPb;
}
- (UserPbBuilder*) setTeacherPb:(TeacherPb*) value {
  resultUserPb.hasTeacherPb = YES;
  resultUserPb.teacherPb = value;
  return self;
}
- (UserPbBuilder*) setTeacherPbBuilder:(TeacherPbBuilder*) builderForValue {
  return [self setTeacherPb:[builderForValue build]];
}
- (UserPbBuilder*) mergeTeacherPb:(TeacherPb*) value {
  if (resultUserPb.hasTeacherPb &&
      resultUserPb.teacherPb != [TeacherPb defaultInstance]) {
    resultUserPb.teacherPb =
      [[[TeacherPb builderWithPrototype:resultUserPb.teacherPb] mergeFrom:value] buildPartial];
  } else {
    resultUserPb.teacherPb = value;
  }
  resultUserPb.hasTeacherPb = YES;
  return self;
}
- (UserPbBuilder*) clearTeacherPb {
  resultUserPb.hasTeacherPb = NO;
  resultUserPb.teacherPb = [TeacherPb defaultInstance];
  return self;
}
- (BOOL) hasSchoolPb {
  return resultUserPb.hasSchoolPb;
}
- (SchoolPb*) schoolPb {
  return resultUserPb.schoolPb;
}
- (UserPbBuilder*) setSchoolPb:(SchoolPb*) value {
  resultUserPb.hasSchoolPb = YES;
  resultUserPb.schoolPb = value;
  return self;
}
- (UserPbBuilder*) setSchoolPbBuilder:(SchoolPbBuilder*) builderForValue {
  return [self setSchoolPb:[builderForValue build]];
}
- (UserPbBuilder*) mergeSchoolPb:(SchoolPb*) value {
  if (resultUserPb.hasSchoolPb &&
      resultUserPb.schoolPb != [SchoolPb defaultInstance]) {
    resultUserPb.schoolPb =
      [[[SchoolPb builderWithPrototype:resultUserPb.schoolPb] mergeFrom:value] buildPartial];
  } else {
    resultUserPb.schoolPb = value;
  }
  resultUserPb.hasSchoolPb = YES;
  return self;
}
- (UserPbBuilder*) clearSchoolPb {
  resultUserPb.hasSchoolPb = NO;
  resultUserPb.schoolPb = [SchoolPb defaultInstance];
  return self;
}
- (NSMutableArray *)funcCtrlPb {
  return resultUserPb.funcCtrlPbArray;
}
- (FuncCtrlPb*)funcCtrlPbAtIndex:(NSUInteger)index {
  return [resultUserPb funcCtrlPbAtIndex:index];
}
- (UserPbBuilder *)addFuncCtrlPb:(FuncCtrlPb*)value {
  if (resultUserPb.funcCtrlPbArray == nil) {
    resultUserPb.funcCtrlPbArray = [[NSMutableArray alloc]init];
  }
  [resultUserPb.funcCtrlPbArray addObject:value];
  return self;
}
- (UserPbBuilder *)setFuncCtrlPbArray:(NSArray *)array {
  resultUserPb.funcCtrlPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (UserPbBuilder *)clearFuncCtrlPb {
  resultUserPb.funcCtrlPbArray = nil;
  return self;
}
- (BOOL) hasHasInitPwd {
  return resultUserPb.hasHasInitPwd;
}
- (SInt32) hasInitPwd {
  return resultUserPb.hasInitPwd;
}
- (UserPbBuilder*) setHasInitPwd:(SInt32) value {
  resultUserPb.hasHasInitPwd = YES;
  resultUserPb.hasInitPwd = value;
  return self;
}
- (UserPbBuilder*) clearHasInitPwd {
  resultUserPb.hasHasInitPwd = NO;
  resultUserPb.hasInitPwd = 0;
  return self;
}
@end

@interface SchoolPb ()
@property SInt64 id;
@property (strong) NSString* domain;
@property (strong) NSString* name;
@property SInt64 year;
@property SInt32 semester;
@end

@implementation SchoolPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasDomain {
  return !!hasDomain_;
}
- (void) setHasDomain:(BOOL) _value_ {
  hasDomain_ = !!_value_;
}
@synthesize domain;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasYear {
  return !!hasYear_;
}
- (void) setHasYear:(BOOL) _value_ {
  hasYear_ = !!_value_;
}
@synthesize year;
- (BOOL) hasSemester {
  return !!hasSemester_;
}
- (void) setHasSemester:(BOOL) _value_ {
  hasSemester_ = !!_value_;
}
@synthesize semester;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.domain = @"";
    self.name = @"";
    self.year = 0L;
    self.semester = 0;
  }
  return self;
}
static SchoolPb* defaultSchoolPbInstance = nil;
+ (void) initialize {
  if (self == [SchoolPb class]) {
    defaultSchoolPbInstance = [[SchoolPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSchoolPbInstance;
}
- (instancetype) defaultInstance {
  return defaultSchoolPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasDomain) {
    [output writeString:2 value:self.domain];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasYear) {
    [output writeInt64:4 value:self.year];
  }
  if (self.hasSemester) {
    [output writeInt32:5 value:self.semester];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasDomain) {
    size_ += computeStringSize(2, self.domain);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasYear) {
    size_ += computeInt64Size(4, self.year);
  }
  if (self.hasSemester) {
    size_ += computeInt32Size(5, self.semester);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SchoolPb*) parseFromData:(NSData*) data {
  return (SchoolPb*)[[[SchoolPb builder] mergeFromData:data] build];
}
+ (SchoolPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SchoolPb*)[[[SchoolPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SchoolPb*) parseFromInputStream:(NSInputStream*) input {
  return (SchoolPb*)[[[SchoolPb builder] mergeFromInputStream:input] build];
}
+ (SchoolPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SchoolPb*)[[[SchoolPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SchoolPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SchoolPb*)[[[SchoolPb builder] mergeFromCodedInputStream:input] build];
}
+ (SchoolPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SchoolPb*)[[[SchoolPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SchoolPbBuilder*) builder {
  return [[SchoolPbBuilder alloc] init];
}
+ (SchoolPbBuilder*) builderWithPrototype:(SchoolPb*) prototype {
  return [[SchoolPb builder] mergeFrom:prototype];
}
- (SchoolPbBuilder*) builder {
  return [SchoolPb builder];
}
- (SchoolPbBuilder*) toBuilder {
  return [SchoolPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasDomain) {
    [output appendFormat:@"%@%@: %@\n", indent, @"domain", self.domain];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasYear) {
    [output appendFormat:@"%@%@: %@\n", indent, @"year", [NSNumber numberWithLongLong:self.year]];
  }
  if (self.hasSemester) {
    [output appendFormat:@"%@%@: %@\n", indent, @"semester", [NSNumber numberWithInteger:self.semester]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasDomain) {
    [dictionary setObject: self.domain forKey: @"domain"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasYear) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.year] forKey: @"year"];
  }
  if (self.hasSemester) {
    [dictionary setObject: [NSNumber numberWithInteger:self.semester] forKey: @"semester"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SchoolPb class]]) {
    return NO;
  }
  SchoolPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasDomain == otherMessage.hasDomain &&
      (!self.hasDomain || [self.domain isEqual:otherMessage.domain]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasYear == otherMessage.hasYear &&
      (!self.hasYear || self.year == otherMessage.year) &&
      self.hasSemester == otherMessage.hasSemester &&
      (!self.hasSemester || self.semester == otherMessage.semester) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasDomain) {
    hashCode = hashCode * 31 + [self.domain hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasYear) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.year] hash];
  }
  if (self.hasSemester) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.semester] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SchoolPbBuilder()
@property (strong) SchoolPb* resultSchoolPb;
@end

@implementation SchoolPbBuilder
@synthesize resultSchoolPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSchoolPb = [[SchoolPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSchoolPb;
}
- (SchoolPbBuilder*) clear {
  self.resultSchoolPb = [[SchoolPb alloc] init];
  return self;
}
- (SchoolPbBuilder*) clone {
  return [SchoolPb builderWithPrototype:resultSchoolPb];
}
- (SchoolPb*) defaultInstance {
  return [SchoolPb defaultInstance];
}
- (SchoolPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SchoolPb*) buildPartial {
  SchoolPb* returnMe = resultSchoolPb;
  self.resultSchoolPb = nil;
  return returnMe;
}
- (SchoolPbBuilder*) mergeFrom:(SchoolPb*) other {
  if (other == [SchoolPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasDomain) {
    [self setDomain:other.domain];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasYear) {
    [self setYear:other.year];
  }
  if (other.hasSemester) {
    [self setSemester:other.semester];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SchoolPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SchoolPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setDomain:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setYear:[input readInt64]];
        break;
      }
      case 40: {
        [self setSemester:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultSchoolPb.hasId;
}
- (SInt64) id {
  return resultSchoolPb.id;
}
- (SchoolPbBuilder*) setId:(SInt64) value {
  resultSchoolPb.hasId = YES;
  resultSchoolPb.id = value;
  return self;
}
- (SchoolPbBuilder*) clearId {
  resultSchoolPb.hasId = NO;
  resultSchoolPb.id = 0L;
  return self;
}
- (BOOL) hasDomain {
  return resultSchoolPb.hasDomain;
}
- (NSString*) domain {
  return resultSchoolPb.domain;
}
- (SchoolPbBuilder*) setDomain:(NSString*) value {
  resultSchoolPb.hasDomain = YES;
  resultSchoolPb.domain = value;
  return self;
}
- (SchoolPbBuilder*) clearDomain {
  resultSchoolPb.hasDomain = NO;
  resultSchoolPb.domain = @"";
  return self;
}
- (BOOL) hasName {
  return resultSchoolPb.hasName;
}
- (NSString*) name {
  return resultSchoolPb.name;
}
- (SchoolPbBuilder*) setName:(NSString*) value {
  resultSchoolPb.hasName = YES;
  resultSchoolPb.name = value;
  return self;
}
- (SchoolPbBuilder*) clearName {
  resultSchoolPb.hasName = NO;
  resultSchoolPb.name = @"";
  return self;
}
- (BOOL) hasYear {
  return resultSchoolPb.hasYear;
}
- (SInt64) year {
  return resultSchoolPb.year;
}
- (SchoolPbBuilder*) setYear:(SInt64) value {
  resultSchoolPb.hasYear = YES;
  resultSchoolPb.year = value;
  return self;
}
- (SchoolPbBuilder*) clearYear {
  resultSchoolPb.hasYear = NO;
  resultSchoolPb.year = 0L;
  return self;
}
- (BOOL) hasSemester {
  return resultSchoolPb.hasSemester;
}
- (SInt32) semester {
  return resultSchoolPb.semester;
}
- (SchoolPbBuilder*) setSemester:(SInt32) value {
  resultSchoolPb.hasSemester = YES;
  resultSchoolPb.semester = value;
  return self;
}
- (SchoolPbBuilder*) clearSemester {
  resultSchoolPb.hasSemester = NO;
  resultSchoolPb.semester = 0;
  return self;
}
@end

@interface FuncCtrlPb ()
@property SInt64 schoolId;
@property (strong) NSString* funcCode;
@property SInt32 status;
@end

@implementation FuncCtrlPb

- (BOOL) hasSchoolId {
  return !!hasSchoolId_;
}
- (void) setHasSchoolId:(BOOL) _value_ {
  hasSchoolId_ = !!_value_;
}
@synthesize schoolId;
- (BOOL) hasFuncCode {
  return !!hasFuncCode_;
}
- (void) setHasFuncCode:(BOOL) _value_ {
  hasFuncCode_ = !!_value_;
}
@synthesize funcCode;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (instancetype) init {
  if ((self = [super init])) {
    self.schoolId = 0L;
    self.funcCode = @"";
    self.status = 0;
  }
  return self;
}
static FuncCtrlPb* defaultFuncCtrlPbInstance = nil;
+ (void) initialize {
  if (self == [FuncCtrlPb class]) {
    defaultFuncCtrlPbInstance = [[FuncCtrlPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFuncCtrlPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFuncCtrlPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSchoolId) {
    [output writeInt64:1 value:self.schoolId];
  }
  if (self.hasFuncCode) {
    [output writeString:2 value:self.funcCode];
  }
  if (self.hasStatus) {
    [output writeInt32:3 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSchoolId) {
    size_ += computeInt64Size(1, self.schoolId);
  }
  if (self.hasFuncCode) {
    size_ += computeStringSize(2, self.funcCode);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(3, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FuncCtrlPb*) parseFromData:(NSData*) data {
  return (FuncCtrlPb*)[[[FuncCtrlPb builder] mergeFromData:data] build];
}
+ (FuncCtrlPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FuncCtrlPb*)[[[FuncCtrlPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FuncCtrlPb*) parseFromInputStream:(NSInputStream*) input {
  return (FuncCtrlPb*)[[[FuncCtrlPb builder] mergeFromInputStream:input] build];
}
+ (FuncCtrlPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FuncCtrlPb*)[[[FuncCtrlPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FuncCtrlPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FuncCtrlPb*)[[[FuncCtrlPb builder] mergeFromCodedInputStream:input] build];
}
+ (FuncCtrlPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FuncCtrlPb*)[[[FuncCtrlPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FuncCtrlPbBuilder*) builder {
  return [[FuncCtrlPbBuilder alloc] init];
}
+ (FuncCtrlPbBuilder*) builderWithPrototype:(FuncCtrlPb*) prototype {
  return [[FuncCtrlPb builder] mergeFrom:prototype];
}
- (FuncCtrlPbBuilder*) builder {
  return [FuncCtrlPb builder];
}
- (FuncCtrlPbBuilder*) toBuilder {
  return [FuncCtrlPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSchoolId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolId", [NSNumber numberWithLongLong:self.schoolId]];
  }
  if (self.hasFuncCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"funcCode", self.funcCode];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSchoolId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.schoolId] forKey: @"schoolId"];
  }
  if (self.hasFuncCode) {
    [dictionary setObject: self.funcCode forKey: @"funcCode"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FuncCtrlPb class]]) {
    return NO;
  }
  FuncCtrlPb *otherMessage = other;
  return
      self.hasSchoolId == otherMessage.hasSchoolId &&
      (!self.hasSchoolId || self.schoolId == otherMessage.schoolId) &&
      self.hasFuncCode == otherMessage.hasFuncCode &&
      (!self.hasFuncCode || [self.funcCode isEqual:otherMessage.funcCode]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSchoolId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.schoolId] hash];
  }
  if (self.hasFuncCode) {
    hashCode = hashCode * 31 + [self.funcCode hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FuncCtrlPbBuilder()
@property (strong) FuncCtrlPb* resultFuncCtrlPb;
@end

@implementation FuncCtrlPbBuilder
@synthesize resultFuncCtrlPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFuncCtrlPb = [[FuncCtrlPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFuncCtrlPb;
}
- (FuncCtrlPbBuilder*) clear {
  self.resultFuncCtrlPb = [[FuncCtrlPb alloc] init];
  return self;
}
- (FuncCtrlPbBuilder*) clone {
  return [FuncCtrlPb builderWithPrototype:resultFuncCtrlPb];
}
- (FuncCtrlPb*) defaultInstance {
  return [FuncCtrlPb defaultInstance];
}
- (FuncCtrlPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FuncCtrlPb*) buildPartial {
  FuncCtrlPb* returnMe = resultFuncCtrlPb;
  self.resultFuncCtrlPb = nil;
  return returnMe;
}
- (FuncCtrlPbBuilder*) mergeFrom:(FuncCtrlPb*) other {
  if (other == [FuncCtrlPb defaultInstance]) {
    return self;
  }
  if (other.hasSchoolId) {
    [self setSchoolId:other.schoolId];
  }
  if (other.hasFuncCode) {
    [self setFuncCode:other.funcCode];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FuncCtrlPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FuncCtrlPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSchoolId:[input readInt64]];
        break;
      }
      case 18: {
        [self setFuncCode:[input readString]];
        break;
      }
      case 24: {
        [self setStatus:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSchoolId {
  return resultFuncCtrlPb.hasSchoolId;
}
- (SInt64) schoolId {
  return resultFuncCtrlPb.schoolId;
}
- (FuncCtrlPbBuilder*) setSchoolId:(SInt64) value {
  resultFuncCtrlPb.hasSchoolId = YES;
  resultFuncCtrlPb.schoolId = value;
  return self;
}
- (FuncCtrlPbBuilder*) clearSchoolId {
  resultFuncCtrlPb.hasSchoolId = NO;
  resultFuncCtrlPb.schoolId = 0L;
  return self;
}
- (BOOL) hasFuncCode {
  return resultFuncCtrlPb.hasFuncCode;
}
- (NSString*) funcCode {
  return resultFuncCtrlPb.funcCode;
}
- (FuncCtrlPbBuilder*) setFuncCode:(NSString*) value {
  resultFuncCtrlPb.hasFuncCode = YES;
  resultFuncCtrlPb.funcCode = value;
  return self;
}
- (FuncCtrlPbBuilder*) clearFuncCode {
  resultFuncCtrlPb.hasFuncCode = NO;
  resultFuncCtrlPb.funcCode = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultFuncCtrlPb.hasStatus;
}
- (SInt32) status {
  return resultFuncCtrlPb.status;
}
- (FuncCtrlPbBuilder*) setStatus:(SInt32) value {
  resultFuncCtrlPb.hasStatus = YES;
  resultFuncCtrlPb.status = value;
  return self;
}
- (FuncCtrlPbBuilder*) clearStatus {
  resultFuncCtrlPb.hasStatus = NO;
  resultFuncCtrlPb.status = 0;
  return self;
}
@end

@interface ParentsPb ()
@property (strong) NSString* mobile;
@property (strong) NSMutableArray * studentPbArray;
@property (strong) NSMutableArray * classPbArray;
@end

@implementation ParentsPb

- (BOOL) hasMobile {
  return !!hasMobile_;
}
- (void) setHasMobile:(BOOL) _value_ {
  hasMobile_ = !!_value_;
}
@synthesize mobile;
@synthesize studentPbArray;
@dynamic studentPb;
@synthesize classPbArray;
@dynamic classPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.mobile = @"";
  }
  return self;
}
static ParentsPb* defaultParentsPbInstance = nil;
+ (void) initialize {
  if (self == [ParentsPb class]) {
    defaultParentsPbInstance = [[ParentsPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultParentsPbInstance;
}
- (instancetype) defaultInstance {
  return defaultParentsPbInstance;
}
- (NSArray *)studentPb {
  return studentPbArray;
}
- (StudentPb*)studentPbAtIndex:(NSUInteger)index {
  return [studentPbArray objectAtIndex:index];
}
- (NSArray *)classPb {
  return classPbArray;
}
- (FscClassPb*)classPbAtIndex:(NSUInteger)index {
  return [classPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMobile) {
    [output writeString:1 value:self.mobile];
  }
  [self.studentPbArray enumerateObjectsUsingBlock:^(StudentPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.classPbArray enumerateObjectsUsingBlock:^(FscClassPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMobile) {
    size_ += computeStringSize(1, self.mobile);
  }
  [self.studentPbArray enumerateObjectsUsingBlock:^(StudentPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.classPbArray enumerateObjectsUsingBlock:^(FscClassPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ParentsPb*) parseFromData:(NSData*) data {
  return (ParentsPb*)[[[ParentsPb builder] mergeFromData:data] build];
}
+ (ParentsPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ParentsPb*)[[[ParentsPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ParentsPb*) parseFromInputStream:(NSInputStream*) input {
  return (ParentsPb*)[[[ParentsPb builder] mergeFromInputStream:input] build];
}
+ (ParentsPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ParentsPb*)[[[ParentsPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ParentsPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ParentsPb*)[[[ParentsPb builder] mergeFromCodedInputStream:input] build];
}
+ (ParentsPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ParentsPb*)[[[ParentsPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ParentsPbBuilder*) builder {
  return [[ParentsPbBuilder alloc] init];
}
+ (ParentsPbBuilder*) builderWithPrototype:(ParentsPb*) prototype {
  return [[ParentsPb builder] mergeFrom:prototype];
}
- (ParentsPbBuilder*) builder {
  return [ParentsPb builder];
}
- (ParentsPbBuilder*) toBuilder {
  return [ParentsPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMobile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mobile", self.mobile];
  }
  [self.studentPbArray enumerateObjectsUsingBlock:^(StudentPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"studentPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.classPbArray enumerateObjectsUsingBlock:^(FscClassPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"classPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMobile) {
    [dictionary setObject: self.mobile forKey: @"mobile"];
  }
  for (StudentPb* element in self.studentPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"studentPb"];
  }
  for (FscClassPb* element in self.classPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"classPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ParentsPb class]]) {
    return NO;
  }
  ParentsPb *otherMessage = other;
  return
      self.hasMobile == otherMessage.hasMobile &&
      (!self.hasMobile || [self.mobile isEqual:otherMessage.mobile]) &&
      [self.studentPbArray isEqualToArray:otherMessage.studentPbArray] &&
      [self.classPbArray isEqualToArray:otherMessage.classPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMobile) {
    hashCode = hashCode * 31 + [self.mobile hash];
  }
  [self.studentPbArray enumerateObjectsUsingBlock:^(StudentPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.classPbArray enumerateObjectsUsingBlock:^(FscClassPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ParentsPbBuilder()
@property (strong) ParentsPb* resultParentsPb;
@end

@implementation ParentsPbBuilder
@synthesize resultParentsPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultParentsPb = [[ParentsPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultParentsPb;
}
- (ParentsPbBuilder*) clear {
  self.resultParentsPb = [[ParentsPb alloc] init];
  return self;
}
- (ParentsPbBuilder*) clone {
  return [ParentsPb builderWithPrototype:resultParentsPb];
}
- (ParentsPb*) defaultInstance {
  return [ParentsPb defaultInstance];
}
- (ParentsPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ParentsPb*) buildPartial {
  ParentsPb* returnMe = resultParentsPb;
  self.resultParentsPb = nil;
  return returnMe;
}
- (ParentsPbBuilder*) mergeFrom:(ParentsPb*) other {
  if (other == [ParentsPb defaultInstance]) {
    return self;
  }
  if (other.hasMobile) {
    [self setMobile:other.mobile];
  }
  if (other.studentPbArray.count > 0) {
    if (resultParentsPb.studentPbArray == nil) {
      resultParentsPb.studentPbArray = [[NSMutableArray alloc] initWithArray:other.studentPbArray];
    } else {
      [resultParentsPb.studentPbArray addObjectsFromArray:other.studentPbArray];
    }
  }
  if (other.classPbArray.count > 0) {
    if (resultParentsPb.classPbArray == nil) {
      resultParentsPb.classPbArray = [[NSMutableArray alloc] initWithArray:other.classPbArray];
    } else {
      [resultParentsPb.classPbArray addObjectsFromArray:other.classPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ParentsPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ParentsPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMobile:[input readString]];
        break;
      }
      case 18: {
        StudentPbBuilder* subBuilder = [StudentPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addStudentPb:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        FscClassPbBuilder* subBuilder = [FscClassPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClassPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMobile {
  return resultParentsPb.hasMobile;
}
- (NSString*) mobile {
  return resultParentsPb.mobile;
}
- (ParentsPbBuilder*) setMobile:(NSString*) value {
  resultParentsPb.hasMobile = YES;
  resultParentsPb.mobile = value;
  return self;
}
- (ParentsPbBuilder*) clearMobile {
  resultParentsPb.hasMobile = NO;
  resultParentsPb.mobile = @"";
  return self;
}
- (NSMutableArray *)studentPb {
  return resultParentsPb.studentPbArray;
}
- (StudentPb*)studentPbAtIndex:(NSUInteger)index {
  return [resultParentsPb studentPbAtIndex:index];
}
- (ParentsPbBuilder *)addStudentPb:(StudentPb*)value {
  if (resultParentsPb.studentPbArray == nil) {
    resultParentsPb.studentPbArray = [[NSMutableArray alloc]init];
  }
  [resultParentsPb.studentPbArray addObject:value];
  return self;
}
- (ParentsPbBuilder *)setStudentPbArray:(NSArray *)array {
  resultParentsPb.studentPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ParentsPbBuilder *)clearStudentPb {
  resultParentsPb.studentPbArray = nil;
  return self;
}
- (NSMutableArray *)classPb {
  return resultParentsPb.classPbArray;
}
- (FscClassPb*)classPbAtIndex:(NSUInteger)index {
  return [resultParentsPb classPbAtIndex:index];
}
- (ParentsPbBuilder *)addClassPb:(FscClassPb*)value {
  if (resultParentsPb.classPbArray == nil) {
    resultParentsPb.classPbArray = [[NSMutableArray alloc]init];
  }
  [resultParentsPb.classPbArray addObject:value];
  return self;
}
- (ParentsPbBuilder *)setClassPbArray:(NSArray *)array {
  resultParentsPb.classPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ParentsPbBuilder *)clearClassPb {
  resultParentsPb.classPbArray = nil;
  return self;
}
@end

@interface TeacherPb ()
@property (strong) NSString* mobile;
@property (strong) NSString* title;
@property SInt64 subjectId;
@property (strong) NSString* subjectName;
@property (strong) NSMutableArray * classPbArray;
@property (strong) NSMutableArray * teachPlanPbArray;
@property (strong) PBAppendableArray * subjectArray;
@end

@implementation TeacherPb

- (BOOL) hasMobile {
  return !!hasMobile_;
}
- (void) setHasMobile:(BOOL) _value_ {
  hasMobile_ = !!_value_;
}
@synthesize mobile;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasSubjectId {
  return !!hasSubjectId_;
}
- (void) setHasSubjectId:(BOOL) _value_ {
  hasSubjectId_ = !!_value_;
}
@synthesize subjectId;
- (BOOL) hasSubjectName {
  return !!hasSubjectName_;
}
- (void) setHasSubjectName:(BOOL) _value_ {
  hasSubjectName_ = !!_value_;
}
@synthesize subjectName;
@synthesize classPbArray;
@dynamic classPb;
@synthesize teachPlanPbArray;
@dynamic teachPlanPb;
@synthesize subjectArray;
@dynamic subject;
- (instancetype) init {
  if ((self = [super init])) {
    self.mobile = @"";
    self.title = @"";
    self.subjectId = 0L;
    self.subjectName = @"";
  }
  return self;
}
static TeacherPb* defaultTeacherPbInstance = nil;
+ (void) initialize {
  if (self == [TeacherPb class]) {
    defaultTeacherPbInstance = [[TeacherPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTeacherPbInstance;
}
- (instancetype) defaultInstance {
  return defaultTeacherPbInstance;
}
- (NSArray *)classPb {
  return classPbArray;
}
- (FscClassPb*)classPbAtIndex:(NSUInteger)index {
  return [classPbArray objectAtIndex:index];
}
- (NSArray *)teachPlanPb {
  return teachPlanPbArray;
}
- (TeachPlanPb*)teachPlanPbAtIndex:(NSUInteger)index {
  return [teachPlanPbArray objectAtIndex:index];
}
- (PBArray *)subject {
  return subjectArray;
}
- (SInt64)subjectAtIndex:(NSUInteger)index {
  return [subjectArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMobile) {
    [output writeString:1 value:self.mobile];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  if (self.hasSubjectId) {
    [output writeInt64:3 value:self.subjectId];
  }
  if (self.hasSubjectName) {
    [output writeString:4 value:self.subjectName];
  }
  [self.classPbArray enumerateObjectsUsingBlock:^(FscClassPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.teachPlanPbArray enumerateObjectsUsingBlock:^(TeachPlanPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  const NSUInteger subjectArrayCount = self.subjectArray.count;
  if (subjectArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.subjectArray.data;
    for (NSUInteger i = 0; i < subjectArrayCount; ++i) {
      [output writeInt64:7 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMobile) {
    size_ += computeStringSize(1, self.mobile);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(2, self.title);
  }
  if (self.hasSubjectId) {
    size_ += computeInt64Size(3, self.subjectId);
  }
  if (self.hasSubjectName) {
    size_ += computeStringSize(4, self.subjectName);
  }
  [self.classPbArray enumerateObjectsUsingBlock:^(FscClassPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  [self.teachPlanPbArray enumerateObjectsUsingBlock:^(TeachPlanPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.subjectArray.count;
    const SInt64 *values = (const SInt64 *)self.subjectArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TeacherPb*) parseFromData:(NSData*) data {
  return (TeacherPb*)[[[TeacherPb builder] mergeFromData:data] build];
}
+ (TeacherPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeacherPb*)[[[TeacherPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TeacherPb*) parseFromInputStream:(NSInputStream*) input {
  return (TeacherPb*)[[[TeacherPb builder] mergeFromInputStream:input] build];
}
+ (TeacherPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeacherPb*)[[[TeacherPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeacherPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TeacherPb*)[[[TeacherPb builder] mergeFromCodedInputStream:input] build];
}
+ (TeacherPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeacherPb*)[[[TeacherPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeacherPbBuilder*) builder {
  return [[TeacherPbBuilder alloc] init];
}
+ (TeacherPbBuilder*) builderWithPrototype:(TeacherPb*) prototype {
  return [[TeacherPb builder] mergeFrom:prototype];
}
- (TeacherPbBuilder*) builder {
  return [TeacherPb builder];
}
- (TeacherPbBuilder*) toBuilder {
  return [TeacherPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMobile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mobile", self.mobile];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasSubjectId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subjectId", [NSNumber numberWithLongLong:self.subjectId]];
  }
  if (self.hasSubjectName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subjectName", self.subjectName];
  }
  [self.classPbArray enumerateObjectsUsingBlock:^(FscClassPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"classPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.teachPlanPbArray enumerateObjectsUsingBlock:^(TeachPlanPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"teachPlanPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.subjectArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subject", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMobile) {
    [dictionary setObject: self.mobile forKey: @"mobile"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasSubjectId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.subjectId] forKey: @"subjectId"];
  }
  if (self.hasSubjectName) {
    [dictionary setObject: self.subjectName forKey: @"subjectName"];
  }
  for (FscClassPb* element in self.classPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"classPb"];
  }
  for (TeachPlanPb* element in self.teachPlanPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"teachPlanPb"];
  }
  NSMutableArray * subjectArrayArray = [NSMutableArray new];
  NSUInteger subjectArrayCount=self.subjectArray.count;
  for(int i=0;i<subjectArrayCount;i++){
    [subjectArrayArray addObject: @([self.subjectArray int64AtIndex:i])];
  }
  [dictionary setObject: subjectArrayArray forKey: @"subject"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TeacherPb class]]) {
    return NO;
  }
  TeacherPb *otherMessage = other;
  return
      self.hasMobile == otherMessage.hasMobile &&
      (!self.hasMobile || [self.mobile isEqual:otherMessage.mobile]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasSubjectId == otherMessage.hasSubjectId &&
      (!self.hasSubjectId || self.subjectId == otherMessage.subjectId) &&
      self.hasSubjectName == otherMessage.hasSubjectName &&
      (!self.hasSubjectName || [self.subjectName isEqual:otherMessage.subjectName]) &&
      [self.classPbArray isEqualToArray:otherMessage.classPbArray] &&
      [self.teachPlanPbArray isEqualToArray:otherMessage.teachPlanPbArray] &&
      [self.subjectArray isEqualToArray:otherMessage.subjectArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMobile) {
    hashCode = hashCode * 31 + [self.mobile hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasSubjectId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.subjectId] hash];
  }
  if (self.hasSubjectName) {
    hashCode = hashCode * 31 + [self.subjectName hash];
  }
  [self.classPbArray enumerateObjectsUsingBlock:^(FscClassPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.teachPlanPbArray enumerateObjectsUsingBlock:^(TeachPlanPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.subjectArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TeacherPbBuilder()
@property (strong) TeacherPb* resultTeacherPb;
@end

@implementation TeacherPbBuilder
@synthesize resultTeacherPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTeacherPb = [[TeacherPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTeacherPb;
}
- (TeacherPbBuilder*) clear {
  self.resultTeacherPb = [[TeacherPb alloc] init];
  return self;
}
- (TeacherPbBuilder*) clone {
  return [TeacherPb builderWithPrototype:resultTeacherPb];
}
- (TeacherPb*) defaultInstance {
  return [TeacherPb defaultInstance];
}
- (TeacherPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TeacherPb*) buildPartial {
  TeacherPb* returnMe = resultTeacherPb;
  self.resultTeacherPb = nil;
  return returnMe;
}
- (TeacherPbBuilder*) mergeFrom:(TeacherPb*) other {
  if (other == [TeacherPb defaultInstance]) {
    return self;
  }
  if (other.hasMobile) {
    [self setMobile:other.mobile];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasSubjectId) {
    [self setSubjectId:other.subjectId];
  }
  if (other.hasSubjectName) {
    [self setSubjectName:other.subjectName];
  }
  if (other.classPbArray.count > 0) {
    if (resultTeacherPb.classPbArray == nil) {
      resultTeacherPb.classPbArray = [[NSMutableArray alloc] initWithArray:other.classPbArray];
    } else {
      [resultTeacherPb.classPbArray addObjectsFromArray:other.classPbArray];
    }
  }
  if (other.teachPlanPbArray.count > 0) {
    if (resultTeacherPb.teachPlanPbArray == nil) {
      resultTeacherPb.teachPlanPbArray = [[NSMutableArray alloc] initWithArray:other.teachPlanPbArray];
    } else {
      [resultTeacherPb.teachPlanPbArray addObjectsFromArray:other.teachPlanPbArray];
    }
  }
  if (other.subjectArray.count > 0) {
    if (resultTeacherPb.subjectArray == nil) {
      resultTeacherPb.subjectArray = [other.subjectArray copy];
    } else {
      [resultTeacherPb.subjectArray appendArray:other.subjectArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TeacherPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TeacherPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMobile:[input readString]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 24: {
        [self setSubjectId:[input readInt64]];
        break;
      }
      case 34: {
        [self setSubjectName:[input readString]];
        break;
      }
      case 42: {
        FscClassPbBuilder* subBuilder = [FscClassPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClassPb:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        TeachPlanPbBuilder* subBuilder = [TeachPlanPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeachPlanPb:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self addSubject:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasMobile {
  return resultTeacherPb.hasMobile;
}
- (NSString*) mobile {
  return resultTeacherPb.mobile;
}
- (TeacherPbBuilder*) setMobile:(NSString*) value {
  resultTeacherPb.hasMobile = YES;
  resultTeacherPb.mobile = value;
  return self;
}
- (TeacherPbBuilder*) clearMobile {
  resultTeacherPb.hasMobile = NO;
  resultTeacherPb.mobile = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultTeacherPb.hasTitle;
}
- (NSString*) title {
  return resultTeacherPb.title;
}
- (TeacherPbBuilder*) setTitle:(NSString*) value {
  resultTeacherPb.hasTitle = YES;
  resultTeacherPb.title = value;
  return self;
}
- (TeacherPbBuilder*) clearTitle {
  resultTeacherPb.hasTitle = NO;
  resultTeacherPb.title = @"";
  return self;
}
- (BOOL) hasSubjectId {
  return resultTeacherPb.hasSubjectId;
}
- (SInt64) subjectId {
  return resultTeacherPb.subjectId;
}
- (TeacherPbBuilder*) setSubjectId:(SInt64) value {
  resultTeacherPb.hasSubjectId = YES;
  resultTeacherPb.subjectId = value;
  return self;
}
- (TeacherPbBuilder*) clearSubjectId {
  resultTeacherPb.hasSubjectId = NO;
  resultTeacherPb.subjectId = 0L;
  return self;
}
- (BOOL) hasSubjectName {
  return resultTeacherPb.hasSubjectName;
}
- (NSString*) subjectName {
  return resultTeacherPb.subjectName;
}
- (TeacherPbBuilder*) setSubjectName:(NSString*) value {
  resultTeacherPb.hasSubjectName = YES;
  resultTeacherPb.subjectName = value;
  return self;
}
- (TeacherPbBuilder*) clearSubjectName {
  resultTeacherPb.hasSubjectName = NO;
  resultTeacherPb.subjectName = @"";
  return self;
}
- (NSMutableArray *)classPb {
  return resultTeacherPb.classPbArray;
}
- (FscClassPb*)classPbAtIndex:(NSUInteger)index {
  return [resultTeacherPb classPbAtIndex:index];
}
- (TeacherPbBuilder *)addClassPb:(FscClassPb*)value {
  if (resultTeacherPb.classPbArray == nil) {
    resultTeacherPb.classPbArray = [[NSMutableArray alloc]init];
  }
  [resultTeacherPb.classPbArray addObject:value];
  return self;
}
- (TeacherPbBuilder *)setClassPbArray:(NSArray *)array {
  resultTeacherPb.classPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TeacherPbBuilder *)clearClassPb {
  resultTeacherPb.classPbArray = nil;
  return self;
}
- (NSMutableArray *)teachPlanPb {
  return resultTeacherPb.teachPlanPbArray;
}
- (TeachPlanPb*)teachPlanPbAtIndex:(NSUInteger)index {
  return [resultTeacherPb teachPlanPbAtIndex:index];
}
- (TeacherPbBuilder *)addTeachPlanPb:(TeachPlanPb*)value {
  if (resultTeacherPb.teachPlanPbArray == nil) {
    resultTeacherPb.teachPlanPbArray = [[NSMutableArray alloc]init];
  }
  [resultTeacherPb.teachPlanPbArray addObject:value];
  return self;
}
- (TeacherPbBuilder *)setTeachPlanPbArray:(NSArray *)array {
  resultTeacherPb.teachPlanPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TeacherPbBuilder *)clearTeachPlanPb {
  resultTeacherPb.teachPlanPbArray = nil;
  return self;
}
- (PBAppendableArray *)subject {
  return resultTeacherPb.subjectArray;
}
- (SInt64)subjectAtIndex:(NSUInteger)index {
  return [resultTeacherPb subjectAtIndex:index];
}
- (TeacherPbBuilder *)addSubject:(SInt64)value {
  if (resultTeacherPb.subjectArray == nil) {
    resultTeacherPb.subjectArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTeacherPb.subjectArray addInt64:value];
  return self;
}
- (TeacherPbBuilder *)setSubjectArray:(NSArray *)array {
  resultTeacherPb.subjectArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TeacherPbBuilder *)setSubjectValues:(const SInt64 *)values count:(NSUInteger)count {
  resultTeacherPb.subjectArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TeacherPbBuilder *)clearSubject {
  resultTeacherPb.subjectArray = nil;
  return self;
}
@end

@interface StudentPb ()
@property SInt64 id;
@property (strong) NSString* uuid;
@property (strong) NSString* name;
@property SInt64 classId;
@property SInt64 gradeId;
@end

@implementation StudentPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasClassId {
  return !!hasClassId_;
}
- (void) setHasClassId:(BOOL) _value_ {
  hasClassId_ = !!_value_;
}
@synthesize classId;
- (BOOL) hasGradeId {
  return !!hasGradeId_;
}
- (void) setHasGradeId:(BOOL) _value_ {
  hasGradeId_ = !!_value_;
}
@synthesize gradeId;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.uuid = @"";
    self.name = @"";
    self.classId = 0L;
    self.gradeId = 0L;
  }
  return self;
}
static StudentPb* defaultStudentPbInstance = nil;
+ (void) initialize {
  if (self == [StudentPb class]) {
    defaultStudentPbInstance = [[StudentPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStudentPbInstance;
}
- (instancetype) defaultInstance {
  return defaultStudentPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasUuid) {
    [output writeString:2 value:self.uuid];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasClassId) {
    [output writeInt64:4 value:self.classId];
  }
  if (self.hasGradeId) {
    [output writeInt64:5 value:self.gradeId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(2, self.uuid);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasClassId) {
    size_ += computeInt64Size(4, self.classId);
  }
  if (self.hasGradeId) {
    size_ += computeInt64Size(5, self.gradeId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StudentPb*) parseFromData:(NSData*) data {
  return (StudentPb*)[[[StudentPb builder] mergeFromData:data] build];
}
+ (StudentPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StudentPb*)[[[StudentPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StudentPb*) parseFromInputStream:(NSInputStream*) input {
  return (StudentPb*)[[[StudentPb builder] mergeFromInputStream:input] build];
}
+ (StudentPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StudentPb*)[[[StudentPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StudentPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StudentPb*)[[[StudentPb builder] mergeFromCodedInputStream:input] build];
}
+ (StudentPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StudentPb*)[[[StudentPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StudentPbBuilder*) builder {
  return [[StudentPbBuilder alloc] init];
}
+ (StudentPbBuilder*) builderWithPrototype:(StudentPb*) prototype {
  return [[StudentPb builder] mergeFrom:prototype];
}
- (StudentPbBuilder*) builder {
  return [StudentPb builder];
}
- (StudentPbBuilder*) toBuilder {
  return [StudentPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasClassId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classId", [NSNumber numberWithLongLong:self.classId]];
  }
  if (self.hasGradeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gradeId", [NSNumber numberWithLongLong:self.gradeId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasClassId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.classId] forKey: @"classId"];
  }
  if (self.hasGradeId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.gradeId] forKey: @"gradeId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StudentPb class]]) {
    return NO;
  }
  StudentPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasClassId == otherMessage.hasClassId &&
      (!self.hasClassId || self.classId == otherMessage.classId) &&
      self.hasGradeId == otherMessage.hasGradeId &&
      (!self.hasGradeId || self.gradeId == otherMessage.gradeId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasClassId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.classId] hash];
  }
  if (self.hasGradeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.gradeId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StudentPbBuilder()
@property (strong) StudentPb* resultStudentPb;
@end

@implementation StudentPbBuilder
@synthesize resultStudentPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStudentPb = [[StudentPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStudentPb;
}
- (StudentPbBuilder*) clear {
  self.resultStudentPb = [[StudentPb alloc] init];
  return self;
}
- (StudentPbBuilder*) clone {
  return [StudentPb builderWithPrototype:resultStudentPb];
}
- (StudentPb*) defaultInstance {
  return [StudentPb defaultInstance];
}
- (StudentPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StudentPb*) buildPartial {
  StudentPb* returnMe = resultStudentPb;
  self.resultStudentPb = nil;
  return returnMe;
}
- (StudentPbBuilder*) mergeFrom:(StudentPb*) other {
  if (other == [StudentPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasClassId) {
    [self setClassId:other.classId];
  }
  if (other.hasGradeId) {
    [self setGradeId:other.gradeId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StudentPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StudentPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setUuid:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setClassId:[input readInt64]];
        break;
      }
      case 40: {
        [self setGradeId:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultStudentPb.hasId;
}
- (SInt64) id {
  return resultStudentPb.id;
}
- (StudentPbBuilder*) setId:(SInt64) value {
  resultStudentPb.hasId = YES;
  resultStudentPb.id = value;
  return self;
}
- (StudentPbBuilder*) clearId {
  resultStudentPb.hasId = NO;
  resultStudentPb.id = 0L;
  return self;
}
- (BOOL) hasUuid {
  return resultStudentPb.hasUuid;
}
- (NSString*) uuid {
  return resultStudentPb.uuid;
}
- (StudentPbBuilder*) setUuid:(NSString*) value {
  resultStudentPb.hasUuid = YES;
  resultStudentPb.uuid = value;
  return self;
}
- (StudentPbBuilder*) clearUuid {
  resultStudentPb.hasUuid = NO;
  resultStudentPb.uuid = @"";
  return self;
}
- (BOOL) hasName {
  return resultStudentPb.hasName;
}
- (NSString*) name {
  return resultStudentPb.name;
}
- (StudentPbBuilder*) setName:(NSString*) value {
  resultStudentPb.hasName = YES;
  resultStudentPb.name = value;
  return self;
}
- (StudentPbBuilder*) clearName {
  resultStudentPb.hasName = NO;
  resultStudentPb.name = @"";
  return self;
}
- (BOOL) hasClassId {
  return resultStudentPb.hasClassId;
}
- (SInt64) classId {
  return resultStudentPb.classId;
}
- (StudentPbBuilder*) setClassId:(SInt64) value {
  resultStudentPb.hasClassId = YES;
  resultStudentPb.classId = value;
  return self;
}
- (StudentPbBuilder*) clearClassId {
  resultStudentPb.hasClassId = NO;
  resultStudentPb.classId = 0L;
  return self;
}
- (BOOL) hasGradeId {
  return resultStudentPb.hasGradeId;
}
- (SInt64) gradeId {
  return resultStudentPb.gradeId;
}
- (StudentPbBuilder*) setGradeId:(SInt64) value {
  resultStudentPb.hasGradeId = YES;
  resultStudentPb.gradeId = value;
  return self;
}
- (StudentPbBuilder*) clearGradeId {
  resultStudentPb.hasGradeId = NO;
  resultStudentPb.gradeId = 0L;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
