// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscChatTrg.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscChatTrgRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscChatTrgRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FscSessionRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TRecorderListPb ()
@property (strong) NSMutableArray * recorderPbArray;
@end

@implementation TRecorderListPb

@synthesize recorderPbArray;
@dynamic recorderPb;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TRecorderListPb* defaultTRecorderListPbInstance = nil;
+ (void) initialize {
  if (self == [TRecorderListPb class]) {
    defaultTRecorderListPbInstance = [[TRecorderListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTRecorderListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultTRecorderListPbInstance;
}
- (NSArray *)recorderPb {
  return recorderPbArray;
}
- (TRecorderPb*)recorderPbAtIndex:(NSUInteger)index {
  return [recorderPbArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.recorderPbArray enumerateObjectsUsingBlock:^(TRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.recorderPbArray enumerateObjectsUsingBlock:^(TRecorderPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TRecorderListPb*) parseFromData:(NSData*) data {
  return (TRecorderListPb*)[[[TRecorderListPb builder] mergeFromData:data] build];
}
+ (TRecorderListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TRecorderListPb*)[[[TRecorderListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TRecorderListPb*) parseFromInputStream:(NSInputStream*) input {
  return (TRecorderListPb*)[[[TRecorderListPb builder] mergeFromInputStream:input] build];
}
+ (TRecorderListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TRecorderListPb*)[[[TRecorderListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TRecorderListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TRecorderListPb*)[[[TRecorderListPb builder] mergeFromCodedInputStream:input] build];
}
+ (TRecorderListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TRecorderListPb*)[[[TRecorderListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TRecorderListPbBuilder*) builder {
  return [[TRecorderListPbBuilder alloc] init];
}
+ (TRecorderListPbBuilder*) builderWithPrototype:(TRecorderListPb*) prototype {
  return [[TRecorderListPb builder] mergeFrom:prototype];
}
- (TRecorderListPbBuilder*) builder {
  return [TRecorderListPb builder];
}
- (TRecorderListPbBuilder*) toBuilder {
  return [TRecorderListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.recorderPbArray enumerateObjectsUsingBlock:^(TRecorderPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"recorderPb"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (TRecorderPb* element in self.recorderPbArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"recorderPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TRecorderListPb class]]) {
    return NO;
  }
  TRecorderListPb *otherMessage = other;
  return
      [self.recorderPbArray isEqualToArray:otherMessage.recorderPbArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.recorderPbArray enumerateObjectsUsingBlock:^(TRecorderPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TRecorderListPbBuilder()
@property (strong) TRecorderListPb* resultTrecorderListPb;
@end

@implementation TRecorderListPbBuilder
@synthesize resultTrecorderListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTrecorderListPb = [[TRecorderListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTrecorderListPb;
}
- (TRecorderListPbBuilder*) clear {
  self.resultTrecorderListPb = [[TRecorderListPb alloc] init];
  return self;
}
- (TRecorderListPbBuilder*) clone {
  return [TRecorderListPb builderWithPrototype:resultTrecorderListPb];
}
- (TRecorderListPb*) defaultInstance {
  return [TRecorderListPb defaultInstance];
}
- (TRecorderListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TRecorderListPb*) buildPartial {
  TRecorderListPb* returnMe = resultTrecorderListPb;
  self.resultTrecorderListPb = nil;
  return returnMe;
}
- (TRecorderListPbBuilder*) mergeFrom:(TRecorderListPb*) other {
  if (other == [TRecorderListPb defaultInstance]) {
    return self;
  }
  if (other.recorderPbArray.count > 0) {
    if (resultTrecorderListPb.recorderPbArray == nil) {
      resultTrecorderListPb.recorderPbArray = [[NSMutableArray alloc] initWithArray:other.recorderPbArray];
    } else {
      [resultTrecorderListPb.recorderPbArray addObjectsFromArray:other.recorderPbArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TRecorderListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TRecorderListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TRecorderPbBuilder* subBuilder = [TRecorderPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecorderPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)recorderPb {
  return resultTrecorderListPb.recorderPbArray;
}
- (TRecorderPb*)recorderPbAtIndex:(NSUInteger)index {
  return [resultTrecorderListPb recorderPbAtIndex:index];
}
- (TRecorderListPbBuilder *)addRecorderPb:(TRecorderPb*)value {
  if (resultTrecorderListPb.recorderPbArray == nil) {
    resultTrecorderListPb.recorderPbArray = [[NSMutableArray alloc]init];
  }
  [resultTrecorderListPb.recorderPbArray addObject:value];
  return self;
}
- (TRecorderListPbBuilder *)setRecorderPbArray:(NSArray *)array {
  resultTrecorderListPb.recorderPbArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TRecorderListPbBuilder *)clearRecorderPb {
  resultTrecorderListPb.recorderPbArray = nil;
  return self;
}
@end

@interface TSessionPb ()
@property SInt64 id;
@property SInt64 schoolId;
@property (strong) NSString* uuid;
@property SInt32 sessionType;
@property SInt64 year;
@property SInt64 semester;
@property SInt64 gradeId;
@property SInt64 subjectId;
@property (strong) NSString* name;
@property SInt32 dataStatus;
@property SInt64 createdDate;
@property SInt64 timestamp;
@property (strong) NSMutableArray * userArray;
@property (strong) FscSessionPb* fscSession;
@end

@implementation TSessionPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasSchoolId {
  return !!hasSchoolId_;
}
- (void) setHasSchoolId:(BOOL) _value_ {
  hasSchoolId_ = !!_value_;
}
@synthesize schoolId;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasYear {
  return !!hasYear_;
}
- (void) setHasYear:(BOOL) _value_ {
  hasYear_ = !!_value_;
}
@synthesize year;
- (BOOL) hasSemester {
  return !!hasSemester_;
}
- (void) setHasSemester:(BOOL) _value_ {
  hasSemester_ = !!_value_;
}
@synthesize semester;
- (BOOL) hasGradeId {
  return !!hasGradeId_;
}
- (void) setHasGradeId:(BOOL) _value_ {
  hasGradeId_ = !!_value_;
}
@synthesize gradeId;
- (BOOL) hasSubjectId {
  return !!hasSubjectId_;
}
- (void) setHasSubjectId:(BOOL) _value_ {
  hasSubjectId_ = !!_value_;
}
@synthesize subjectId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasDataStatus {
  return !!hasDataStatus_;
}
- (void) setHasDataStatus:(BOOL) _value_ {
  hasDataStatus_ = !!_value_;
}
@synthesize dataStatus;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
@synthesize userArray;
@dynamic user;
- (BOOL) hasFscSession {
  return !!hasFscSession_;
}
- (void) setHasFscSession:(BOOL) _value_ {
  hasFscSession_ = !!_value_;
}
@synthesize fscSession;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.schoolId = 0L;
    self.uuid = @"";
    self.sessionType = 0;
    self.year = 0L;
    self.semester = 0L;
    self.gradeId = 0L;
    self.subjectId = 0L;
    self.name = @"";
    self.dataStatus = 0;
    self.createdDate = 0L;
    self.timestamp = 0L;
    self.fscSession = [FscSessionPb defaultInstance];
  }
  return self;
}
static TSessionPb* defaultTSessionPbInstance = nil;
+ (void) initialize {
  if (self == [TSessionPb class]) {
    defaultTSessionPbInstance = [[TSessionPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTSessionPbInstance;
}
- (instancetype) defaultInstance {
  return defaultTSessionPbInstance;
}
- (NSArray *)user {
  return userArray;
}
- (TUserPb*)userAtIndex:(NSUInteger)index {
  return [userArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasSchoolId) {
    [output writeInt64:2 value:self.schoolId];
  }
  if (self.hasUuid) {
    [output writeString:3 value:self.uuid];
  }
  if (self.hasSessionType) {
    [output writeInt32:4 value:self.sessionType];
  }
  if (self.hasYear) {
    [output writeInt64:5 value:self.year];
  }
  if (self.hasSemester) {
    [output writeInt64:6 value:self.semester];
  }
  if (self.hasGradeId) {
    [output writeInt64:7 value:self.gradeId];
  }
  if (self.hasSubjectId) {
    [output writeInt64:8 value:self.subjectId];
  }
  if (self.hasName) {
    [output writeString:9 value:self.name];
  }
  if (self.hasDataStatus) {
    [output writeInt32:10 value:self.dataStatus];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:11 value:self.createdDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:12 value:self.timestamp];
  }
  [self.userArray enumerateObjectsUsingBlock:^(TUserPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:13 value:element];
  }];
  if (self.hasFscSession) {
    [output writeMessage:14 value:self.fscSession];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasSchoolId) {
    size_ += computeInt64Size(2, self.schoolId);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(3, self.uuid);
  }
  if (self.hasSessionType) {
    size_ += computeInt32Size(4, self.sessionType);
  }
  if (self.hasYear) {
    size_ += computeInt64Size(5, self.year);
  }
  if (self.hasSemester) {
    size_ += computeInt64Size(6, self.semester);
  }
  if (self.hasGradeId) {
    size_ += computeInt64Size(7, self.gradeId);
  }
  if (self.hasSubjectId) {
    size_ += computeInt64Size(8, self.subjectId);
  }
  if (self.hasName) {
    size_ += computeStringSize(9, self.name);
  }
  if (self.hasDataStatus) {
    size_ += computeInt32Size(10, self.dataStatus);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(11, self.createdDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(12, self.timestamp);
  }
  [self.userArray enumerateObjectsUsingBlock:^(TUserPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(13, element);
  }];
  if (self.hasFscSession) {
    size_ += computeMessageSize(14, self.fscSession);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TSessionPb*) parseFromData:(NSData*) data {
  return (TSessionPb*)[[[TSessionPb builder] mergeFromData:data] build];
}
+ (TSessionPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSessionPb*)[[[TSessionPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TSessionPb*) parseFromInputStream:(NSInputStream*) input {
  return (TSessionPb*)[[[TSessionPb builder] mergeFromInputStream:input] build];
}
+ (TSessionPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSessionPb*)[[[TSessionPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TSessionPb*)[[[TSessionPb builder] mergeFromCodedInputStream:input] build];
}
+ (TSessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSessionPb*)[[[TSessionPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSessionPbBuilder*) builder {
  return [[TSessionPbBuilder alloc] init];
}
+ (TSessionPbBuilder*) builderWithPrototype:(TSessionPb*) prototype {
  return [[TSessionPb builder] mergeFrom:prototype];
}
- (TSessionPbBuilder*) builder {
  return [TSessionPb builder];
}
- (TSessionPbBuilder*) toBuilder {
  return [TSessionPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasSchoolId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolId", [NSNumber numberWithLongLong:self.schoolId]];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", [NSNumber numberWithInteger:self.sessionType]];
  }
  if (self.hasYear) {
    [output appendFormat:@"%@%@: %@\n", indent, @"year", [NSNumber numberWithLongLong:self.year]];
  }
  if (self.hasSemester) {
    [output appendFormat:@"%@%@: %@\n", indent, @"semester", [NSNumber numberWithLongLong:self.semester]];
  }
  if (self.hasGradeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gradeId", [NSNumber numberWithLongLong:self.gradeId]];
  }
  if (self.hasSubjectId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subjectId", [NSNumber numberWithLongLong:self.subjectId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDataStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataStatus", [NSNumber numberWithInteger:self.dataStatus]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.userArray enumerateObjectsUsingBlock:^(TUserPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasFscSession) {
    [output appendFormat:@"%@%@ {\n", indent, @"fscSession"];
    [self.fscSession writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasSchoolId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.schoolId] forKey: @"schoolId"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sessionType] forKey: @"sessionType"];
  }
  if (self.hasYear) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.year] forKey: @"year"];
  }
  if (self.hasSemester) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.semester] forKey: @"semester"];
  }
  if (self.hasGradeId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.gradeId] forKey: @"gradeId"];
  }
  if (self.hasSubjectId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.subjectId] forKey: @"subjectId"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasDataStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dataStatus] forKey: @"dataStatus"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  for (TUserPb* element in self.userArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"user"];
  }
  if (self.hasFscSession) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fscSession storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fscSession"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TSessionPb class]]) {
    return NO;
  }
  TSessionPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasSchoolId == otherMessage.hasSchoolId &&
      (!self.hasSchoolId || self.schoolId == otherMessage.schoolId) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasYear == otherMessage.hasYear &&
      (!self.hasYear || self.year == otherMessage.year) &&
      self.hasSemester == otherMessage.hasSemester &&
      (!self.hasSemester || self.semester == otherMessage.semester) &&
      self.hasGradeId == otherMessage.hasGradeId &&
      (!self.hasGradeId || self.gradeId == otherMessage.gradeId) &&
      self.hasSubjectId == otherMessage.hasSubjectId &&
      (!self.hasSubjectId || self.subjectId == otherMessage.subjectId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDataStatus == otherMessage.hasDataStatus &&
      (!self.hasDataStatus || self.dataStatus == otherMessage.dataStatus) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      [self.userArray isEqualToArray:otherMessage.userArray] &&
      self.hasFscSession == otherMessage.hasFscSession &&
      (!self.hasFscSession || [self.fscSession isEqual:otherMessage.fscSession]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasSchoolId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.schoolId] hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionType] hash];
  }
  if (self.hasYear) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.year] hash];
  }
  if (self.hasSemester) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.semester] hash];
  }
  if (self.hasGradeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.gradeId] hash];
  }
  if (self.hasSubjectId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.subjectId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDataStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dataStatus] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  [self.userArray enumerateObjectsUsingBlock:^(TUserPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasFscSession) {
    hashCode = hashCode * 31 + [self.fscSession hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TSessionPbBuilder()
@property (strong) TSessionPb* resultTsessionPb;
@end

@implementation TSessionPbBuilder
@synthesize resultTsessionPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTsessionPb = [[TSessionPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTsessionPb;
}
- (TSessionPbBuilder*) clear {
  self.resultTsessionPb = [[TSessionPb alloc] init];
  return self;
}
- (TSessionPbBuilder*) clone {
  return [TSessionPb builderWithPrototype:resultTsessionPb];
}
- (TSessionPb*) defaultInstance {
  return [TSessionPb defaultInstance];
}
- (TSessionPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TSessionPb*) buildPartial {
  TSessionPb* returnMe = resultTsessionPb;
  self.resultTsessionPb = nil;
  return returnMe;
}
- (TSessionPbBuilder*) mergeFrom:(TSessionPb*) other {
  if (other == [TSessionPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasSchoolId) {
    [self setSchoolId:other.schoolId];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasYear) {
    [self setYear:other.year];
  }
  if (other.hasSemester) {
    [self setSemester:other.semester];
  }
  if (other.hasGradeId) {
    [self setGradeId:other.gradeId];
  }
  if (other.hasSubjectId) {
    [self setSubjectId:other.subjectId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDataStatus) {
    [self setDataStatus:other.dataStatus];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.userArray.count > 0) {
    if (resultTsessionPb.userArray == nil) {
      resultTsessionPb.userArray = [[NSMutableArray alloc] initWithArray:other.userArray];
    } else {
      [resultTsessionPb.userArray addObjectsFromArray:other.userArray];
    }
  }
  if (other.hasFscSession) {
    [self mergeFscSession:other.fscSession];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TSessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TSessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setSchoolId:[input readInt64]];
        break;
      }
      case 26: {
        [self setUuid:[input readString]];
        break;
      }
      case 32: {
        [self setSessionType:[input readInt32]];
        break;
      }
      case 40: {
        [self setYear:[input readInt64]];
        break;
      }
      case 48: {
        [self setSemester:[input readInt64]];
        break;
      }
      case 56: {
        [self setGradeId:[input readInt64]];
        break;
      }
      case 64: {
        [self setSubjectId:[input readInt64]];
        break;
      }
      case 74: {
        [self setName:[input readString]];
        break;
      }
      case 80: {
        [self setDataStatus:[input readInt32]];
        break;
      }
      case 88: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 96: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 106: {
        TUserPbBuilder* subBuilder = [TUserPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUser:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        FscSessionPbBuilder* subBuilder = [FscSessionPb builder];
        if (self.hasFscSession) {
          [subBuilder mergeFrom:self.fscSession];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFscSession:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultTsessionPb.hasId;
}
- (SInt64) id {
  return resultTsessionPb.id;
}
- (TSessionPbBuilder*) setId:(SInt64) value {
  resultTsessionPb.hasId = YES;
  resultTsessionPb.id = value;
  return self;
}
- (TSessionPbBuilder*) clearId {
  resultTsessionPb.hasId = NO;
  resultTsessionPb.id = 0L;
  return self;
}
- (BOOL) hasSchoolId {
  return resultTsessionPb.hasSchoolId;
}
- (SInt64) schoolId {
  return resultTsessionPb.schoolId;
}
- (TSessionPbBuilder*) setSchoolId:(SInt64) value {
  resultTsessionPb.hasSchoolId = YES;
  resultTsessionPb.schoolId = value;
  return self;
}
- (TSessionPbBuilder*) clearSchoolId {
  resultTsessionPb.hasSchoolId = NO;
  resultTsessionPb.schoolId = 0L;
  return self;
}
- (BOOL) hasUuid {
  return resultTsessionPb.hasUuid;
}
- (NSString*) uuid {
  return resultTsessionPb.uuid;
}
- (TSessionPbBuilder*) setUuid:(NSString*) value {
  resultTsessionPb.hasUuid = YES;
  resultTsessionPb.uuid = value;
  return self;
}
- (TSessionPbBuilder*) clearUuid {
  resultTsessionPb.hasUuid = NO;
  resultTsessionPb.uuid = @"";
  return self;
}
- (BOOL) hasSessionType {
  return resultTsessionPb.hasSessionType;
}
- (SInt32) sessionType {
  return resultTsessionPb.sessionType;
}
- (TSessionPbBuilder*) setSessionType:(SInt32) value {
  resultTsessionPb.hasSessionType = YES;
  resultTsessionPb.sessionType = value;
  return self;
}
- (TSessionPbBuilder*) clearSessionType {
  resultTsessionPb.hasSessionType = NO;
  resultTsessionPb.sessionType = 0;
  return self;
}
- (BOOL) hasYear {
  return resultTsessionPb.hasYear;
}
- (SInt64) year {
  return resultTsessionPb.year;
}
- (TSessionPbBuilder*) setYear:(SInt64) value {
  resultTsessionPb.hasYear = YES;
  resultTsessionPb.year = value;
  return self;
}
- (TSessionPbBuilder*) clearYear {
  resultTsessionPb.hasYear = NO;
  resultTsessionPb.year = 0L;
  return self;
}
- (BOOL) hasSemester {
  return resultTsessionPb.hasSemester;
}
- (SInt64) semester {
  return resultTsessionPb.semester;
}
- (TSessionPbBuilder*) setSemester:(SInt64) value {
  resultTsessionPb.hasSemester = YES;
  resultTsessionPb.semester = value;
  return self;
}
- (TSessionPbBuilder*) clearSemester {
  resultTsessionPb.hasSemester = NO;
  resultTsessionPb.semester = 0L;
  return self;
}
- (BOOL) hasGradeId {
  return resultTsessionPb.hasGradeId;
}
- (SInt64) gradeId {
  return resultTsessionPb.gradeId;
}
- (TSessionPbBuilder*) setGradeId:(SInt64) value {
  resultTsessionPb.hasGradeId = YES;
  resultTsessionPb.gradeId = value;
  return self;
}
- (TSessionPbBuilder*) clearGradeId {
  resultTsessionPb.hasGradeId = NO;
  resultTsessionPb.gradeId = 0L;
  return self;
}
- (BOOL) hasSubjectId {
  return resultTsessionPb.hasSubjectId;
}
- (SInt64) subjectId {
  return resultTsessionPb.subjectId;
}
- (TSessionPbBuilder*) setSubjectId:(SInt64) value {
  resultTsessionPb.hasSubjectId = YES;
  resultTsessionPb.subjectId = value;
  return self;
}
- (TSessionPbBuilder*) clearSubjectId {
  resultTsessionPb.hasSubjectId = NO;
  resultTsessionPb.subjectId = 0L;
  return self;
}
- (BOOL) hasName {
  return resultTsessionPb.hasName;
}
- (NSString*) name {
  return resultTsessionPb.name;
}
- (TSessionPbBuilder*) setName:(NSString*) value {
  resultTsessionPb.hasName = YES;
  resultTsessionPb.name = value;
  return self;
}
- (TSessionPbBuilder*) clearName {
  resultTsessionPb.hasName = NO;
  resultTsessionPb.name = @"";
  return self;
}
- (BOOL) hasDataStatus {
  return resultTsessionPb.hasDataStatus;
}
- (SInt32) dataStatus {
  return resultTsessionPb.dataStatus;
}
- (TSessionPbBuilder*) setDataStatus:(SInt32) value {
  resultTsessionPb.hasDataStatus = YES;
  resultTsessionPb.dataStatus = value;
  return self;
}
- (TSessionPbBuilder*) clearDataStatus {
  resultTsessionPb.hasDataStatus = NO;
  resultTsessionPb.dataStatus = 0;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultTsessionPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultTsessionPb.createdDate;
}
- (TSessionPbBuilder*) setCreatedDate:(SInt64) value {
  resultTsessionPb.hasCreatedDate = YES;
  resultTsessionPb.createdDate = value;
  return self;
}
- (TSessionPbBuilder*) clearCreatedDate {
  resultTsessionPb.hasCreatedDate = NO;
  resultTsessionPb.createdDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultTsessionPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultTsessionPb.timestamp;
}
- (TSessionPbBuilder*) setTimestamp:(SInt64) value {
  resultTsessionPb.hasTimestamp = YES;
  resultTsessionPb.timestamp = value;
  return self;
}
- (TSessionPbBuilder*) clearTimestamp {
  resultTsessionPb.hasTimestamp = NO;
  resultTsessionPb.timestamp = 0L;
  return self;
}
- (NSMutableArray *)user {
  return resultTsessionPb.userArray;
}
- (TUserPb*)userAtIndex:(NSUInteger)index {
  return [resultTsessionPb userAtIndex:index];
}
- (TSessionPbBuilder *)addUser:(TUserPb*)value {
  if (resultTsessionPb.userArray == nil) {
    resultTsessionPb.userArray = [[NSMutableArray alloc]init];
  }
  [resultTsessionPb.userArray addObject:value];
  return self;
}
- (TSessionPbBuilder *)setUserArray:(NSArray *)array {
  resultTsessionPb.userArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TSessionPbBuilder *)clearUser {
  resultTsessionPb.userArray = nil;
  return self;
}
- (BOOL) hasFscSession {
  return resultTsessionPb.hasFscSession;
}
- (FscSessionPb*) fscSession {
  return resultTsessionPb.fscSession;
}
- (TSessionPbBuilder*) setFscSession:(FscSessionPb*) value {
  resultTsessionPb.hasFscSession = YES;
  resultTsessionPb.fscSession = value;
  return self;
}
- (TSessionPbBuilder*) setFscSessionBuilder:(FscSessionPbBuilder*) builderForValue {
  return [self setFscSession:[builderForValue build]];
}
- (TSessionPbBuilder*) mergeFscSession:(FscSessionPb*) value {
  if (resultTsessionPb.hasFscSession &&
      resultTsessionPb.fscSession != [FscSessionPb defaultInstance]) {
    resultTsessionPb.fscSession =
      [[[FscSessionPb builderWithPrototype:resultTsessionPb.fscSession] mergeFrom:value] buildPartial];
  } else {
    resultTsessionPb.fscSession = value;
  }
  resultTsessionPb.hasFscSession = YES;
  return self;
}
- (TSessionPbBuilder*) clearFscSession {
  resultTsessionPb.hasFscSession = NO;
  resultTsessionPb.fscSession = [FscSessionPb defaultInstance];
  return self;
}
@end

@interface TUserPb ()
@property SInt64 sessionId;
@property SInt64 userId;
@property SInt32 status;
@property (strong) NSString* name;
@property (strong) NSString* portrait;
@property SInt64 createdDate;
@property SInt64 modifiedDate;
@property SInt64 timestamp;
@property SInt32 userType;
@property SInt32 gender;
@property (strong) NSString* schoolName;
@end

@implementation TUserPb

- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasPortrait {
  return !!hasPortrait_;
}
- (void) setHasPortrait:(BOOL) _value_ {
  hasPortrait_ = !!_value_;
}
@synthesize portrait;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasUserType {
  return !!hasUserType_;
}
- (void) setHasUserType:(BOOL) _value_ {
  hasUserType_ = !!_value_;
}
@synthesize userType;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
@synthesize gender;
- (BOOL) hasSchoolName {
  return !!hasSchoolName_;
}
- (void) setHasSchoolName:(BOOL) _value_ {
  hasSchoolName_ = !!_value_;
}
@synthesize schoolName;
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionId = 0L;
    self.userId = 0L;
    self.status = 0;
    self.name = @"";
    self.portrait = @"";
    self.createdDate = 0L;
    self.modifiedDate = 0L;
    self.timestamp = 0L;
    self.userType = 0;
    self.gender = 0;
    self.schoolName = @"";
  }
  return self;
}
static TUserPb* defaultTUserPbInstance = nil;
+ (void) initialize {
  if (self == [TUserPb class]) {
    defaultTUserPbInstance = [[TUserPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTUserPbInstance;
}
- (instancetype) defaultInstance {
  return defaultTUserPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionId) {
    [output writeInt64:1 value:self.sessionId];
  }
  if (self.hasUserId) {
    [output writeInt64:2 value:self.userId];
  }
  if (self.hasStatus) {
    [output writeInt32:3 value:self.status];
  }
  if (self.hasName) {
    [output writeString:4 value:self.name];
  }
  if (self.hasPortrait) {
    [output writeString:5 value:self.portrait];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:6 value:self.createdDate];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:7 value:self.modifiedDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:8 value:self.timestamp];
  }
  if (self.hasUserType) {
    [output writeInt32:9 value:self.userType];
  }
  if (self.hasGender) {
    [output writeInt32:10 value:self.gender];
  }
  if (self.hasSchoolName) {
    [output writeString:11 value:self.schoolName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionId) {
    size_ += computeInt64Size(1, self.sessionId);
  }
  if (self.hasUserId) {
    size_ += computeInt64Size(2, self.userId);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(3, self.status);
  }
  if (self.hasName) {
    size_ += computeStringSize(4, self.name);
  }
  if (self.hasPortrait) {
    size_ += computeStringSize(5, self.portrait);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(6, self.createdDate);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(7, self.modifiedDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(8, self.timestamp);
  }
  if (self.hasUserType) {
    size_ += computeInt32Size(9, self.userType);
  }
  if (self.hasGender) {
    size_ += computeInt32Size(10, self.gender);
  }
  if (self.hasSchoolName) {
    size_ += computeStringSize(11, self.schoolName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TUserPb*) parseFromData:(NSData*) data {
  return (TUserPb*)[[[TUserPb builder] mergeFromData:data] build];
}
+ (TUserPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TUserPb*)[[[TUserPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TUserPb*) parseFromInputStream:(NSInputStream*) input {
  return (TUserPb*)[[[TUserPb builder] mergeFromInputStream:input] build];
}
+ (TUserPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TUserPb*)[[[TUserPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TUserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TUserPb*)[[[TUserPb builder] mergeFromCodedInputStream:input] build];
}
+ (TUserPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TUserPb*)[[[TUserPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TUserPbBuilder*) builder {
  return [[TUserPbBuilder alloc] init];
}
+ (TUserPbBuilder*) builderWithPrototype:(TUserPb*) prototype {
  return [[TUserPb builder] mergeFrom:prototype];
}
- (TUserPbBuilder*) builder {
  return [TUserPb builder];
}
- (TUserPbBuilder*) toBuilder {
  return [TUserPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasPortrait) {
    [output appendFormat:@"%@%@: %@\n", indent, @"portrait", self.portrait];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasUserType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userType", [NSNumber numberWithInteger:self.userType]];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithInteger:self.gender]];
  }
  if (self.hasSchoolName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolName", self.schoolName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasPortrait) {
    [dictionary setObject: self.portrait forKey: @"portrait"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasUserType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userType] forKey: @"userType"];
  }
  if (self.hasGender) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gender] forKey: @"gender"];
  }
  if (self.hasSchoolName) {
    [dictionary setObject: self.schoolName forKey: @"schoolName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TUserPb class]]) {
    return NO;
  }
  TUserPb *otherMessage = other;
  return
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasPortrait == otherMessage.hasPortrait &&
      (!self.hasPortrait || [self.portrait isEqual:otherMessage.portrait]) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasUserType == otherMessage.hasUserType &&
      (!self.hasUserType || self.userType == otherMessage.userType) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasSchoolName == otherMessage.hasSchoolName &&
      (!self.hasSchoolName || [self.schoolName isEqual:otherMessage.schoolName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasPortrait) {
    hashCode = hashCode * 31 + [self.portrait hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasUserType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userType] hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gender] hash];
  }
  if (self.hasSchoolName) {
    hashCode = hashCode * 31 + [self.schoolName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TUserPbBuilder()
@property (strong) TUserPb* resultTuserPb;
@end

@implementation TUserPbBuilder
@synthesize resultTuserPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTuserPb = [[TUserPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTuserPb;
}
- (TUserPbBuilder*) clear {
  self.resultTuserPb = [[TUserPb alloc] init];
  return self;
}
- (TUserPbBuilder*) clone {
  return [TUserPb builderWithPrototype:resultTuserPb];
}
- (TUserPb*) defaultInstance {
  return [TUserPb defaultInstance];
}
- (TUserPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TUserPb*) buildPartial {
  TUserPb* returnMe = resultTuserPb;
  self.resultTuserPb = nil;
  return returnMe;
}
- (TUserPbBuilder*) mergeFrom:(TUserPb*) other {
  if (other == [TUserPb defaultInstance]) {
    return self;
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasPortrait) {
    [self setPortrait:other.portrait];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasUserType) {
    [self setUserType:other.userType];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasSchoolName) {
    [self setSchoolName:other.schoolName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TUserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TUserPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 16: {
        [self setUserId:[input readInt64]];
        break;
      }
      case 24: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 34: {
        [self setName:[input readString]];
        break;
      }
      case 42: {
        [self setPortrait:[input readString]];
        break;
      }
      case 48: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 56: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 64: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 72: {
        [self setUserType:[input readInt32]];
        break;
      }
      case 80: {
        [self setGender:[input readInt32]];
        break;
      }
      case 90: {
        [self setSchoolName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionId {
  return resultTuserPb.hasSessionId;
}
- (SInt64) sessionId {
  return resultTuserPb.sessionId;
}
- (TUserPbBuilder*) setSessionId:(SInt64) value {
  resultTuserPb.hasSessionId = YES;
  resultTuserPb.sessionId = value;
  return self;
}
- (TUserPbBuilder*) clearSessionId {
  resultTuserPb.hasSessionId = NO;
  resultTuserPb.sessionId = 0L;
  return self;
}
- (BOOL) hasUserId {
  return resultTuserPb.hasUserId;
}
- (SInt64) userId {
  return resultTuserPb.userId;
}
- (TUserPbBuilder*) setUserId:(SInt64) value {
  resultTuserPb.hasUserId = YES;
  resultTuserPb.userId = value;
  return self;
}
- (TUserPbBuilder*) clearUserId {
  resultTuserPb.hasUserId = NO;
  resultTuserPb.userId = 0L;
  return self;
}
- (BOOL) hasStatus {
  return resultTuserPb.hasStatus;
}
- (SInt32) status {
  return resultTuserPb.status;
}
- (TUserPbBuilder*) setStatus:(SInt32) value {
  resultTuserPb.hasStatus = YES;
  resultTuserPb.status = value;
  return self;
}
- (TUserPbBuilder*) clearStatus {
  resultTuserPb.hasStatus = NO;
  resultTuserPb.status = 0;
  return self;
}
- (BOOL) hasName {
  return resultTuserPb.hasName;
}
- (NSString*) name {
  return resultTuserPb.name;
}
- (TUserPbBuilder*) setName:(NSString*) value {
  resultTuserPb.hasName = YES;
  resultTuserPb.name = value;
  return self;
}
- (TUserPbBuilder*) clearName {
  resultTuserPb.hasName = NO;
  resultTuserPb.name = @"";
  return self;
}
- (BOOL) hasPortrait {
  return resultTuserPb.hasPortrait;
}
- (NSString*) portrait {
  return resultTuserPb.portrait;
}
- (TUserPbBuilder*) setPortrait:(NSString*) value {
  resultTuserPb.hasPortrait = YES;
  resultTuserPb.portrait = value;
  return self;
}
- (TUserPbBuilder*) clearPortrait {
  resultTuserPb.hasPortrait = NO;
  resultTuserPb.portrait = @"";
  return self;
}
- (BOOL) hasCreatedDate {
  return resultTuserPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultTuserPb.createdDate;
}
- (TUserPbBuilder*) setCreatedDate:(SInt64) value {
  resultTuserPb.hasCreatedDate = YES;
  resultTuserPb.createdDate = value;
  return self;
}
- (TUserPbBuilder*) clearCreatedDate {
  resultTuserPb.hasCreatedDate = NO;
  resultTuserPb.createdDate = 0L;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultTuserPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultTuserPb.modifiedDate;
}
- (TUserPbBuilder*) setModifiedDate:(SInt64) value {
  resultTuserPb.hasModifiedDate = YES;
  resultTuserPb.modifiedDate = value;
  return self;
}
- (TUserPbBuilder*) clearModifiedDate {
  resultTuserPb.hasModifiedDate = NO;
  resultTuserPb.modifiedDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultTuserPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultTuserPb.timestamp;
}
- (TUserPbBuilder*) setTimestamp:(SInt64) value {
  resultTuserPb.hasTimestamp = YES;
  resultTuserPb.timestamp = value;
  return self;
}
- (TUserPbBuilder*) clearTimestamp {
  resultTuserPb.hasTimestamp = NO;
  resultTuserPb.timestamp = 0L;
  return self;
}
- (BOOL) hasUserType {
  return resultTuserPb.hasUserType;
}
- (SInt32) userType {
  return resultTuserPb.userType;
}
- (TUserPbBuilder*) setUserType:(SInt32) value {
  resultTuserPb.hasUserType = YES;
  resultTuserPb.userType = value;
  return self;
}
- (TUserPbBuilder*) clearUserType {
  resultTuserPb.hasUserType = NO;
  resultTuserPb.userType = 0;
  return self;
}
- (BOOL) hasGender {
  return resultTuserPb.hasGender;
}
- (SInt32) gender {
  return resultTuserPb.gender;
}
- (TUserPbBuilder*) setGender:(SInt32) value {
  resultTuserPb.hasGender = YES;
  resultTuserPb.gender = value;
  return self;
}
- (TUserPbBuilder*) clearGender {
  resultTuserPb.hasGender = NO;
  resultTuserPb.gender = 0;
  return self;
}
- (BOOL) hasSchoolName {
  return resultTuserPb.hasSchoolName;
}
- (NSString*) schoolName {
  return resultTuserPb.schoolName;
}
- (TUserPbBuilder*) setSchoolName:(NSString*) value {
  resultTuserPb.hasSchoolName = YES;
  resultTuserPb.schoolName = value;
  return self;
}
- (TUserPbBuilder*) clearSchoolName {
  resultTuserPb.hasSchoolName = NO;
  resultTuserPb.schoolName = @"";
  return self;
}
@end

@interface TRecorderPb ()
@property SInt64 id;
@property SInt64 sessionId;
@property SInt32 type;
@property (strong) NSString* message;
@property SInt32 voiceLength;
@property SInt64 createdBy;
@property SInt64 createdDate;
@property SInt64 timestamp;
@property (strong) NSData* file;
@property (strong) NSString* uuid;
@end

@implementation TRecorderPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (BOOL) hasVoiceLength {
  return !!hasVoiceLength_;
}
- (void) setHasVoiceLength:(BOOL) _value_ {
  hasVoiceLength_ = !!_value_;
}
@synthesize voiceLength;
- (BOOL) hasCreatedBy {
  return !!hasCreatedBy_;
}
- (void) setHasCreatedBy:(BOOL) _value_ {
  hasCreatedBy_ = !!_value_;
}
@synthesize createdBy;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasFile {
  return !!hasFile_;
}
- (void) setHasFile:(BOOL) _value_ {
  hasFile_ = !!_value_;
}
@synthesize file;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.sessionId = 0L;
    self.type = 0;
    self.message = @"";
    self.voiceLength = 0;
    self.createdBy = 0L;
    self.createdDate = 0L;
    self.timestamp = 0L;
    self.file = [NSData data];
    self.uuid = @"";
  }
  return self;
}
static TRecorderPb* defaultTRecorderPbInstance = nil;
+ (void) initialize {
  if (self == [TRecorderPb class]) {
    defaultTRecorderPbInstance = [[TRecorderPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTRecorderPbInstance;
}
- (instancetype) defaultInstance {
  return defaultTRecorderPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasSessionId) {
    [output writeInt64:2 value:self.sessionId];
  }
  if (self.hasType) {
    [output writeInt32:3 value:self.type];
  }
  if (self.hasMessage) {
    [output writeString:4 value:self.message];
  }
  if (self.hasVoiceLength) {
    [output writeInt32:5 value:self.voiceLength];
  }
  if (self.hasCreatedBy) {
    [output writeInt64:6 value:self.createdBy];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:7 value:self.createdDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:8 value:self.timestamp];
  }
  if (self.hasFile) {
    [output writeData:9 value:self.file];
  }
  if (self.hasUuid) {
    [output writeString:10 value:self.uuid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasSessionId) {
    size_ += computeInt64Size(2, self.sessionId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(3, self.type);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(4, self.message);
  }
  if (self.hasVoiceLength) {
    size_ += computeInt32Size(5, self.voiceLength);
  }
  if (self.hasCreatedBy) {
    size_ += computeInt64Size(6, self.createdBy);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(7, self.createdDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(8, self.timestamp);
  }
  if (self.hasFile) {
    size_ += computeDataSize(9, self.file);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(10, self.uuid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TRecorderPb*) parseFromData:(NSData*) data {
  return (TRecorderPb*)[[[TRecorderPb builder] mergeFromData:data] build];
}
+ (TRecorderPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TRecorderPb*)[[[TRecorderPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TRecorderPb*) parseFromInputStream:(NSInputStream*) input {
  return (TRecorderPb*)[[[TRecorderPb builder] mergeFromInputStream:input] build];
}
+ (TRecorderPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TRecorderPb*)[[[TRecorderPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TRecorderPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TRecorderPb*)[[[TRecorderPb builder] mergeFromCodedInputStream:input] build];
}
+ (TRecorderPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TRecorderPb*)[[[TRecorderPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TRecorderPbBuilder*) builder {
  return [[TRecorderPbBuilder alloc] init];
}
+ (TRecorderPbBuilder*) builderWithPrototype:(TRecorderPb*) prototype {
  return [[TRecorderPb builder] mergeFrom:prototype];
}
- (TRecorderPbBuilder*) builder {
  return [TRecorderPb builder];
}
- (TRecorderPbBuilder*) toBuilder {
  return [TRecorderPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasVoiceLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voiceLength", [NSNumber numberWithInteger:self.voiceLength]];
  }
  if (self.hasCreatedBy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdBy", [NSNumber numberWithLongLong:self.createdBy]];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"file", self.file];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasVoiceLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.voiceLength] forKey: @"voiceLength"];
  }
  if (self.hasCreatedBy) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdBy] forKey: @"createdBy"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasFile) {
    [dictionary setObject: self.file forKey: @"file"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TRecorderPb class]]) {
    return NO;
  }
  TRecorderPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasVoiceLength == otherMessage.hasVoiceLength &&
      (!self.hasVoiceLength || self.voiceLength == otherMessage.voiceLength) &&
      self.hasCreatedBy == otherMessage.hasCreatedBy &&
      (!self.hasCreatedBy || self.createdBy == otherMessage.createdBy) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasFile == otherMessage.hasFile &&
      (!self.hasFile || [self.file isEqual:otherMessage.file]) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasVoiceLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.voiceLength] hash];
  }
  if (self.hasCreatedBy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdBy] hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasFile) {
    hashCode = hashCode * 31 + [self.file hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TRecorderPbBuilder()
@property (strong) TRecorderPb* resultTrecorderPb;
@end

@implementation TRecorderPbBuilder
@synthesize resultTrecorderPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTrecorderPb = [[TRecorderPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTrecorderPb;
}
- (TRecorderPbBuilder*) clear {
  self.resultTrecorderPb = [[TRecorderPb alloc] init];
  return self;
}
- (TRecorderPbBuilder*) clone {
  return [TRecorderPb builderWithPrototype:resultTrecorderPb];
}
- (TRecorderPb*) defaultInstance {
  return [TRecorderPb defaultInstance];
}
- (TRecorderPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TRecorderPb*) buildPartial {
  TRecorderPb* returnMe = resultTrecorderPb;
  self.resultTrecorderPb = nil;
  return returnMe;
}
- (TRecorderPbBuilder*) mergeFrom:(TRecorderPb*) other {
  if (other == [TRecorderPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasVoiceLength) {
    [self setVoiceLength:other.voiceLength];
  }
  if (other.hasCreatedBy) {
    [self setCreatedBy:other.createdBy];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasFile) {
    [self setFile:other.file];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TRecorderPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TRecorderPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 24: {
        [self setType:[input readInt32]];
        break;
      }
      case 34: {
        [self setMessage:[input readString]];
        break;
      }
      case 40: {
        [self setVoiceLength:[input readInt32]];
        break;
      }
      case 48: {
        [self setCreatedBy:[input readInt64]];
        break;
      }
      case 56: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 64: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 74: {
        [self setFile:[input readData]];
        break;
      }
      case 82: {
        [self setUuid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultTrecorderPb.hasId;
}
- (SInt64) id {
  return resultTrecorderPb.id;
}
- (TRecorderPbBuilder*) setId:(SInt64) value {
  resultTrecorderPb.hasId = YES;
  resultTrecorderPb.id = value;
  return self;
}
- (TRecorderPbBuilder*) clearId {
  resultTrecorderPb.hasId = NO;
  resultTrecorderPb.id = 0L;
  return self;
}
- (BOOL) hasSessionId {
  return resultTrecorderPb.hasSessionId;
}
- (SInt64) sessionId {
  return resultTrecorderPb.sessionId;
}
- (TRecorderPbBuilder*) setSessionId:(SInt64) value {
  resultTrecorderPb.hasSessionId = YES;
  resultTrecorderPb.sessionId = value;
  return self;
}
- (TRecorderPbBuilder*) clearSessionId {
  resultTrecorderPb.hasSessionId = NO;
  resultTrecorderPb.sessionId = 0L;
  return self;
}
- (BOOL) hasType {
  return resultTrecorderPb.hasType;
}
- (SInt32) type {
  return resultTrecorderPb.type;
}
- (TRecorderPbBuilder*) setType:(SInt32) value {
  resultTrecorderPb.hasType = YES;
  resultTrecorderPb.type = value;
  return self;
}
- (TRecorderPbBuilder*) clearType {
  resultTrecorderPb.hasType = NO;
  resultTrecorderPb.type = 0;
  return self;
}
- (BOOL) hasMessage {
  return resultTrecorderPb.hasMessage;
}
- (NSString*) message {
  return resultTrecorderPb.message;
}
- (TRecorderPbBuilder*) setMessage:(NSString*) value {
  resultTrecorderPb.hasMessage = YES;
  resultTrecorderPb.message = value;
  return self;
}
- (TRecorderPbBuilder*) clearMessage {
  resultTrecorderPb.hasMessage = NO;
  resultTrecorderPb.message = @"";
  return self;
}
- (BOOL) hasVoiceLength {
  return resultTrecorderPb.hasVoiceLength;
}
- (SInt32) voiceLength {
  return resultTrecorderPb.voiceLength;
}
- (TRecorderPbBuilder*) setVoiceLength:(SInt32) value {
  resultTrecorderPb.hasVoiceLength = YES;
  resultTrecorderPb.voiceLength = value;
  return self;
}
- (TRecorderPbBuilder*) clearVoiceLength {
  resultTrecorderPb.hasVoiceLength = NO;
  resultTrecorderPb.voiceLength = 0;
  return self;
}
- (BOOL) hasCreatedBy {
  return resultTrecorderPb.hasCreatedBy;
}
- (SInt64) createdBy {
  return resultTrecorderPb.createdBy;
}
- (TRecorderPbBuilder*) setCreatedBy:(SInt64) value {
  resultTrecorderPb.hasCreatedBy = YES;
  resultTrecorderPb.createdBy = value;
  return self;
}
- (TRecorderPbBuilder*) clearCreatedBy {
  resultTrecorderPb.hasCreatedBy = NO;
  resultTrecorderPb.createdBy = 0L;
  return self;
}
- (BOOL) hasCreatedDate {
  return resultTrecorderPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultTrecorderPb.createdDate;
}
- (TRecorderPbBuilder*) setCreatedDate:(SInt64) value {
  resultTrecorderPb.hasCreatedDate = YES;
  resultTrecorderPb.createdDate = value;
  return self;
}
- (TRecorderPbBuilder*) clearCreatedDate {
  resultTrecorderPb.hasCreatedDate = NO;
  resultTrecorderPb.createdDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultTrecorderPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultTrecorderPb.timestamp;
}
- (TRecorderPbBuilder*) setTimestamp:(SInt64) value {
  resultTrecorderPb.hasTimestamp = YES;
  resultTrecorderPb.timestamp = value;
  return self;
}
- (TRecorderPbBuilder*) clearTimestamp {
  resultTrecorderPb.hasTimestamp = NO;
  resultTrecorderPb.timestamp = 0L;
  return self;
}
- (BOOL) hasFile {
  return resultTrecorderPb.hasFile;
}
- (NSData*) file {
  return resultTrecorderPb.file;
}
- (TRecorderPbBuilder*) setFile:(NSData*) value {
  resultTrecorderPb.hasFile = YES;
  resultTrecorderPb.file = value;
  return self;
}
- (TRecorderPbBuilder*) clearFile {
  resultTrecorderPb.hasFile = NO;
  resultTrecorderPb.file = [NSData data];
  return self;
}
- (BOOL) hasUuid {
  return resultTrecorderPb.hasUuid;
}
- (NSString*) uuid {
  return resultTrecorderPb.uuid;
}
- (TRecorderPbBuilder*) setUuid:(NSString*) value {
  resultTrecorderPb.hasUuid = YES;
  resultTrecorderPb.uuid = value;
  return self;
}
- (TRecorderPbBuilder*) clearUuid {
  resultTrecorderPb.hasUuid = NO;
  resultTrecorderPb.uuid = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
