// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscTeachNode.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscTeachNodeRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscTeachNodeRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TeachNodeListPb ()
@property (strong) NSMutableArray * teachNodeArray;
@property (strong) NSMutableArray * teachNodeDetailsArray;
@property (strong) NSMutableArray * teachNodeContentArray;
@end

@implementation TeachNodeListPb

@synthesize teachNodeArray;
@dynamic teachNode;
@synthesize teachNodeDetailsArray;
@dynamic teachNodeDetails;
@synthesize teachNodeContentArray;
@dynamic teachNodeContent;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TeachNodeListPb* defaultTeachNodeListPbInstance = nil;
+ (void) initialize {
  if (self == [TeachNodeListPb class]) {
    defaultTeachNodeListPbInstance = [[TeachNodeListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTeachNodeListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultTeachNodeListPbInstance;
}
- (NSArray *)teachNode {
  return teachNodeArray;
}
- (TeachNodePb*)teachNodeAtIndex:(NSUInteger)index {
  return [teachNodeArray objectAtIndex:index];
}
- (NSArray *)teachNodeDetails {
  return teachNodeDetailsArray;
}
- (TeachNodeDetailsPb*)teachNodeDetailsAtIndex:(NSUInteger)index {
  return [teachNodeDetailsArray objectAtIndex:index];
}
- (NSArray *)teachNodeContent {
  return teachNodeContentArray;
}
- (TeachNodeContentPb*)teachNodeContentAtIndex:(NSUInteger)index {
  return [teachNodeContentArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.teachNodeArray enumerateObjectsUsingBlock:^(TeachNodePb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.teachNodeDetailsArray enumerateObjectsUsingBlock:^(TeachNodeDetailsPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.teachNodeContentArray enumerateObjectsUsingBlock:^(TeachNodeContentPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.teachNodeArray enumerateObjectsUsingBlock:^(TeachNodePb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  [self.teachNodeDetailsArray enumerateObjectsUsingBlock:^(TeachNodeDetailsPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.teachNodeContentArray enumerateObjectsUsingBlock:^(TeachNodeContentPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TeachNodeListPb*) parseFromData:(NSData*) data {
  return (TeachNodeListPb*)[[[TeachNodeListPb builder] mergeFromData:data] build];
}
+ (TeachNodeListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodeListPb*)[[[TeachNodeListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TeachNodeListPb*) parseFromInputStream:(NSInputStream*) input {
  return (TeachNodeListPb*)[[[TeachNodeListPb builder] mergeFromInputStream:input] build];
}
+ (TeachNodeListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodeListPb*)[[[TeachNodeListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachNodeListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TeachNodeListPb*)[[[TeachNodeListPb builder] mergeFromCodedInputStream:input] build];
}
+ (TeachNodeListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodeListPb*)[[[TeachNodeListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachNodeListPbBuilder*) builder {
  return [[TeachNodeListPbBuilder alloc] init];
}
+ (TeachNodeListPbBuilder*) builderWithPrototype:(TeachNodeListPb*) prototype {
  return [[TeachNodeListPb builder] mergeFrom:prototype];
}
- (TeachNodeListPbBuilder*) builder {
  return [TeachNodeListPb builder];
}
- (TeachNodeListPbBuilder*) toBuilder {
  return [TeachNodeListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.teachNodeArray enumerateObjectsUsingBlock:^(TeachNodePb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"teachNode"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.teachNodeDetailsArray enumerateObjectsUsingBlock:^(TeachNodeDetailsPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"teachNodeDetails"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.teachNodeContentArray enumerateObjectsUsingBlock:^(TeachNodeContentPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"teachNodeContent"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (TeachNodePb* element in self.teachNodeArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"teachNode"];
  }
  for (TeachNodeDetailsPb* element in self.teachNodeDetailsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"teachNodeDetails"];
  }
  for (TeachNodeContentPb* element in self.teachNodeContentArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"teachNodeContent"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TeachNodeListPb class]]) {
    return NO;
  }
  TeachNodeListPb *otherMessage = other;
  return
      [self.teachNodeArray isEqualToArray:otherMessage.teachNodeArray] &&
      [self.teachNodeDetailsArray isEqualToArray:otherMessage.teachNodeDetailsArray] &&
      [self.teachNodeContentArray isEqualToArray:otherMessage.teachNodeContentArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.teachNodeArray enumerateObjectsUsingBlock:^(TeachNodePb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.teachNodeDetailsArray enumerateObjectsUsingBlock:^(TeachNodeDetailsPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.teachNodeContentArray enumerateObjectsUsingBlock:^(TeachNodeContentPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TeachNodeListPbBuilder()
@property (strong) TeachNodeListPb* resultTeachNodeListPb;
@end

@implementation TeachNodeListPbBuilder
@synthesize resultTeachNodeListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTeachNodeListPb = [[TeachNodeListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTeachNodeListPb;
}
- (TeachNodeListPbBuilder*) clear {
  self.resultTeachNodeListPb = [[TeachNodeListPb alloc] init];
  return self;
}
- (TeachNodeListPbBuilder*) clone {
  return [TeachNodeListPb builderWithPrototype:resultTeachNodeListPb];
}
- (TeachNodeListPb*) defaultInstance {
  return [TeachNodeListPb defaultInstance];
}
- (TeachNodeListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TeachNodeListPb*) buildPartial {
  TeachNodeListPb* returnMe = resultTeachNodeListPb;
  self.resultTeachNodeListPb = nil;
  return returnMe;
}
- (TeachNodeListPbBuilder*) mergeFrom:(TeachNodeListPb*) other {
  if (other == [TeachNodeListPb defaultInstance]) {
    return self;
  }
  if (other.teachNodeArray.count > 0) {
    if (resultTeachNodeListPb.teachNodeArray == nil) {
      resultTeachNodeListPb.teachNodeArray = [[NSMutableArray alloc] initWithArray:other.teachNodeArray];
    } else {
      [resultTeachNodeListPb.teachNodeArray addObjectsFromArray:other.teachNodeArray];
    }
  }
  if (other.teachNodeDetailsArray.count > 0) {
    if (resultTeachNodeListPb.teachNodeDetailsArray == nil) {
      resultTeachNodeListPb.teachNodeDetailsArray = [[NSMutableArray alloc] initWithArray:other.teachNodeDetailsArray];
    } else {
      [resultTeachNodeListPb.teachNodeDetailsArray addObjectsFromArray:other.teachNodeDetailsArray];
    }
  }
  if (other.teachNodeContentArray.count > 0) {
    if (resultTeachNodeListPb.teachNodeContentArray == nil) {
      resultTeachNodeListPb.teachNodeContentArray = [[NSMutableArray alloc] initWithArray:other.teachNodeContentArray];
    } else {
      [resultTeachNodeListPb.teachNodeContentArray addObjectsFromArray:other.teachNodeContentArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TeachNodeListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TeachNodeListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TeachNodePbBuilder* subBuilder = [TeachNodePb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeachNode:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TeachNodeDetailsPbBuilder* subBuilder = [TeachNodeDetailsPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeachNodeDetails:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TeachNodeContentPbBuilder* subBuilder = [TeachNodeContentPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeachNodeContent:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)teachNode {
  return resultTeachNodeListPb.teachNodeArray;
}
- (TeachNodePb*)teachNodeAtIndex:(NSUInteger)index {
  return [resultTeachNodeListPb teachNodeAtIndex:index];
}
- (TeachNodeListPbBuilder *)addTeachNode:(TeachNodePb*)value {
  if (resultTeachNodeListPb.teachNodeArray == nil) {
    resultTeachNodeListPb.teachNodeArray = [[NSMutableArray alloc]init];
  }
  [resultTeachNodeListPb.teachNodeArray addObject:value];
  return self;
}
- (TeachNodeListPbBuilder *)setTeachNodeArray:(NSArray *)array {
  resultTeachNodeListPb.teachNodeArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TeachNodeListPbBuilder *)clearTeachNode {
  resultTeachNodeListPb.teachNodeArray = nil;
  return self;
}
- (NSMutableArray *)teachNodeDetails {
  return resultTeachNodeListPb.teachNodeDetailsArray;
}
- (TeachNodeDetailsPb*)teachNodeDetailsAtIndex:(NSUInteger)index {
  return [resultTeachNodeListPb teachNodeDetailsAtIndex:index];
}
- (TeachNodeListPbBuilder *)addTeachNodeDetails:(TeachNodeDetailsPb*)value {
  if (resultTeachNodeListPb.teachNodeDetailsArray == nil) {
    resultTeachNodeListPb.teachNodeDetailsArray = [[NSMutableArray alloc]init];
  }
  [resultTeachNodeListPb.teachNodeDetailsArray addObject:value];
  return self;
}
- (TeachNodeListPbBuilder *)setTeachNodeDetailsArray:(NSArray *)array {
  resultTeachNodeListPb.teachNodeDetailsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TeachNodeListPbBuilder *)clearTeachNodeDetails {
  resultTeachNodeListPb.teachNodeDetailsArray = nil;
  return self;
}
- (NSMutableArray *)teachNodeContent {
  return resultTeachNodeListPb.teachNodeContentArray;
}
- (TeachNodeContentPb*)teachNodeContentAtIndex:(NSUInteger)index {
  return [resultTeachNodeListPb teachNodeContentAtIndex:index];
}
- (TeachNodeListPbBuilder *)addTeachNodeContent:(TeachNodeContentPb*)value {
  if (resultTeachNodeListPb.teachNodeContentArray == nil) {
    resultTeachNodeListPb.teachNodeContentArray = [[NSMutableArray alloc]init];
  }
  [resultTeachNodeListPb.teachNodeContentArray addObject:value];
  return self;
}
- (TeachNodeListPbBuilder *)setTeachNodeContentArray:(NSArray *)array {
  resultTeachNodeListPb.teachNodeContentArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TeachNodeListPbBuilder *)clearTeachNodeContent {
  resultTeachNodeListPb.teachNodeContentArray = nil;
  return self;
}
@end

@interface TeachNodePb ()
@property SInt64 id;
@property SInt64 schoolId;
@property SInt64 subjectId;
@property (strong) NSString* name;
@property SInt32 step;
@property SInt32 type;
@property SInt64 resId;
@property SInt64 nodeTime;
@property SInt64 modifiedDate;
@property SInt64 studentId;
@property (strong) NSString* teacherName;
@property (strong) NSString* nodeStatus;
@property SInt32 score;
@property SInt32 dataStatus;
@property (strong) NSString* imgText;
@property (strong) NSString* classIds;
@property SInt64 correctCount;
@property SInt64 submitCount;
@property SInt64 total;
@property SInt32 isRead;
@property SInt32 isFinish;
@property (strong) NSString* picture;
@property (strong) NSString* voice;
@property (strong) NSData* file;
@end

@implementation TeachNodePb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasSchoolId {
  return !!hasSchoolId_;
}
- (void) setHasSchoolId:(BOOL) _value_ {
  hasSchoolId_ = !!_value_;
}
@synthesize schoolId;
- (BOOL) hasSubjectId {
  return !!hasSubjectId_;
}
- (void) setHasSubjectId:(BOOL) _value_ {
  hasSubjectId_ = !!_value_;
}
@synthesize subjectId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasStep {
  return !!hasStep_;
}
- (void) setHasStep:(BOOL) _value_ {
  hasStep_ = !!_value_;
}
@synthesize step;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasResId {
  return !!hasResId_;
}
- (void) setHasResId:(BOOL) _value_ {
  hasResId_ = !!_value_;
}
@synthesize resId;
- (BOOL) hasNodeTime {
  return !!hasNodeTime_;
}
- (void) setHasNodeTime:(BOOL) _value_ {
  hasNodeTime_ = !!_value_;
}
@synthesize nodeTime;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (BOOL) hasStudentId {
  return !!hasStudentId_;
}
- (void) setHasStudentId:(BOOL) _value_ {
  hasStudentId_ = !!_value_;
}
@synthesize studentId;
- (BOOL) hasTeacherName {
  return !!hasTeacherName_;
}
- (void) setHasTeacherName:(BOOL) _value_ {
  hasTeacherName_ = !!_value_;
}
@synthesize teacherName;
- (BOOL) hasNodeStatus {
  return !!hasNodeStatus_;
}
- (void) setHasNodeStatus:(BOOL) _value_ {
  hasNodeStatus_ = !!_value_;
}
@synthesize nodeStatus;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) _value_ {
  hasScore_ = !!_value_;
}
@synthesize score;
- (BOOL) hasDataStatus {
  return !!hasDataStatus_;
}
- (void) setHasDataStatus:(BOOL) _value_ {
  hasDataStatus_ = !!_value_;
}
@synthesize dataStatus;
- (BOOL) hasImgText {
  return !!hasImgText_;
}
- (void) setHasImgText:(BOOL) _value_ {
  hasImgText_ = !!_value_;
}
@synthesize imgText;
- (BOOL) hasClassIds {
  return !!hasClassIds_;
}
- (void) setHasClassIds:(BOOL) _value_ {
  hasClassIds_ = !!_value_;
}
@synthesize classIds;
- (BOOL) hasCorrectCount {
  return !!hasCorrectCount_;
}
- (void) setHasCorrectCount:(BOOL) _value_ {
  hasCorrectCount_ = !!_value_;
}
@synthesize correctCount;
- (BOOL) hasSubmitCount {
  return !!hasSubmitCount_;
}
- (void) setHasSubmitCount:(BOOL) _value_ {
  hasSubmitCount_ = !!_value_;
}
@synthesize submitCount;
- (BOOL) hasTotal {
  return !!hasTotal_;
}
- (void) setHasTotal:(BOOL) _value_ {
  hasTotal_ = !!_value_;
}
@synthesize total;
- (BOOL) hasIsRead {
  return !!hasIsRead_;
}
- (void) setHasIsRead:(BOOL) _value_ {
  hasIsRead_ = !!_value_;
}
@synthesize isRead;
- (BOOL) hasIsFinish {
  return !!hasIsFinish_;
}
- (void) setHasIsFinish:(BOOL) _value_ {
  hasIsFinish_ = !!_value_;
}
@synthesize isFinish;
- (BOOL) hasPicture {
  return !!hasPicture_;
}
- (void) setHasPicture:(BOOL) _value_ {
  hasPicture_ = !!_value_;
}
@synthesize picture;
- (BOOL) hasVoice {
  return !!hasVoice_;
}
- (void) setHasVoice:(BOOL) _value_ {
  hasVoice_ = !!_value_;
}
@synthesize voice;
- (BOOL) hasFile {
  return !!hasFile_;
}
- (void) setHasFile:(BOOL) _value_ {
  hasFile_ = !!_value_;
}
@synthesize file;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.schoolId = 0L;
    self.subjectId = 0L;
    self.name = @"";
    self.step = 0;
    self.type = 0;
    self.resId = 0L;
    self.nodeTime = 0L;
    self.modifiedDate = 0L;
    self.studentId = 0L;
    self.teacherName = @"";
    self.nodeStatus = @"";
    self.score = 0;
    self.dataStatus = 0;
    self.imgText = @"";
    self.classIds = @"";
    self.correctCount = 0L;
    self.submitCount = 0L;
    self.total = 0L;
    self.isRead = 0;
    self.isFinish = 0;
    self.picture = @"";
    self.voice = @"";
    self.file = [NSData data];
  }
  return self;
}
static TeachNodePb* defaultTeachNodePbInstance = nil;
+ (void) initialize {
  if (self == [TeachNodePb class]) {
    defaultTeachNodePbInstance = [[TeachNodePb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTeachNodePbInstance;
}
- (instancetype) defaultInstance {
  return defaultTeachNodePbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasSchoolId) {
    [output writeInt64:2 value:self.schoolId];
  }
  if (self.hasSubjectId) {
    [output writeInt64:3 value:self.subjectId];
  }
  if (self.hasName) {
    [output writeString:4 value:self.name];
  }
  if (self.hasStep) {
    [output writeInt32:5 value:self.step];
  }
  if (self.hasType) {
    [output writeInt32:6 value:self.type];
  }
  if (self.hasResId) {
    [output writeInt64:7 value:self.resId];
  }
  if (self.hasNodeTime) {
    [output writeInt64:8 value:self.nodeTime];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:9 value:self.modifiedDate];
  }
  if (self.hasStudentId) {
    [output writeInt64:10 value:self.studentId];
  }
  if (self.hasTeacherName) {
    [output writeString:11 value:self.teacherName];
  }
  if (self.hasNodeStatus) {
    [output writeString:12 value:self.nodeStatus];
  }
  if (self.hasScore) {
    [output writeInt32:13 value:self.score];
  }
  if (self.hasDataStatus) {
    [output writeInt32:14 value:self.dataStatus];
  }
  if (self.hasImgText) {
    [output writeString:15 value:self.imgText];
  }
  if (self.hasClassIds) {
    [output writeString:16 value:self.classIds];
  }
  if (self.hasCorrectCount) {
    [output writeInt64:17 value:self.correctCount];
  }
  if (self.hasSubmitCount) {
    [output writeInt64:18 value:self.submitCount];
  }
  if (self.hasTotal) {
    [output writeInt64:19 value:self.total];
  }
  if (self.hasIsRead) {
    [output writeInt32:20 value:self.isRead];
  }
  if (self.hasIsFinish) {
    [output writeInt32:21 value:self.isFinish];
  }
  if (self.hasPicture) {
    [output writeString:22 value:self.picture];
  }
  if (self.hasVoice) {
    [output writeString:23 value:self.voice];
  }
  if (self.hasFile) {
    [output writeData:24 value:self.file];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasSchoolId) {
    size_ += computeInt64Size(2, self.schoolId);
  }
  if (self.hasSubjectId) {
    size_ += computeInt64Size(3, self.subjectId);
  }
  if (self.hasName) {
    size_ += computeStringSize(4, self.name);
  }
  if (self.hasStep) {
    size_ += computeInt32Size(5, self.step);
  }
  if (self.hasType) {
    size_ += computeInt32Size(6, self.type);
  }
  if (self.hasResId) {
    size_ += computeInt64Size(7, self.resId);
  }
  if (self.hasNodeTime) {
    size_ += computeInt64Size(8, self.nodeTime);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(9, self.modifiedDate);
  }
  if (self.hasStudentId) {
    size_ += computeInt64Size(10, self.studentId);
  }
  if (self.hasTeacherName) {
    size_ += computeStringSize(11, self.teacherName);
  }
  if (self.hasNodeStatus) {
    size_ += computeStringSize(12, self.nodeStatus);
  }
  if (self.hasScore) {
    size_ += computeInt32Size(13, self.score);
  }
  if (self.hasDataStatus) {
    size_ += computeInt32Size(14, self.dataStatus);
  }
  if (self.hasImgText) {
    size_ += computeStringSize(15, self.imgText);
  }
  if (self.hasClassIds) {
    size_ += computeStringSize(16, self.classIds);
  }
  if (self.hasCorrectCount) {
    size_ += computeInt64Size(17, self.correctCount);
  }
  if (self.hasSubmitCount) {
    size_ += computeInt64Size(18, self.submitCount);
  }
  if (self.hasTotal) {
    size_ += computeInt64Size(19, self.total);
  }
  if (self.hasIsRead) {
    size_ += computeInt32Size(20, self.isRead);
  }
  if (self.hasIsFinish) {
    size_ += computeInt32Size(21, self.isFinish);
  }
  if (self.hasPicture) {
    size_ += computeStringSize(22, self.picture);
  }
  if (self.hasVoice) {
    size_ += computeStringSize(23, self.voice);
  }
  if (self.hasFile) {
    size_ += computeDataSize(24, self.file);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TeachNodePb*) parseFromData:(NSData*) data {
  return (TeachNodePb*)[[[TeachNodePb builder] mergeFromData:data] build];
}
+ (TeachNodePb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodePb*)[[[TeachNodePb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TeachNodePb*) parseFromInputStream:(NSInputStream*) input {
  return (TeachNodePb*)[[[TeachNodePb builder] mergeFromInputStream:input] build];
}
+ (TeachNodePb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodePb*)[[[TeachNodePb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachNodePb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TeachNodePb*)[[[TeachNodePb builder] mergeFromCodedInputStream:input] build];
}
+ (TeachNodePb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodePb*)[[[TeachNodePb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachNodePbBuilder*) builder {
  return [[TeachNodePbBuilder alloc] init];
}
+ (TeachNodePbBuilder*) builderWithPrototype:(TeachNodePb*) prototype {
  return [[TeachNodePb builder] mergeFrom:prototype];
}
- (TeachNodePbBuilder*) builder {
  return [TeachNodePb builder];
}
- (TeachNodePbBuilder*) toBuilder {
  return [TeachNodePb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasSchoolId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolId", [NSNumber numberWithLongLong:self.schoolId]];
  }
  if (self.hasSubjectId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subjectId", [NSNumber numberWithLongLong:self.subjectId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasStep) {
    [output appendFormat:@"%@%@: %@\n", indent, @"step", [NSNumber numberWithInteger:self.step]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasResId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resId", [NSNumber numberWithLongLong:self.resId]];
  }
  if (self.hasNodeTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nodeTime", [NSNumber numberWithLongLong:self.nodeTime]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  if (self.hasStudentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentId", [NSNumber numberWithLongLong:self.studentId]];
  }
  if (self.hasTeacherName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teacherName", self.teacherName];
  }
  if (self.hasNodeStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nodeStatus", self.nodeStatus];
  }
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithInteger:self.score]];
  }
  if (self.hasDataStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataStatus", [NSNumber numberWithInteger:self.dataStatus]];
  }
  if (self.hasImgText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgText", self.imgText];
  }
  if (self.hasClassIds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classIds", self.classIds];
  }
  if (self.hasCorrectCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"correctCount", [NSNumber numberWithLongLong:self.correctCount]];
  }
  if (self.hasSubmitCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"submitCount", [NSNumber numberWithLongLong:self.submitCount]];
  }
  if (self.hasTotal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"total", [NSNumber numberWithLongLong:self.total]];
  }
  if (self.hasIsRead) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRead", [NSNumber numberWithInteger:self.isRead]];
  }
  if (self.hasIsFinish) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFinish", [NSNumber numberWithInteger:self.isFinish]];
  }
  if (self.hasPicture) {
    [output appendFormat:@"%@%@: %@\n", indent, @"picture", self.picture];
  }
  if (self.hasVoice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voice", self.voice];
  }
  if (self.hasFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"file", self.file];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasSchoolId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.schoolId] forKey: @"schoolId"];
  }
  if (self.hasSubjectId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.subjectId] forKey: @"subjectId"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasStep) {
    [dictionary setObject: [NSNumber numberWithInteger:self.step] forKey: @"step"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasResId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.resId] forKey: @"resId"];
  }
  if (self.hasNodeTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.nodeTime] forKey: @"nodeTime"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  if (self.hasStudentId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.studentId] forKey: @"studentId"];
  }
  if (self.hasTeacherName) {
    [dictionary setObject: self.teacherName forKey: @"teacherName"];
  }
  if (self.hasNodeStatus) {
    [dictionary setObject: self.nodeStatus forKey: @"nodeStatus"];
  }
  if (self.hasScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.score] forKey: @"score"];
  }
  if (self.hasDataStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dataStatus] forKey: @"dataStatus"];
  }
  if (self.hasImgText) {
    [dictionary setObject: self.imgText forKey: @"imgText"];
  }
  if (self.hasClassIds) {
    [dictionary setObject: self.classIds forKey: @"classIds"];
  }
  if (self.hasCorrectCount) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.correctCount] forKey: @"correctCount"];
  }
  if (self.hasSubmitCount) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.submitCount] forKey: @"submitCount"];
  }
  if (self.hasTotal) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.total] forKey: @"total"];
  }
  if (self.hasIsRead) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isRead] forKey: @"isRead"];
  }
  if (self.hasIsFinish) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isFinish] forKey: @"isFinish"];
  }
  if (self.hasPicture) {
    [dictionary setObject: self.picture forKey: @"picture"];
  }
  if (self.hasVoice) {
    [dictionary setObject: self.voice forKey: @"voice"];
  }
  if (self.hasFile) {
    [dictionary setObject: self.file forKey: @"file"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TeachNodePb class]]) {
    return NO;
  }
  TeachNodePb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasSchoolId == otherMessage.hasSchoolId &&
      (!self.hasSchoolId || self.schoolId == otherMessage.schoolId) &&
      self.hasSubjectId == otherMessage.hasSubjectId &&
      (!self.hasSubjectId || self.subjectId == otherMessage.subjectId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasStep == otherMessage.hasStep &&
      (!self.hasStep || self.step == otherMessage.step) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasResId == otherMessage.hasResId &&
      (!self.hasResId || self.resId == otherMessage.resId) &&
      self.hasNodeTime == otherMessage.hasNodeTime &&
      (!self.hasNodeTime || self.nodeTime == otherMessage.nodeTime) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      self.hasStudentId == otherMessage.hasStudentId &&
      (!self.hasStudentId || self.studentId == otherMessage.studentId) &&
      self.hasTeacherName == otherMessage.hasTeacherName &&
      (!self.hasTeacherName || [self.teacherName isEqual:otherMessage.teacherName]) &&
      self.hasNodeStatus == otherMessage.hasNodeStatus &&
      (!self.hasNodeStatus || [self.nodeStatus isEqual:otherMessage.nodeStatus]) &&
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      self.hasDataStatus == otherMessage.hasDataStatus &&
      (!self.hasDataStatus || self.dataStatus == otherMessage.dataStatus) &&
      self.hasImgText == otherMessage.hasImgText &&
      (!self.hasImgText || [self.imgText isEqual:otherMessage.imgText]) &&
      self.hasClassIds == otherMessage.hasClassIds &&
      (!self.hasClassIds || [self.classIds isEqual:otherMessage.classIds]) &&
      self.hasCorrectCount == otherMessage.hasCorrectCount &&
      (!self.hasCorrectCount || self.correctCount == otherMessage.correctCount) &&
      self.hasSubmitCount == otherMessage.hasSubmitCount &&
      (!self.hasSubmitCount || self.submitCount == otherMessage.submitCount) &&
      self.hasTotal == otherMessage.hasTotal &&
      (!self.hasTotal || self.total == otherMessage.total) &&
      self.hasIsRead == otherMessage.hasIsRead &&
      (!self.hasIsRead || self.isRead == otherMessage.isRead) &&
      self.hasIsFinish == otherMessage.hasIsFinish &&
      (!self.hasIsFinish || self.isFinish == otherMessage.isFinish) &&
      self.hasPicture == otherMessage.hasPicture &&
      (!self.hasPicture || [self.picture isEqual:otherMessage.picture]) &&
      self.hasVoice == otherMessage.hasVoice &&
      (!self.hasVoice || [self.voice isEqual:otherMessage.voice]) &&
      self.hasFile == otherMessage.hasFile &&
      (!self.hasFile || [self.file isEqual:otherMessage.file]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasSchoolId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.schoolId] hash];
  }
  if (self.hasSubjectId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.subjectId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasStep) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.step] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasResId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.resId] hash];
  }
  if (self.hasNodeTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.nodeTime] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  if (self.hasStudentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.studentId] hash];
  }
  if (self.hasTeacherName) {
    hashCode = hashCode * 31 + [self.teacherName hash];
  }
  if (self.hasNodeStatus) {
    hashCode = hashCode * 31 + [self.nodeStatus hash];
  }
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.score] hash];
  }
  if (self.hasDataStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dataStatus] hash];
  }
  if (self.hasImgText) {
    hashCode = hashCode * 31 + [self.imgText hash];
  }
  if (self.hasClassIds) {
    hashCode = hashCode * 31 + [self.classIds hash];
  }
  if (self.hasCorrectCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.correctCount] hash];
  }
  if (self.hasSubmitCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.submitCount] hash];
  }
  if (self.hasTotal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.total] hash];
  }
  if (self.hasIsRead) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isRead] hash];
  }
  if (self.hasIsFinish) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isFinish] hash];
  }
  if (self.hasPicture) {
    hashCode = hashCode * 31 + [self.picture hash];
  }
  if (self.hasVoice) {
    hashCode = hashCode * 31 + [self.voice hash];
  }
  if (self.hasFile) {
    hashCode = hashCode * 31 + [self.file hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TeachNodePbBuilder()
@property (strong) TeachNodePb* resultTeachNodePb;
@end

@implementation TeachNodePbBuilder
@synthesize resultTeachNodePb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTeachNodePb = [[TeachNodePb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTeachNodePb;
}
- (TeachNodePbBuilder*) clear {
  self.resultTeachNodePb = [[TeachNodePb alloc] init];
  return self;
}
- (TeachNodePbBuilder*) clone {
  return [TeachNodePb builderWithPrototype:resultTeachNodePb];
}
- (TeachNodePb*) defaultInstance {
  return [TeachNodePb defaultInstance];
}
- (TeachNodePb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TeachNodePb*) buildPartial {
  TeachNodePb* returnMe = resultTeachNodePb;
  self.resultTeachNodePb = nil;
  return returnMe;
}
- (TeachNodePbBuilder*) mergeFrom:(TeachNodePb*) other {
  if (other == [TeachNodePb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasSchoolId) {
    [self setSchoolId:other.schoolId];
  }
  if (other.hasSubjectId) {
    [self setSubjectId:other.subjectId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasStep) {
    [self setStep:other.step];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasResId) {
    [self setResId:other.resId];
  }
  if (other.hasNodeTime) {
    [self setNodeTime:other.nodeTime];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasStudentId) {
    [self setStudentId:other.studentId];
  }
  if (other.hasTeacherName) {
    [self setTeacherName:other.teacherName];
  }
  if (other.hasNodeStatus) {
    [self setNodeStatus:other.nodeStatus];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasDataStatus) {
    [self setDataStatus:other.dataStatus];
  }
  if (other.hasImgText) {
    [self setImgText:other.imgText];
  }
  if (other.hasClassIds) {
    [self setClassIds:other.classIds];
  }
  if (other.hasCorrectCount) {
    [self setCorrectCount:other.correctCount];
  }
  if (other.hasSubmitCount) {
    [self setSubmitCount:other.submitCount];
  }
  if (other.hasTotal) {
    [self setTotal:other.total];
  }
  if (other.hasIsRead) {
    [self setIsRead:other.isRead];
  }
  if (other.hasIsFinish) {
    [self setIsFinish:other.isFinish];
  }
  if (other.hasPicture) {
    [self setPicture:other.picture];
  }
  if (other.hasVoice) {
    [self setVoice:other.voice];
  }
  if (other.hasFile) {
    [self setFile:other.file];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TeachNodePbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TeachNodePbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setSchoolId:[input readInt64]];
        break;
      }
      case 24: {
        [self setSubjectId:[input readInt64]];
        break;
      }
      case 34: {
        [self setName:[input readString]];
        break;
      }
      case 40: {
        [self setStep:[input readInt32]];
        break;
      }
      case 48: {
        [self setType:[input readInt32]];
        break;
      }
      case 56: {
        [self setResId:[input readInt64]];
        break;
      }
      case 64: {
        [self setNodeTime:[input readInt64]];
        break;
      }
      case 72: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 80: {
        [self setStudentId:[input readInt64]];
        break;
      }
      case 90: {
        [self setTeacherName:[input readString]];
        break;
      }
      case 98: {
        [self setNodeStatus:[input readString]];
        break;
      }
      case 104: {
        [self setScore:[input readInt32]];
        break;
      }
      case 112: {
        [self setDataStatus:[input readInt32]];
        break;
      }
      case 122: {
        [self setImgText:[input readString]];
        break;
      }
      case 130: {
        [self setClassIds:[input readString]];
        break;
      }
      case 136: {
        [self setCorrectCount:[input readInt64]];
        break;
      }
      case 144: {
        [self setSubmitCount:[input readInt64]];
        break;
      }
      case 152: {
        [self setTotal:[input readInt64]];
        break;
      }
      case 160: {
        [self setIsRead:[input readInt32]];
        break;
      }
      case 168: {
        [self setIsFinish:[input readInt32]];
        break;
      }
      case 178: {
        [self setPicture:[input readString]];
        break;
      }
      case 186: {
        [self setVoice:[input readString]];
        break;
      }
      case 194: {
        [self setFile:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultTeachNodePb.hasId;
}
- (SInt64) id {
  return resultTeachNodePb.id;
}
- (TeachNodePbBuilder*) setId:(SInt64) value {
  resultTeachNodePb.hasId = YES;
  resultTeachNodePb.id = value;
  return self;
}
- (TeachNodePbBuilder*) clearId {
  resultTeachNodePb.hasId = NO;
  resultTeachNodePb.id = 0L;
  return self;
}
- (BOOL) hasSchoolId {
  return resultTeachNodePb.hasSchoolId;
}
- (SInt64) schoolId {
  return resultTeachNodePb.schoolId;
}
- (TeachNodePbBuilder*) setSchoolId:(SInt64) value {
  resultTeachNodePb.hasSchoolId = YES;
  resultTeachNodePb.schoolId = value;
  return self;
}
- (TeachNodePbBuilder*) clearSchoolId {
  resultTeachNodePb.hasSchoolId = NO;
  resultTeachNodePb.schoolId = 0L;
  return self;
}
- (BOOL) hasSubjectId {
  return resultTeachNodePb.hasSubjectId;
}
- (SInt64) subjectId {
  return resultTeachNodePb.subjectId;
}
- (TeachNodePbBuilder*) setSubjectId:(SInt64) value {
  resultTeachNodePb.hasSubjectId = YES;
  resultTeachNodePb.subjectId = value;
  return self;
}
- (TeachNodePbBuilder*) clearSubjectId {
  resultTeachNodePb.hasSubjectId = NO;
  resultTeachNodePb.subjectId = 0L;
  return self;
}
- (BOOL) hasName {
  return resultTeachNodePb.hasName;
}
- (NSString*) name {
  return resultTeachNodePb.name;
}
- (TeachNodePbBuilder*) setName:(NSString*) value {
  resultTeachNodePb.hasName = YES;
  resultTeachNodePb.name = value;
  return self;
}
- (TeachNodePbBuilder*) clearName {
  resultTeachNodePb.hasName = NO;
  resultTeachNodePb.name = @"";
  return self;
}
- (BOOL) hasStep {
  return resultTeachNodePb.hasStep;
}
- (SInt32) step {
  return resultTeachNodePb.step;
}
- (TeachNodePbBuilder*) setStep:(SInt32) value {
  resultTeachNodePb.hasStep = YES;
  resultTeachNodePb.step = value;
  return self;
}
- (TeachNodePbBuilder*) clearStep {
  resultTeachNodePb.hasStep = NO;
  resultTeachNodePb.step = 0;
  return self;
}
- (BOOL) hasType {
  return resultTeachNodePb.hasType;
}
- (SInt32) type {
  return resultTeachNodePb.type;
}
- (TeachNodePbBuilder*) setType:(SInt32) value {
  resultTeachNodePb.hasType = YES;
  resultTeachNodePb.type = value;
  return self;
}
- (TeachNodePbBuilder*) clearType {
  resultTeachNodePb.hasType = NO;
  resultTeachNodePb.type = 0;
  return self;
}
- (BOOL) hasResId {
  return resultTeachNodePb.hasResId;
}
- (SInt64) resId {
  return resultTeachNodePb.resId;
}
- (TeachNodePbBuilder*) setResId:(SInt64) value {
  resultTeachNodePb.hasResId = YES;
  resultTeachNodePb.resId = value;
  return self;
}
- (TeachNodePbBuilder*) clearResId {
  resultTeachNodePb.hasResId = NO;
  resultTeachNodePb.resId = 0L;
  return self;
}
- (BOOL) hasNodeTime {
  return resultTeachNodePb.hasNodeTime;
}
- (SInt64) nodeTime {
  return resultTeachNodePb.nodeTime;
}
- (TeachNodePbBuilder*) setNodeTime:(SInt64) value {
  resultTeachNodePb.hasNodeTime = YES;
  resultTeachNodePb.nodeTime = value;
  return self;
}
- (TeachNodePbBuilder*) clearNodeTime {
  resultTeachNodePb.hasNodeTime = NO;
  resultTeachNodePb.nodeTime = 0L;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultTeachNodePb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultTeachNodePb.modifiedDate;
}
- (TeachNodePbBuilder*) setModifiedDate:(SInt64) value {
  resultTeachNodePb.hasModifiedDate = YES;
  resultTeachNodePb.modifiedDate = value;
  return self;
}
- (TeachNodePbBuilder*) clearModifiedDate {
  resultTeachNodePb.hasModifiedDate = NO;
  resultTeachNodePb.modifiedDate = 0L;
  return self;
}
- (BOOL) hasStudentId {
  return resultTeachNodePb.hasStudentId;
}
- (SInt64) studentId {
  return resultTeachNodePb.studentId;
}
- (TeachNodePbBuilder*) setStudentId:(SInt64) value {
  resultTeachNodePb.hasStudentId = YES;
  resultTeachNodePb.studentId = value;
  return self;
}
- (TeachNodePbBuilder*) clearStudentId {
  resultTeachNodePb.hasStudentId = NO;
  resultTeachNodePb.studentId = 0L;
  return self;
}
- (BOOL) hasTeacherName {
  return resultTeachNodePb.hasTeacherName;
}
- (NSString*) teacherName {
  return resultTeachNodePb.teacherName;
}
- (TeachNodePbBuilder*) setTeacherName:(NSString*) value {
  resultTeachNodePb.hasTeacherName = YES;
  resultTeachNodePb.teacherName = value;
  return self;
}
- (TeachNodePbBuilder*) clearTeacherName {
  resultTeachNodePb.hasTeacherName = NO;
  resultTeachNodePb.teacherName = @"";
  return self;
}
- (BOOL) hasNodeStatus {
  return resultTeachNodePb.hasNodeStatus;
}
- (NSString*) nodeStatus {
  return resultTeachNodePb.nodeStatus;
}
- (TeachNodePbBuilder*) setNodeStatus:(NSString*) value {
  resultTeachNodePb.hasNodeStatus = YES;
  resultTeachNodePb.nodeStatus = value;
  return self;
}
- (TeachNodePbBuilder*) clearNodeStatus {
  resultTeachNodePb.hasNodeStatus = NO;
  resultTeachNodePb.nodeStatus = @"";
  return self;
}
- (BOOL) hasScore {
  return resultTeachNodePb.hasScore;
}
- (SInt32) score {
  return resultTeachNodePb.score;
}
- (TeachNodePbBuilder*) setScore:(SInt32) value {
  resultTeachNodePb.hasScore = YES;
  resultTeachNodePb.score = value;
  return self;
}
- (TeachNodePbBuilder*) clearScore {
  resultTeachNodePb.hasScore = NO;
  resultTeachNodePb.score = 0;
  return self;
}
- (BOOL) hasDataStatus {
  return resultTeachNodePb.hasDataStatus;
}
- (SInt32) dataStatus {
  return resultTeachNodePb.dataStatus;
}
- (TeachNodePbBuilder*) setDataStatus:(SInt32) value {
  resultTeachNodePb.hasDataStatus = YES;
  resultTeachNodePb.dataStatus = value;
  return self;
}
- (TeachNodePbBuilder*) clearDataStatus {
  resultTeachNodePb.hasDataStatus = NO;
  resultTeachNodePb.dataStatus = 0;
  return self;
}
- (BOOL) hasImgText {
  return resultTeachNodePb.hasImgText;
}
- (NSString*) imgText {
  return resultTeachNodePb.imgText;
}
- (TeachNodePbBuilder*) setImgText:(NSString*) value {
  resultTeachNodePb.hasImgText = YES;
  resultTeachNodePb.imgText = value;
  return self;
}
- (TeachNodePbBuilder*) clearImgText {
  resultTeachNodePb.hasImgText = NO;
  resultTeachNodePb.imgText = @"";
  return self;
}
- (BOOL) hasClassIds {
  return resultTeachNodePb.hasClassIds;
}
- (NSString*) classIds {
  return resultTeachNodePb.classIds;
}
- (TeachNodePbBuilder*) setClassIds:(NSString*) value {
  resultTeachNodePb.hasClassIds = YES;
  resultTeachNodePb.classIds = value;
  return self;
}
- (TeachNodePbBuilder*) clearClassIds {
  resultTeachNodePb.hasClassIds = NO;
  resultTeachNodePb.classIds = @"";
  return self;
}
- (BOOL) hasCorrectCount {
  return resultTeachNodePb.hasCorrectCount;
}
- (SInt64) correctCount {
  return resultTeachNodePb.correctCount;
}
- (TeachNodePbBuilder*) setCorrectCount:(SInt64) value {
  resultTeachNodePb.hasCorrectCount = YES;
  resultTeachNodePb.correctCount = value;
  return self;
}
- (TeachNodePbBuilder*) clearCorrectCount {
  resultTeachNodePb.hasCorrectCount = NO;
  resultTeachNodePb.correctCount = 0L;
  return self;
}
- (BOOL) hasSubmitCount {
  return resultTeachNodePb.hasSubmitCount;
}
- (SInt64) submitCount {
  return resultTeachNodePb.submitCount;
}
- (TeachNodePbBuilder*) setSubmitCount:(SInt64) value {
  resultTeachNodePb.hasSubmitCount = YES;
  resultTeachNodePb.submitCount = value;
  return self;
}
- (TeachNodePbBuilder*) clearSubmitCount {
  resultTeachNodePb.hasSubmitCount = NO;
  resultTeachNodePb.submitCount = 0L;
  return self;
}
- (BOOL) hasTotal {
  return resultTeachNodePb.hasTotal;
}
- (SInt64) total {
  return resultTeachNodePb.total;
}
- (TeachNodePbBuilder*) setTotal:(SInt64) value {
  resultTeachNodePb.hasTotal = YES;
  resultTeachNodePb.total = value;
  return self;
}
- (TeachNodePbBuilder*) clearTotal {
  resultTeachNodePb.hasTotal = NO;
  resultTeachNodePb.total = 0L;
  return self;
}
- (BOOL) hasIsRead {
  return resultTeachNodePb.hasIsRead;
}
- (SInt32) isRead {
  return resultTeachNodePb.isRead;
}
- (TeachNodePbBuilder*) setIsRead:(SInt32) value {
  resultTeachNodePb.hasIsRead = YES;
  resultTeachNodePb.isRead = value;
  return self;
}
- (TeachNodePbBuilder*) clearIsRead {
  resultTeachNodePb.hasIsRead = NO;
  resultTeachNodePb.isRead = 0;
  return self;
}
- (BOOL) hasIsFinish {
  return resultTeachNodePb.hasIsFinish;
}
- (SInt32) isFinish {
  return resultTeachNodePb.isFinish;
}
- (TeachNodePbBuilder*) setIsFinish:(SInt32) value {
  resultTeachNodePb.hasIsFinish = YES;
  resultTeachNodePb.isFinish = value;
  return self;
}
- (TeachNodePbBuilder*) clearIsFinish {
  resultTeachNodePb.hasIsFinish = NO;
  resultTeachNodePb.isFinish = 0;
  return self;
}
- (BOOL) hasPicture {
  return resultTeachNodePb.hasPicture;
}
- (NSString*) picture {
  return resultTeachNodePb.picture;
}
- (TeachNodePbBuilder*) setPicture:(NSString*) value {
  resultTeachNodePb.hasPicture = YES;
  resultTeachNodePb.picture = value;
  return self;
}
- (TeachNodePbBuilder*) clearPicture {
  resultTeachNodePb.hasPicture = NO;
  resultTeachNodePb.picture = @"";
  return self;
}
- (BOOL) hasVoice {
  return resultTeachNodePb.hasVoice;
}
- (NSString*) voice {
  return resultTeachNodePb.voice;
}
- (TeachNodePbBuilder*) setVoice:(NSString*) value {
  resultTeachNodePb.hasVoice = YES;
  resultTeachNodePb.voice = value;
  return self;
}
- (TeachNodePbBuilder*) clearVoice {
  resultTeachNodePb.hasVoice = NO;
  resultTeachNodePb.voice = @"";
  return self;
}
- (BOOL) hasFile {
  return resultTeachNodePb.hasFile;
}
- (NSData*) file {
  return resultTeachNodePb.file;
}
- (TeachNodePbBuilder*) setFile:(NSData*) value {
  resultTeachNodePb.hasFile = YES;
  resultTeachNodePb.file = value;
  return self;
}
- (TeachNodePbBuilder*) clearFile {
  resultTeachNodePb.hasFile = NO;
  resultTeachNodePb.file = [NSData data];
  return self;
}
@end

@interface TeachNodeDetailsPb ()
@property SInt64 planNodeId;
@property SInt64 classId;
@property SInt64 studentId;
@property (strong) NSString* studentName;
@property SInt64 totalScore;
@property SInt32 isRead;
@property SInt32 isSubmit;
@property SInt32 isCorrect;
@property SInt32 isFinish;
@property SInt64 modifiedDate;
@end

@implementation TeachNodeDetailsPb

- (BOOL) hasPlanNodeId {
  return !!hasPlanNodeId_;
}
- (void) setHasPlanNodeId:(BOOL) _value_ {
  hasPlanNodeId_ = !!_value_;
}
@synthesize planNodeId;
- (BOOL) hasClassId {
  return !!hasClassId_;
}
- (void) setHasClassId:(BOOL) _value_ {
  hasClassId_ = !!_value_;
}
@synthesize classId;
- (BOOL) hasStudentId {
  return !!hasStudentId_;
}
- (void) setHasStudentId:(BOOL) _value_ {
  hasStudentId_ = !!_value_;
}
@synthesize studentId;
- (BOOL) hasStudentName {
  return !!hasStudentName_;
}
- (void) setHasStudentName:(BOOL) _value_ {
  hasStudentName_ = !!_value_;
}
@synthesize studentName;
- (BOOL) hasTotalScore {
  return !!hasTotalScore_;
}
- (void) setHasTotalScore:(BOOL) _value_ {
  hasTotalScore_ = !!_value_;
}
@synthesize totalScore;
- (BOOL) hasIsRead {
  return !!hasIsRead_;
}
- (void) setHasIsRead:(BOOL) _value_ {
  hasIsRead_ = !!_value_;
}
@synthesize isRead;
- (BOOL) hasIsSubmit {
  return !!hasIsSubmit_;
}
- (void) setHasIsSubmit:(BOOL) _value_ {
  hasIsSubmit_ = !!_value_;
}
@synthesize isSubmit;
- (BOOL) hasIsCorrect {
  return !!hasIsCorrect_;
}
- (void) setHasIsCorrect:(BOOL) _value_ {
  hasIsCorrect_ = !!_value_;
}
@synthesize isCorrect;
- (BOOL) hasIsFinish {
  return !!hasIsFinish_;
}
- (void) setHasIsFinish:(BOOL) _value_ {
  hasIsFinish_ = !!_value_;
}
@synthesize isFinish;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.planNodeId = 0L;
    self.classId = 0L;
    self.studentId = 0L;
    self.studentName = @"";
    self.totalScore = 0L;
    self.isRead = 0;
    self.isSubmit = 0;
    self.isCorrect = 0;
    self.isFinish = 0;
    self.modifiedDate = 0L;
  }
  return self;
}
static TeachNodeDetailsPb* defaultTeachNodeDetailsPbInstance = nil;
+ (void) initialize {
  if (self == [TeachNodeDetailsPb class]) {
    defaultTeachNodeDetailsPbInstance = [[TeachNodeDetailsPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTeachNodeDetailsPbInstance;
}
- (instancetype) defaultInstance {
  return defaultTeachNodeDetailsPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPlanNodeId) {
    [output writeInt64:1 value:self.planNodeId];
  }
  if (self.hasClassId) {
    [output writeInt64:2 value:self.classId];
  }
  if (self.hasStudentId) {
    [output writeInt64:3 value:self.studentId];
  }
  if (self.hasStudentName) {
    [output writeString:4 value:self.studentName];
  }
  if (self.hasTotalScore) {
    [output writeInt64:5 value:self.totalScore];
  }
  if (self.hasIsRead) {
    [output writeInt32:6 value:self.isRead];
  }
  if (self.hasIsSubmit) {
    [output writeInt32:7 value:self.isSubmit];
  }
  if (self.hasIsCorrect) {
    [output writeInt32:8 value:self.isCorrect];
  }
  if (self.hasIsFinish) {
    [output writeInt32:9 value:self.isFinish];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:10 value:self.modifiedDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPlanNodeId) {
    size_ += computeInt64Size(1, self.planNodeId);
  }
  if (self.hasClassId) {
    size_ += computeInt64Size(2, self.classId);
  }
  if (self.hasStudentId) {
    size_ += computeInt64Size(3, self.studentId);
  }
  if (self.hasStudentName) {
    size_ += computeStringSize(4, self.studentName);
  }
  if (self.hasTotalScore) {
    size_ += computeInt64Size(5, self.totalScore);
  }
  if (self.hasIsRead) {
    size_ += computeInt32Size(6, self.isRead);
  }
  if (self.hasIsSubmit) {
    size_ += computeInt32Size(7, self.isSubmit);
  }
  if (self.hasIsCorrect) {
    size_ += computeInt32Size(8, self.isCorrect);
  }
  if (self.hasIsFinish) {
    size_ += computeInt32Size(9, self.isFinish);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(10, self.modifiedDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TeachNodeDetailsPb*) parseFromData:(NSData*) data {
  return (TeachNodeDetailsPb*)[[[TeachNodeDetailsPb builder] mergeFromData:data] build];
}
+ (TeachNodeDetailsPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodeDetailsPb*)[[[TeachNodeDetailsPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TeachNodeDetailsPb*) parseFromInputStream:(NSInputStream*) input {
  return (TeachNodeDetailsPb*)[[[TeachNodeDetailsPb builder] mergeFromInputStream:input] build];
}
+ (TeachNodeDetailsPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodeDetailsPb*)[[[TeachNodeDetailsPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachNodeDetailsPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TeachNodeDetailsPb*)[[[TeachNodeDetailsPb builder] mergeFromCodedInputStream:input] build];
}
+ (TeachNodeDetailsPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodeDetailsPb*)[[[TeachNodeDetailsPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachNodeDetailsPbBuilder*) builder {
  return [[TeachNodeDetailsPbBuilder alloc] init];
}
+ (TeachNodeDetailsPbBuilder*) builderWithPrototype:(TeachNodeDetailsPb*) prototype {
  return [[TeachNodeDetailsPb builder] mergeFrom:prototype];
}
- (TeachNodeDetailsPbBuilder*) builder {
  return [TeachNodeDetailsPb builder];
}
- (TeachNodeDetailsPbBuilder*) toBuilder {
  return [TeachNodeDetailsPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPlanNodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"planNodeId", [NSNumber numberWithLongLong:self.planNodeId]];
  }
  if (self.hasClassId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classId", [NSNumber numberWithLongLong:self.classId]];
  }
  if (self.hasStudentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentId", [NSNumber numberWithLongLong:self.studentId]];
  }
  if (self.hasStudentName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"studentName", self.studentName];
  }
  if (self.hasTotalScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalScore", [NSNumber numberWithLongLong:self.totalScore]];
  }
  if (self.hasIsRead) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRead", [NSNumber numberWithInteger:self.isRead]];
  }
  if (self.hasIsSubmit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isSubmit", [NSNumber numberWithInteger:self.isSubmit]];
  }
  if (self.hasIsCorrect) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isCorrect", [NSNumber numberWithInteger:self.isCorrect]];
  }
  if (self.hasIsFinish) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFinish", [NSNumber numberWithInteger:self.isFinish]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPlanNodeId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.planNodeId] forKey: @"planNodeId"];
  }
  if (self.hasClassId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.classId] forKey: @"classId"];
  }
  if (self.hasStudentId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.studentId] forKey: @"studentId"];
  }
  if (self.hasStudentName) {
    [dictionary setObject: self.studentName forKey: @"studentName"];
  }
  if (self.hasTotalScore) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.totalScore] forKey: @"totalScore"];
  }
  if (self.hasIsRead) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isRead] forKey: @"isRead"];
  }
  if (self.hasIsSubmit) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isSubmit] forKey: @"isSubmit"];
  }
  if (self.hasIsCorrect) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isCorrect] forKey: @"isCorrect"];
  }
  if (self.hasIsFinish) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isFinish] forKey: @"isFinish"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TeachNodeDetailsPb class]]) {
    return NO;
  }
  TeachNodeDetailsPb *otherMessage = other;
  return
      self.hasPlanNodeId == otherMessage.hasPlanNodeId &&
      (!self.hasPlanNodeId || self.planNodeId == otherMessage.planNodeId) &&
      self.hasClassId == otherMessage.hasClassId &&
      (!self.hasClassId || self.classId == otherMessage.classId) &&
      self.hasStudentId == otherMessage.hasStudentId &&
      (!self.hasStudentId || self.studentId == otherMessage.studentId) &&
      self.hasStudentName == otherMessage.hasStudentName &&
      (!self.hasStudentName || [self.studentName isEqual:otherMessage.studentName]) &&
      self.hasTotalScore == otherMessage.hasTotalScore &&
      (!self.hasTotalScore || self.totalScore == otherMessage.totalScore) &&
      self.hasIsRead == otherMessage.hasIsRead &&
      (!self.hasIsRead || self.isRead == otherMessage.isRead) &&
      self.hasIsSubmit == otherMessage.hasIsSubmit &&
      (!self.hasIsSubmit || self.isSubmit == otherMessage.isSubmit) &&
      self.hasIsCorrect == otherMessage.hasIsCorrect &&
      (!self.hasIsCorrect || self.isCorrect == otherMessage.isCorrect) &&
      self.hasIsFinish == otherMessage.hasIsFinish &&
      (!self.hasIsFinish || self.isFinish == otherMessage.isFinish) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPlanNodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.planNodeId] hash];
  }
  if (self.hasClassId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.classId] hash];
  }
  if (self.hasStudentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.studentId] hash];
  }
  if (self.hasStudentName) {
    hashCode = hashCode * 31 + [self.studentName hash];
  }
  if (self.hasTotalScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.totalScore] hash];
  }
  if (self.hasIsRead) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isRead] hash];
  }
  if (self.hasIsSubmit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isSubmit] hash];
  }
  if (self.hasIsCorrect) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isCorrect] hash];
  }
  if (self.hasIsFinish) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isFinish] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TeachNodeDetailsPbBuilder()
@property (strong) TeachNodeDetailsPb* resultTeachNodeDetailsPb;
@end

@implementation TeachNodeDetailsPbBuilder
@synthesize resultTeachNodeDetailsPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTeachNodeDetailsPb = [[TeachNodeDetailsPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTeachNodeDetailsPb;
}
- (TeachNodeDetailsPbBuilder*) clear {
  self.resultTeachNodeDetailsPb = [[TeachNodeDetailsPb alloc] init];
  return self;
}
- (TeachNodeDetailsPbBuilder*) clone {
  return [TeachNodeDetailsPb builderWithPrototype:resultTeachNodeDetailsPb];
}
- (TeachNodeDetailsPb*) defaultInstance {
  return [TeachNodeDetailsPb defaultInstance];
}
- (TeachNodeDetailsPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TeachNodeDetailsPb*) buildPartial {
  TeachNodeDetailsPb* returnMe = resultTeachNodeDetailsPb;
  self.resultTeachNodeDetailsPb = nil;
  return returnMe;
}
- (TeachNodeDetailsPbBuilder*) mergeFrom:(TeachNodeDetailsPb*) other {
  if (other == [TeachNodeDetailsPb defaultInstance]) {
    return self;
  }
  if (other.hasPlanNodeId) {
    [self setPlanNodeId:other.planNodeId];
  }
  if (other.hasClassId) {
    [self setClassId:other.classId];
  }
  if (other.hasStudentId) {
    [self setStudentId:other.studentId];
  }
  if (other.hasStudentName) {
    [self setStudentName:other.studentName];
  }
  if (other.hasTotalScore) {
    [self setTotalScore:other.totalScore];
  }
  if (other.hasIsRead) {
    [self setIsRead:other.isRead];
  }
  if (other.hasIsSubmit) {
    [self setIsSubmit:other.isSubmit];
  }
  if (other.hasIsCorrect) {
    [self setIsCorrect:other.isCorrect];
  }
  if (other.hasIsFinish) {
    [self setIsFinish:other.isFinish];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TeachNodeDetailsPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TeachNodeDetailsPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPlanNodeId:[input readInt64]];
        break;
      }
      case 16: {
        [self setClassId:[input readInt64]];
        break;
      }
      case 24: {
        [self setStudentId:[input readInt64]];
        break;
      }
      case 34: {
        [self setStudentName:[input readString]];
        break;
      }
      case 40: {
        [self setTotalScore:[input readInt64]];
        break;
      }
      case 48: {
        [self setIsRead:[input readInt32]];
        break;
      }
      case 56: {
        [self setIsSubmit:[input readInt32]];
        break;
      }
      case 64: {
        [self setIsCorrect:[input readInt32]];
        break;
      }
      case 72: {
        [self setIsFinish:[input readInt32]];
        break;
      }
      case 80: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasPlanNodeId {
  return resultTeachNodeDetailsPb.hasPlanNodeId;
}
- (SInt64) planNodeId {
  return resultTeachNodeDetailsPb.planNodeId;
}
- (TeachNodeDetailsPbBuilder*) setPlanNodeId:(SInt64) value {
  resultTeachNodeDetailsPb.hasPlanNodeId = YES;
  resultTeachNodeDetailsPb.planNodeId = value;
  return self;
}
- (TeachNodeDetailsPbBuilder*) clearPlanNodeId {
  resultTeachNodeDetailsPb.hasPlanNodeId = NO;
  resultTeachNodeDetailsPb.planNodeId = 0L;
  return self;
}
- (BOOL) hasClassId {
  return resultTeachNodeDetailsPb.hasClassId;
}
- (SInt64) classId {
  return resultTeachNodeDetailsPb.classId;
}
- (TeachNodeDetailsPbBuilder*) setClassId:(SInt64) value {
  resultTeachNodeDetailsPb.hasClassId = YES;
  resultTeachNodeDetailsPb.classId = value;
  return self;
}
- (TeachNodeDetailsPbBuilder*) clearClassId {
  resultTeachNodeDetailsPb.hasClassId = NO;
  resultTeachNodeDetailsPb.classId = 0L;
  return self;
}
- (BOOL) hasStudentId {
  return resultTeachNodeDetailsPb.hasStudentId;
}
- (SInt64) studentId {
  return resultTeachNodeDetailsPb.studentId;
}
- (TeachNodeDetailsPbBuilder*) setStudentId:(SInt64) value {
  resultTeachNodeDetailsPb.hasStudentId = YES;
  resultTeachNodeDetailsPb.studentId = value;
  return self;
}
- (TeachNodeDetailsPbBuilder*) clearStudentId {
  resultTeachNodeDetailsPb.hasStudentId = NO;
  resultTeachNodeDetailsPb.studentId = 0L;
  return self;
}
- (BOOL) hasStudentName {
  return resultTeachNodeDetailsPb.hasStudentName;
}
- (NSString*) studentName {
  return resultTeachNodeDetailsPb.studentName;
}
- (TeachNodeDetailsPbBuilder*) setStudentName:(NSString*) value {
  resultTeachNodeDetailsPb.hasStudentName = YES;
  resultTeachNodeDetailsPb.studentName = value;
  return self;
}
- (TeachNodeDetailsPbBuilder*) clearStudentName {
  resultTeachNodeDetailsPb.hasStudentName = NO;
  resultTeachNodeDetailsPb.studentName = @"";
  return self;
}
- (BOOL) hasTotalScore {
  return resultTeachNodeDetailsPb.hasTotalScore;
}
- (SInt64) totalScore {
  return resultTeachNodeDetailsPb.totalScore;
}
- (TeachNodeDetailsPbBuilder*) setTotalScore:(SInt64) value {
  resultTeachNodeDetailsPb.hasTotalScore = YES;
  resultTeachNodeDetailsPb.totalScore = value;
  return self;
}
- (TeachNodeDetailsPbBuilder*) clearTotalScore {
  resultTeachNodeDetailsPb.hasTotalScore = NO;
  resultTeachNodeDetailsPb.totalScore = 0L;
  return self;
}
- (BOOL) hasIsRead {
  return resultTeachNodeDetailsPb.hasIsRead;
}
- (SInt32) isRead {
  return resultTeachNodeDetailsPb.isRead;
}
- (TeachNodeDetailsPbBuilder*) setIsRead:(SInt32) value {
  resultTeachNodeDetailsPb.hasIsRead = YES;
  resultTeachNodeDetailsPb.isRead = value;
  return self;
}
- (TeachNodeDetailsPbBuilder*) clearIsRead {
  resultTeachNodeDetailsPb.hasIsRead = NO;
  resultTeachNodeDetailsPb.isRead = 0;
  return self;
}
- (BOOL) hasIsSubmit {
  return resultTeachNodeDetailsPb.hasIsSubmit;
}
- (SInt32) isSubmit {
  return resultTeachNodeDetailsPb.isSubmit;
}
- (TeachNodeDetailsPbBuilder*) setIsSubmit:(SInt32) value {
  resultTeachNodeDetailsPb.hasIsSubmit = YES;
  resultTeachNodeDetailsPb.isSubmit = value;
  return self;
}
- (TeachNodeDetailsPbBuilder*) clearIsSubmit {
  resultTeachNodeDetailsPb.hasIsSubmit = NO;
  resultTeachNodeDetailsPb.isSubmit = 0;
  return self;
}
- (BOOL) hasIsCorrect {
  return resultTeachNodeDetailsPb.hasIsCorrect;
}
- (SInt32) isCorrect {
  return resultTeachNodeDetailsPb.isCorrect;
}
- (TeachNodeDetailsPbBuilder*) setIsCorrect:(SInt32) value {
  resultTeachNodeDetailsPb.hasIsCorrect = YES;
  resultTeachNodeDetailsPb.isCorrect = value;
  return self;
}
- (TeachNodeDetailsPbBuilder*) clearIsCorrect {
  resultTeachNodeDetailsPb.hasIsCorrect = NO;
  resultTeachNodeDetailsPb.isCorrect = 0;
  return self;
}
- (BOOL) hasIsFinish {
  return resultTeachNodeDetailsPb.hasIsFinish;
}
- (SInt32) isFinish {
  return resultTeachNodeDetailsPb.isFinish;
}
- (TeachNodeDetailsPbBuilder*) setIsFinish:(SInt32) value {
  resultTeachNodeDetailsPb.hasIsFinish = YES;
  resultTeachNodeDetailsPb.isFinish = value;
  return self;
}
- (TeachNodeDetailsPbBuilder*) clearIsFinish {
  resultTeachNodeDetailsPb.hasIsFinish = NO;
  resultTeachNodeDetailsPb.isFinish = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultTeachNodeDetailsPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultTeachNodeDetailsPb.modifiedDate;
}
- (TeachNodeDetailsPbBuilder*) setModifiedDate:(SInt64) value {
  resultTeachNodeDetailsPb.hasModifiedDate = YES;
  resultTeachNodeDetailsPb.modifiedDate = value;
  return self;
}
- (TeachNodeDetailsPbBuilder*) clearModifiedDate {
  resultTeachNodeDetailsPb.hasModifiedDate = NO;
  resultTeachNodeDetailsPb.modifiedDate = 0L;
  return self;
}
@end

@interface TeachNodeContentPb ()
@property SInt64 id;
@property SInt64 nodeId;
@property (strong) NSString* content;
@property SInt32 dataStatus;
@property SInt64 modifiedDate;
@end

@implementation TeachNodeContentPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasNodeId {
  return !!hasNodeId_;
}
- (void) setHasNodeId:(BOOL) _value_ {
  hasNodeId_ = !!_value_;
}
@synthesize nodeId;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasDataStatus {
  return !!hasDataStatus_;
}
- (void) setHasDataStatus:(BOOL) _value_ {
  hasDataStatus_ = !!_value_;
}
@synthesize dataStatus;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.nodeId = 0L;
    self.content = @"";
    self.dataStatus = 0;
    self.modifiedDate = 0L;
  }
  return self;
}
static TeachNodeContentPb* defaultTeachNodeContentPbInstance = nil;
+ (void) initialize {
  if (self == [TeachNodeContentPb class]) {
    defaultTeachNodeContentPbInstance = [[TeachNodeContentPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTeachNodeContentPbInstance;
}
- (instancetype) defaultInstance {
  return defaultTeachNodeContentPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasNodeId) {
    [output writeInt64:2 value:self.nodeId];
  }
  if (self.hasContent) {
    [output writeString:3 value:self.content];
  }
  if (self.hasDataStatus) {
    [output writeInt32:4 value:self.dataStatus];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:5 value:self.modifiedDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasNodeId) {
    size_ += computeInt64Size(2, self.nodeId);
  }
  if (self.hasContent) {
    size_ += computeStringSize(3, self.content);
  }
  if (self.hasDataStatus) {
    size_ += computeInt32Size(4, self.dataStatus);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(5, self.modifiedDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TeachNodeContentPb*) parseFromData:(NSData*) data {
  return (TeachNodeContentPb*)[[[TeachNodeContentPb builder] mergeFromData:data] build];
}
+ (TeachNodeContentPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodeContentPb*)[[[TeachNodeContentPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TeachNodeContentPb*) parseFromInputStream:(NSInputStream*) input {
  return (TeachNodeContentPb*)[[[TeachNodeContentPb builder] mergeFromInputStream:input] build];
}
+ (TeachNodeContentPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodeContentPb*)[[[TeachNodeContentPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachNodeContentPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TeachNodeContentPb*)[[[TeachNodeContentPb builder] mergeFromCodedInputStream:input] build];
}
+ (TeachNodeContentPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeachNodeContentPb*)[[[TeachNodeContentPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeachNodeContentPbBuilder*) builder {
  return [[TeachNodeContentPbBuilder alloc] init];
}
+ (TeachNodeContentPbBuilder*) builderWithPrototype:(TeachNodeContentPb*) prototype {
  return [[TeachNodeContentPb builder] mergeFrom:prototype];
}
- (TeachNodeContentPbBuilder*) builder {
  return [TeachNodeContentPb builder];
}
- (TeachNodeContentPbBuilder*) toBuilder {
  return [TeachNodeContentPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasNodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nodeId", [NSNumber numberWithLongLong:self.nodeId]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasDataStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataStatus", [NSNumber numberWithInteger:self.dataStatus]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasNodeId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.nodeId] forKey: @"nodeId"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasDataStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dataStatus] forKey: @"dataStatus"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TeachNodeContentPb class]]) {
    return NO;
  }
  TeachNodeContentPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasNodeId == otherMessage.hasNodeId &&
      (!self.hasNodeId || self.nodeId == otherMessage.nodeId) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasDataStatus == otherMessage.hasDataStatus &&
      (!self.hasDataStatus || self.dataStatus == otherMessage.dataStatus) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasNodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.nodeId] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasDataStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dataStatus] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TeachNodeContentPbBuilder()
@property (strong) TeachNodeContentPb* resultTeachNodeContentPb;
@end

@implementation TeachNodeContentPbBuilder
@synthesize resultTeachNodeContentPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTeachNodeContentPb = [[TeachNodeContentPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTeachNodeContentPb;
}
- (TeachNodeContentPbBuilder*) clear {
  self.resultTeachNodeContentPb = [[TeachNodeContentPb alloc] init];
  return self;
}
- (TeachNodeContentPbBuilder*) clone {
  return [TeachNodeContentPb builderWithPrototype:resultTeachNodeContentPb];
}
- (TeachNodeContentPb*) defaultInstance {
  return [TeachNodeContentPb defaultInstance];
}
- (TeachNodeContentPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TeachNodeContentPb*) buildPartial {
  TeachNodeContentPb* returnMe = resultTeachNodeContentPb;
  self.resultTeachNodeContentPb = nil;
  return returnMe;
}
- (TeachNodeContentPbBuilder*) mergeFrom:(TeachNodeContentPb*) other {
  if (other == [TeachNodeContentPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasNodeId) {
    [self setNodeId:other.nodeId];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasDataStatus) {
    [self setDataStatus:other.dataStatus];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TeachNodeContentPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TeachNodeContentPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setNodeId:[input readInt64]];
        break;
      }
      case 26: {
        [self setContent:[input readString]];
        break;
      }
      case 32: {
        [self setDataStatus:[input readInt32]];
        break;
      }
      case 40: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultTeachNodeContentPb.hasId;
}
- (SInt64) id {
  return resultTeachNodeContentPb.id;
}
- (TeachNodeContentPbBuilder*) setId:(SInt64) value {
  resultTeachNodeContentPb.hasId = YES;
  resultTeachNodeContentPb.id = value;
  return self;
}
- (TeachNodeContentPbBuilder*) clearId {
  resultTeachNodeContentPb.hasId = NO;
  resultTeachNodeContentPb.id = 0L;
  return self;
}
- (BOOL) hasNodeId {
  return resultTeachNodeContentPb.hasNodeId;
}
- (SInt64) nodeId {
  return resultTeachNodeContentPb.nodeId;
}
- (TeachNodeContentPbBuilder*) setNodeId:(SInt64) value {
  resultTeachNodeContentPb.hasNodeId = YES;
  resultTeachNodeContentPb.nodeId = value;
  return self;
}
- (TeachNodeContentPbBuilder*) clearNodeId {
  resultTeachNodeContentPb.hasNodeId = NO;
  resultTeachNodeContentPb.nodeId = 0L;
  return self;
}
- (BOOL) hasContent {
  return resultTeachNodeContentPb.hasContent;
}
- (NSString*) content {
  return resultTeachNodeContentPb.content;
}
- (TeachNodeContentPbBuilder*) setContent:(NSString*) value {
  resultTeachNodeContentPb.hasContent = YES;
  resultTeachNodeContentPb.content = value;
  return self;
}
- (TeachNodeContentPbBuilder*) clearContent {
  resultTeachNodeContentPb.hasContent = NO;
  resultTeachNodeContentPb.content = @"";
  return self;
}
- (BOOL) hasDataStatus {
  return resultTeachNodeContentPb.hasDataStatus;
}
- (SInt32) dataStatus {
  return resultTeachNodeContentPb.dataStatus;
}
- (TeachNodeContentPbBuilder*) setDataStatus:(SInt32) value {
  resultTeachNodeContentPb.hasDataStatus = YES;
  resultTeachNodeContentPb.dataStatus = value;
  return self;
}
- (TeachNodeContentPbBuilder*) clearDataStatus {
  resultTeachNodeContentPb.hasDataStatus = NO;
  resultTeachNodeContentPb.dataStatus = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultTeachNodeContentPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultTeachNodeContentPb.modifiedDate;
}
- (TeachNodeContentPbBuilder*) setModifiedDate:(SInt64) value {
  resultTeachNodeContentPb.hasModifiedDate = YES;
  resultTeachNodeContentPb.modifiedDate = value;
  return self;
}
- (TeachNodeContentPbBuilder*) clearModifiedDate {
  resultTeachNodeContentPb.hasModifiedDate = NO;
  resultTeachNodeContentPb.modifiedDate = 0L;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
