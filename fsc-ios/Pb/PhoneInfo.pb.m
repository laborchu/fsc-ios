// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PhoneInfo.pb.h"
// @@protoc_insertion_point(imports)

@implementation PhoneInfoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PhoneInfoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PhoneInfoPb ()
@property (strong) NSString* deviceId;
@property (strong) NSString* subscriberId;
@property (strong) NSString* model;
@property (strong) NSString* brand;
@property (strong) NSString* number;
@property (strong) NSString* appVersion;
@property SInt32 osVersion;
@end

@implementation PhoneInfoPb

- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasSubscriberId {
  return !!hasSubscriberId_;
}
- (void) setHasSubscriberId:(BOOL) _value_ {
  hasSubscriberId_ = !!_value_;
}
@synthesize subscriberId;
- (BOOL) hasModel {
  return !!hasModel_;
}
- (void) setHasModel:(BOOL) _value_ {
  hasModel_ = !!_value_;
}
@synthesize model;
- (BOOL) hasBrand {
  return !!hasBrand_;
}
- (void) setHasBrand:(BOOL) _value_ {
  hasBrand_ = !!_value_;
}
@synthesize brand;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) _value_ {
  hasNumber_ = !!_value_;
}
@synthesize number;
- (BOOL) hasAppVersion {
  return !!hasAppVersion_;
}
- (void) setHasAppVersion:(BOOL) _value_ {
  hasAppVersion_ = !!_value_;
}
@synthesize appVersion;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) _value_ {
  hasOsVersion_ = !!_value_;
}
@synthesize osVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.deviceId = @"";
    self.subscriberId = @"";
    self.model = @"";
    self.brand = @"";
    self.number = @"";
    self.appVersion = @"";
    self.osVersion = 0;
  }
  return self;
}
static PhoneInfoPb* defaultPhoneInfoPbInstance = nil;
+ (void) initialize {
  if (self == [PhoneInfoPb class]) {
    defaultPhoneInfoPbInstance = [[PhoneInfoPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPhoneInfoPbInstance;
}
- (instancetype) defaultInstance {
  return defaultPhoneInfoPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDeviceId) {
    [output writeString:1 value:self.deviceId];
  }
  if (self.hasSubscriberId) {
    [output writeString:2 value:self.subscriberId];
  }
  if (self.hasModel) {
    [output writeString:3 value:self.model];
  }
  if (self.hasBrand) {
    [output writeString:4 value:self.brand];
  }
  if (self.hasNumber) {
    [output writeString:5 value:self.number];
  }
  if (self.hasAppVersion) {
    [output writeString:6 value:self.appVersion];
  }
  if (self.hasOsVersion) {
    [output writeInt32:7 value:self.osVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDeviceId) {
    size_ += computeStringSize(1, self.deviceId);
  }
  if (self.hasSubscriberId) {
    size_ += computeStringSize(2, self.subscriberId);
  }
  if (self.hasModel) {
    size_ += computeStringSize(3, self.model);
  }
  if (self.hasBrand) {
    size_ += computeStringSize(4, self.brand);
  }
  if (self.hasNumber) {
    size_ += computeStringSize(5, self.number);
  }
  if (self.hasAppVersion) {
    size_ += computeStringSize(6, self.appVersion);
  }
  if (self.hasOsVersion) {
    size_ += computeInt32Size(7, self.osVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PhoneInfoPb*) parseFromData:(NSData*) data {
  return (PhoneInfoPb*)[[[PhoneInfoPb builder] mergeFromData:data] build];
}
+ (PhoneInfoPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneInfoPb*)[[[PhoneInfoPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PhoneInfoPb*) parseFromInputStream:(NSInputStream*) input {
  return (PhoneInfoPb*)[[[PhoneInfoPb builder] mergeFromInputStream:input] build];
}
+ (PhoneInfoPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneInfoPb*)[[[PhoneInfoPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneInfoPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PhoneInfoPb*)[[[PhoneInfoPb builder] mergeFromCodedInputStream:input] build];
}
+ (PhoneInfoPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneInfoPb*)[[[PhoneInfoPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneInfoPbBuilder*) builder {
  return [[PhoneInfoPbBuilder alloc] init];
}
+ (PhoneInfoPbBuilder*) builderWithPrototype:(PhoneInfoPb*) prototype {
  return [[PhoneInfoPb builder] mergeFrom:prototype];
}
- (PhoneInfoPbBuilder*) builder {
  return [PhoneInfoPb builder];
}
- (PhoneInfoPbBuilder*) toBuilder {
  return [PhoneInfoPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasSubscriberId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subscriberId", self.subscriberId];
  }
  if (self.hasModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"model", self.model];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  if (self.hasNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"number", self.number];
  }
  if (self.hasAppVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appVersion", self.appVersion];
  }
  if (self.hasOsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"osVersion", [NSNumber numberWithInteger:self.osVersion]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasSubscriberId) {
    [dictionary setObject: self.subscriberId forKey: @"subscriberId"];
  }
  if (self.hasModel) {
    [dictionary setObject: self.model forKey: @"model"];
  }
  if (self.hasBrand) {
    [dictionary setObject: self.brand forKey: @"brand"];
  }
  if (self.hasNumber) {
    [dictionary setObject: self.number forKey: @"number"];
  }
  if (self.hasAppVersion) {
    [dictionary setObject: self.appVersion forKey: @"appVersion"];
  }
  if (self.hasOsVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.osVersion] forKey: @"osVersion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PhoneInfoPb class]]) {
    return NO;
  }
  PhoneInfoPb *otherMessage = other;
  return
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasSubscriberId == otherMessage.hasSubscriberId &&
      (!self.hasSubscriberId || [self.subscriberId isEqual:otherMessage.subscriberId]) &&
      self.hasModel == otherMessage.hasModel &&
      (!self.hasModel || [self.model isEqual:otherMessage.model]) &&
      self.hasBrand == otherMessage.hasBrand &&
      (!self.hasBrand || [self.brand isEqual:otherMessage.brand]) &&
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || [self.number isEqual:otherMessage.number]) &&
      self.hasAppVersion == otherMessage.hasAppVersion &&
      (!self.hasAppVersion || [self.appVersion isEqual:otherMessage.appVersion]) &&
      self.hasOsVersion == otherMessage.hasOsVersion &&
      (!self.hasOsVersion || self.osVersion == otherMessage.osVersion) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasSubscriberId) {
    hashCode = hashCode * 31 + [self.subscriberId hash];
  }
  if (self.hasModel) {
    hashCode = hashCode * 31 + [self.model hash];
  }
  if (self.hasBrand) {
    hashCode = hashCode * 31 + [self.brand hash];
  }
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [self.number hash];
  }
  if (self.hasAppVersion) {
    hashCode = hashCode * 31 + [self.appVersion hash];
  }
  if (self.hasOsVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.osVersion] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PhoneInfoPbBuilder()
@property (strong) PhoneInfoPb* resultPhoneInfoPb;
@end

@implementation PhoneInfoPbBuilder
@synthesize resultPhoneInfoPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPhoneInfoPb = [[PhoneInfoPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPhoneInfoPb;
}
- (PhoneInfoPbBuilder*) clear {
  self.resultPhoneInfoPb = [[PhoneInfoPb alloc] init];
  return self;
}
- (PhoneInfoPbBuilder*) clone {
  return [PhoneInfoPb builderWithPrototype:resultPhoneInfoPb];
}
- (PhoneInfoPb*) defaultInstance {
  return [PhoneInfoPb defaultInstance];
}
- (PhoneInfoPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PhoneInfoPb*) buildPartial {
  PhoneInfoPb* returnMe = resultPhoneInfoPb;
  self.resultPhoneInfoPb = nil;
  return returnMe;
}
- (PhoneInfoPbBuilder*) mergeFrom:(PhoneInfoPb*) other {
  if (other == [PhoneInfoPb defaultInstance]) {
    return self;
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasSubscriberId) {
    [self setSubscriberId:other.subscriberId];
  }
  if (other.hasModel) {
    [self setModel:other.model];
  }
  if (other.hasBrand) {
    [self setBrand:other.brand];
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasAppVersion) {
    [self setAppVersion:other.appVersion];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PhoneInfoPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PhoneInfoPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 18: {
        [self setSubscriberId:[input readString]];
        break;
      }
      case 26: {
        [self setModel:[input readString]];
        break;
      }
      case 34: {
        [self setBrand:[input readString]];
        break;
      }
      case 42: {
        [self setNumber:[input readString]];
        break;
      }
      case 50: {
        [self setAppVersion:[input readString]];
        break;
      }
      case 56: {
        [self setOsVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDeviceId {
  return resultPhoneInfoPb.hasDeviceId;
}
- (NSString*) deviceId {
  return resultPhoneInfoPb.deviceId;
}
- (PhoneInfoPbBuilder*) setDeviceId:(NSString*) value {
  resultPhoneInfoPb.hasDeviceId = YES;
  resultPhoneInfoPb.deviceId = value;
  return self;
}
- (PhoneInfoPbBuilder*) clearDeviceId {
  resultPhoneInfoPb.hasDeviceId = NO;
  resultPhoneInfoPb.deviceId = @"";
  return self;
}
- (BOOL) hasSubscriberId {
  return resultPhoneInfoPb.hasSubscriberId;
}
- (NSString*) subscriberId {
  return resultPhoneInfoPb.subscriberId;
}
- (PhoneInfoPbBuilder*) setSubscriberId:(NSString*) value {
  resultPhoneInfoPb.hasSubscriberId = YES;
  resultPhoneInfoPb.subscriberId = value;
  return self;
}
- (PhoneInfoPbBuilder*) clearSubscriberId {
  resultPhoneInfoPb.hasSubscriberId = NO;
  resultPhoneInfoPb.subscriberId = @"";
  return self;
}
- (BOOL) hasModel {
  return resultPhoneInfoPb.hasModel;
}
- (NSString*) model {
  return resultPhoneInfoPb.model;
}
- (PhoneInfoPbBuilder*) setModel:(NSString*) value {
  resultPhoneInfoPb.hasModel = YES;
  resultPhoneInfoPb.model = value;
  return self;
}
- (PhoneInfoPbBuilder*) clearModel {
  resultPhoneInfoPb.hasModel = NO;
  resultPhoneInfoPb.model = @"";
  return self;
}
- (BOOL) hasBrand {
  return resultPhoneInfoPb.hasBrand;
}
- (NSString*) brand {
  return resultPhoneInfoPb.brand;
}
- (PhoneInfoPbBuilder*) setBrand:(NSString*) value {
  resultPhoneInfoPb.hasBrand = YES;
  resultPhoneInfoPb.brand = value;
  return self;
}
- (PhoneInfoPbBuilder*) clearBrand {
  resultPhoneInfoPb.hasBrand = NO;
  resultPhoneInfoPb.brand = @"";
  return self;
}
- (BOOL) hasNumber {
  return resultPhoneInfoPb.hasNumber;
}
- (NSString*) number {
  return resultPhoneInfoPb.number;
}
- (PhoneInfoPbBuilder*) setNumber:(NSString*) value {
  resultPhoneInfoPb.hasNumber = YES;
  resultPhoneInfoPb.number = value;
  return self;
}
- (PhoneInfoPbBuilder*) clearNumber {
  resultPhoneInfoPb.hasNumber = NO;
  resultPhoneInfoPb.number = @"";
  return self;
}
- (BOOL) hasAppVersion {
  return resultPhoneInfoPb.hasAppVersion;
}
- (NSString*) appVersion {
  return resultPhoneInfoPb.appVersion;
}
- (PhoneInfoPbBuilder*) setAppVersion:(NSString*) value {
  resultPhoneInfoPb.hasAppVersion = YES;
  resultPhoneInfoPb.appVersion = value;
  return self;
}
- (PhoneInfoPbBuilder*) clearAppVersion {
  resultPhoneInfoPb.hasAppVersion = NO;
  resultPhoneInfoPb.appVersion = @"";
  return self;
}
- (BOOL) hasOsVersion {
  return resultPhoneInfoPb.hasOsVersion;
}
- (SInt32) osVersion {
  return resultPhoneInfoPb.osVersion;
}
- (PhoneInfoPbBuilder*) setOsVersion:(SInt32) value {
  resultPhoneInfoPb.hasOsVersion = YES;
  resultPhoneInfoPb.osVersion = value;
  return self;
}
- (PhoneInfoPbBuilder*) clearOsVersion {
  resultPhoneInfoPb.hasOsVersion = NO;
  resultPhoneInfoPb.osVersion = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
