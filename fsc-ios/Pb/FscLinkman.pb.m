// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscLinkman.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscLinkmanRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscLinkmanRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface LinkmanListPb ()
@property SInt64 userId;
@property SInt64 timestamp;
@property SInt64 modifiedDate;
@property (strong) NSMutableArray * linkmanArray;
@end

@implementation LinkmanListPb

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
@synthesize linkmanArray;
@dynamic linkman;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.timestamp = 0L;
    self.modifiedDate = 0L;
  }
  return self;
}
static LinkmanListPb* defaultLinkmanListPbInstance = nil;
+ (void) initialize {
  if (self == [LinkmanListPb class]) {
    defaultLinkmanListPbInstance = [[LinkmanListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLinkmanListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultLinkmanListPbInstance;
}
- (NSArray *)linkman {
  return linkmanArray;
}
- (LinkmanPb*)linkmanAtIndex:(NSUInteger)index {
  return [linkmanArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt64:1 value:self.userId];
  }
  if (self.hasTimestamp) {
    [output writeInt64:2 value:self.timestamp];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:3 value:self.modifiedDate];
  }
  [self.linkmanArray enumerateObjectsUsingBlock:^(LinkmanPb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeInt64Size(1, self.userId);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(2, self.timestamp);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(3, self.modifiedDate);
  }
  [self.linkmanArray enumerateObjectsUsingBlock:^(LinkmanPb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LinkmanListPb*) parseFromData:(NSData*) data {
  return (LinkmanListPb*)[[[LinkmanListPb builder] mergeFromData:data] build];
}
+ (LinkmanListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkmanListPb*)[[[LinkmanListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LinkmanListPb*) parseFromInputStream:(NSInputStream*) input {
  return (LinkmanListPb*)[[[LinkmanListPb builder] mergeFromInputStream:input] build];
}
+ (LinkmanListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkmanListPb*)[[[LinkmanListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkmanListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LinkmanListPb*)[[[LinkmanListPb builder] mergeFromCodedInputStream:input] build];
}
+ (LinkmanListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkmanListPb*)[[[LinkmanListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkmanListPbBuilder*) builder {
  return [[LinkmanListPbBuilder alloc] init];
}
+ (LinkmanListPbBuilder*) builderWithPrototype:(LinkmanListPb*) prototype {
  return [[LinkmanListPb builder] mergeFrom:prototype];
}
- (LinkmanListPbBuilder*) builder {
  return [LinkmanListPb builder];
}
- (LinkmanListPbBuilder*) toBuilder {
  return [LinkmanListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  [self.linkmanArray enumerateObjectsUsingBlock:^(LinkmanPb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"linkman"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  for (LinkmanPb* element in self.linkmanArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"linkman"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LinkmanListPb class]]) {
    return NO;
  }
  LinkmanListPb *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      [self.linkmanArray isEqualToArray:otherMessage.linkmanArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  [self.linkmanArray enumerateObjectsUsingBlock:^(LinkmanPb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LinkmanListPbBuilder()
@property (strong) LinkmanListPb* resultLinkmanListPb;
@end

@implementation LinkmanListPbBuilder
@synthesize resultLinkmanListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLinkmanListPb = [[LinkmanListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLinkmanListPb;
}
- (LinkmanListPbBuilder*) clear {
  self.resultLinkmanListPb = [[LinkmanListPb alloc] init];
  return self;
}
- (LinkmanListPbBuilder*) clone {
  return [LinkmanListPb builderWithPrototype:resultLinkmanListPb];
}
- (LinkmanListPb*) defaultInstance {
  return [LinkmanListPb defaultInstance];
}
- (LinkmanListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LinkmanListPb*) buildPartial {
  LinkmanListPb* returnMe = resultLinkmanListPb;
  self.resultLinkmanListPb = nil;
  return returnMe;
}
- (LinkmanListPbBuilder*) mergeFrom:(LinkmanListPb*) other {
  if (other == [LinkmanListPb defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.linkmanArray.count > 0) {
    if (resultLinkmanListPb.linkmanArray == nil) {
      resultLinkmanListPb.linkmanArray = [[NSMutableArray alloc] initWithArray:other.linkmanArray];
    } else {
      [resultLinkmanListPb.linkmanArray addObjectsFromArray:other.linkmanArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LinkmanListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LinkmanListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt64]];
        break;
      }
      case 16: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 24: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 34: {
        LinkmanPbBuilder* subBuilder = [LinkmanPb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLinkman:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultLinkmanListPb.hasUserId;
}
- (SInt64) userId {
  return resultLinkmanListPb.userId;
}
- (LinkmanListPbBuilder*) setUserId:(SInt64) value {
  resultLinkmanListPb.hasUserId = YES;
  resultLinkmanListPb.userId = value;
  return self;
}
- (LinkmanListPbBuilder*) clearUserId {
  resultLinkmanListPb.hasUserId = NO;
  resultLinkmanListPb.userId = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultLinkmanListPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultLinkmanListPb.timestamp;
}
- (LinkmanListPbBuilder*) setTimestamp:(SInt64) value {
  resultLinkmanListPb.hasTimestamp = YES;
  resultLinkmanListPb.timestamp = value;
  return self;
}
- (LinkmanListPbBuilder*) clearTimestamp {
  resultLinkmanListPb.hasTimestamp = NO;
  resultLinkmanListPb.timestamp = 0L;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultLinkmanListPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultLinkmanListPb.modifiedDate;
}
- (LinkmanListPbBuilder*) setModifiedDate:(SInt64) value {
  resultLinkmanListPb.hasModifiedDate = YES;
  resultLinkmanListPb.modifiedDate = value;
  return self;
}
- (LinkmanListPbBuilder*) clearModifiedDate {
  resultLinkmanListPb.hasModifiedDate = NO;
  resultLinkmanListPb.modifiedDate = 0L;
  return self;
}
- (NSMutableArray *)linkman {
  return resultLinkmanListPb.linkmanArray;
}
- (LinkmanPb*)linkmanAtIndex:(NSUInteger)index {
  return [resultLinkmanListPb linkmanAtIndex:index];
}
- (LinkmanListPbBuilder *)addLinkman:(LinkmanPb*)value {
  if (resultLinkmanListPb.linkmanArray == nil) {
    resultLinkmanListPb.linkmanArray = [[NSMutableArray alloc]init];
  }
  [resultLinkmanListPb.linkmanArray addObject:value];
  return self;
}
- (LinkmanListPbBuilder *)setLinkmanArray:(NSArray *)array {
  resultLinkmanListPb.linkmanArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (LinkmanListPbBuilder *)clearLinkman {
  resultLinkmanListPb.linkmanArray = nil;
  return self;
}
@end

@interface LinkmanPb ()
@property SInt64 id;
@property (strong) NSString* uuid;
@property (strong) NSString* username;
@property (strong) NSString* name;
@property (strong) NSString* portrait;
@property SInt32 userType;
@property SInt32 gender;
@property (strong) NSString* email;
@property SInt64 createdDate;
@property (strong) NSString* schoolName;
@property (strong) NSString* mobile;
@property (strong) NSString* title;
@property (strong) NSString* subjectName;
@property (strong) NSData* file;
@property SInt32 status;
@property SInt64 modifiedDate;
@property SInt64 timestamp;
@end

@implementation LinkmanPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) _value_ {
  hasUsername_ = !!_value_;
}
@synthesize username;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasPortrait {
  return !!hasPortrait_;
}
- (void) setHasPortrait:(BOOL) _value_ {
  hasPortrait_ = !!_value_;
}
@synthesize portrait;
- (BOOL) hasUserType {
  return !!hasUserType_;
}
- (void) setHasUserType:(BOOL) _value_ {
  hasUserType_ = !!_value_;
}
@synthesize userType;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
@synthesize gender;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) _value_ {
  hasEmail_ = !!_value_;
}
@synthesize email;
- (BOOL) hasCreatedDate {
  return !!hasCreatedDate_;
}
- (void) setHasCreatedDate:(BOOL) _value_ {
  hasCreatedDate_ = !!_value_;
}
@synthesize createdDate;
- (BOOL) hasSchoolName {
  return !!hasSchoolName_;
}
- (void) setHasSchoolName:(BOOL) _value_ {
  hasSchoolName_ = !!_value_;
}
@synthesize schoolName;
- (BOOL) hasMobile {
  return !!hasMobile_;
}
- (void) setHasMobile:(BOOL) _value_ {
  hasMobile_ = !!_value_;
}
@synthesize mobile;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasSubjectName {
  return !!hasSubjectName_;
}
- (void) setHasSubjectName:(BOOL) _value_ {
  hasSubjectName_ = !!_value_;
}
@synthesize subjectName;
- (BOOL) hasFile {
  return !!hasFile_;
}
- (void) setHasFile:(BOOL) _value_ {
  hasFile_ = !!_value_;
}
@synthesize file;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.uuid = @"";
    self.username = @"";
    self.name = @"";
    self.portrait = @"";
    self.userType = 0;
    self.gender = 0;
    self.email = @"";
    self.createdDate = 0L;
    self.schoolName = @"";
    self.mobile = @"";
    self.title = @"";
    self.subjectName = @"";
    self.file = [NSData data];
    self.status = 0;
    self.modifiedDate = 0L;
    self.timestamp = 0L;
  }
  return self;
}
static LinkmanPb* defaultLinkmanPbInstance = nil;
+ (void) initialize {
  if (self == [LinkmanPb class]) {
    defaultLinkmanPbInstance = [[LinkmanPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLinkmanPbInstance;
}
- (instancetype) defaultInstance {
  return defaultLinkmanPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasUuid) {
    [output writeString:2 value:self.uuid];
  }
  if (self.hasUsername) {
    [output writeString:3 value:self.username];
  }
  if (self.hasName) {
    [output writeString:4 value:self.name];
  }
  if (self.hasPortrait) {
    [output writeString:5 value:self.portrait];
  }
  if (self.hasUserType) {
    [output writeInt32:6 value:self.userType];
  }
  if (self.hasGender) {
    [output writeInt32:7 value:self.gender];
  }
  if (self.hasEmail) {
    [output writeString:8 value:self.email];
  }
  if (self.hasCreatedDate) {
    [output writeInt64:9 value:self.createdDate];
  }
  if (self.hasSchoolName) {
    [output writeString:10 value:self.schoolName];
  }
  if (self.hasMobile) {
    [output writeString:11 value:self.mobile];
  }
  if (self.hasTitle) {
    [output writeString:12 value:self.title];
  }
  if (self.hasSubjectName) {
    [output writeString:13 value:self.subjectName];
  }
  if (self.hasFile) {
    [output writeData:14 value:self.file];
  }
  if (self.hasStatus) {
    [output writeInt32:15 value:self.status];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:16 value:self.modifiedDate];
  }
  if (self.hasTimestamp) {
    [output writeInt64:17 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(2, self.uuid);
  }
  if (self.hasUsername) {
    size_ += computeStringSize(3, self.username);
  }
  if (self.hasName) {
    size_ += computeStringSize(4, self.name);
  }
  if (self.hasPortrait) {
    size_ += computeStringSize(5, self.portrait);
  }
  if (self.hasUserType) {
    size_ += computeInt32Size(6, self.userType);
  }
  if (self.hasGender) {
    size_ += computeInt32Size(7, self.gender);
  }
  if (self.hasEmail) {
    size_ += computeStringSize(8, self.email);
  }
  if (self.hasCreatedDate) {
    size_ += computeInt64Size(9, self.createdDate);
  }
  if (self.hasSchoolName) {
    size_ += computeStringSize(10, self.schoolName);
  }
  if (self.hasMobile) {
    size_ += computeStringSize(11, self.mobile);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(12, self.title);
  }
  if (self.hasSubjectName) {
    size_ += computeStringSize(13, self.subjectName);
  }
  if (self.hasFile) {
    size_ += computeDataSize(14, self.file);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(15, self.status);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(16, self.modifiedDate);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(17, self.timestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LinkmanPb*) parseFromData:(NSData*) data {
  return (LinkmanPb*)[[[LinkmanPb builder] mergeFromData:data] build];
}
+ (LinkmanPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkmanPb*)[[[LinkmanPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LinkmanPb*) parseFromInputStream:(NSInputStream*) input {
  return (LinkmanPb*)[[[LinkmanPb builder] mergeFromInputStream:input] build];
}
+ (LinkmanPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkmanPb*)[[[LinkmanPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkmanPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LinkmanPb*)[[[LinkmanPb builder] mergeFromCodedInputStream:input] build];
}
+ (LinkmanPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkmanPb*)[[[LinkmanPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkmanPbBuilder*) builder {
  return [[LinkmanPbBuilder alloc] init];
}
+ (LinkmanPbBuilder*) builderWithPrototype:(LinkmanPb*) prototype {
  return [[LinkmanPb builder] mergeFrom:prototype];
}
- (LinkmanPbBuilder*) builder {
  return [LinkmanPb builder];
}
- (LinkmanPbBuilder*) toBuilder {
  return [LinkmanPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasPortrait) {
    [output appendFormat:@"%@%@: %@\n", indent, @"portrait", self.portrait];
  }
  if (self.hasUserType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userType", [NSNumber numberWithInteger:self.userType]];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithInteger:self.gender]];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasCreatedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdDate", [NSNumber numberWithLongLong:self.createdDate]];
  }
  if (self.hasSchoolName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolName", self.schoolName];
  }
  if (self.hasMobile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mobile", self.mobile];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasSubjectName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subjectName", self.subjectName];
  }
  if (self.hasFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"file", self.file];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasUsername) {
    [dictionary setObject: self.username forKey: @"username"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasPortrait) {
    [dictionary setObject: self.portrait forKey: @"portrait"];
  }
  if (self.hasUserType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userType] forKey: @"userType"];
  }
  if (self.hasGender) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gender] forKey: @"gender"];
  }
  if (self.hasEmail) {
    [dictionary setObject: self.email forKey: @"email"];
  }
  if (self.hasCreatedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.createdDate] forKey: @"createdDate"];
  }
  if (self.hasSchoolName) {
    [dictionary setObject: self.schoolName forKey: @"schoolName"];
  }
  if (self.hasMobile) {
    [dictionary setObject: self.mobile forKey: @"mobile"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasSubjectName) {
    [dictionary setObject: self.subjectName forKey: @"subjectName"];
  }
  if (self.hasFile) {
    [dictionary setObject: self.file forKey: @"file"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LinkmanPb class]]) {
    return NO;
  }
  LinkmanPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasPortrait == otherMessage.hasPortrait &&
      (!self.hasPortrait || [self.portrait isEqual:otherMessage.portrait]) &&
      self.hasUserType == otherMessage.hasUserType &&
      (!self.hasUserType || self.userType == otherMessage.userType) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasCreatedDate == otherMessage.hasCreatedDate &&
      (!self.hasCreatedDate || self.createdDate == otherMessage.createdDate) &&
      self.hasSchoolName == otherMessage.hasSchoolName &&
      (!self.hasSchoolName || [self.schoolName isEqual:otherMessage.schoolName]) &&
      self.hasMobile == otherMessage.hasMobile &&
      (!self.hasMobile || [self.mobile isEqual:otherMessage.mobile]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasSubjectName == otherMessage.hasSubjectName &&
      (!self.hasSubjectName || [self.subjectName isEqual:otherMessage.subjectName]) &&
      self.hasFile == otherMessage.hasFile &&
      (!self.hasFile || [self.file isEqual:otherMessage.file]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasPortrait) {
    hashCode = hashCode * 31 + [self.portrait hash];
  }
  if (self.hasUserType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userType] hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gender] hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasCreatedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdDate] hash];
  }
  if (self.hasSchoolName) {
    hashCode = hashCode * 31 + [self.schoolName hash];
  }
  if (self.hasMobile) {
    hashCode = hashCode * 31 + [self.mobile hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasSubjectName) {
    hashCode = hashCode * 31 + [self.subjectName hash];
  }
  if (self.hasFile) {
    hashCode = hashCode * 31 + [self.file hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LinkmanPbBuilder()
@property (strong) LinkmanPb* resultLinkmanPb;
@end

@implementation LinkmanPbBuilder
@synthesize resultLinkmanPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLinkmanPb = [[LinkmanPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLinkmanPb;
}
- (LinkmanPbBuilder*) clear {
  self.resultLinkmanPb = [[LinkmanPb alloc] init];
  return self;
}
- (LinkmanPbBuilder*) clone {
  return [LinkmanPb builderWithPrototype:resultLinkmanPb];
}
- (LinkmanPb*) defaultInstance {
  return [LinkmanPb defaultInstance];
}
- (LinkmanPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LinkmanPb*) buildPartial {
  LinkmanPb* returnMe = resultLinkmanPb;
  self.resultLinkmanPb = nil;
  return returnMe;
}
- (LinkmanPbBuilder*) mergeFrom:(LinkmanPb*) other {
  if (other == [LinkmanPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasPortrait) {
    [self setPortrait:other.portrait];
  }
  if (other.hasUserType) {
    [self setUserType:other.userType];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasCreatedDate) {
    [self setCreatedDate:other.createdDate];
  }
  if (other.hasSchoolName) {
    [self setSchoolName:other.schoolName];
  }
  if (other.hasMobile) {
    [self setMobile:other.mobile];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasSubjectName) {
    [self setSubjectName:other.subjectName];
  }
  if (other.hasFile) {
    [self setFile:other.file];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LinkmanPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LinkmanPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 18: {
        [self setUuid:[input readString]];
        break;
      }
      case 26: {
        [self setUsername:[input readString]];
        break;
      }
      case 34: {
        [self setName:[input readString]];
        break;
      }
      case 42: {
        [self setPortrait:[input readString]];
        break;
      }
      case 48: {
        [self setUserType:[input readInt32]];
        break;
      }
      case 56: {
        [self setGender:[input readInt32]];
        break;
      }
      case 66: {
        [self setEmail:[input readString]];
        break;
      }
      case 72: {
        [self setCreatedDate:[input readInt64]];
        break;
      }
      case 82: {
        [self setSchoolName:[input readString]];
        break;
      }
      case 90: {
        [self setMobile:[input readString]];
        break;
      }
      case 98: {
        [self setTitle:[input readString]];
        break;
      }
      case 106: {
        [self setSubjectName:[input readString]];
        break;
      }
      case 114: {
        [self setFile:[input readData]];
        break;
      }
      case 120: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 128: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 136: {
        [self setTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultLinkmanPb.hasId;
}
- (SInt64) id {
  return resultLinkmanPb.id;
}
- (LinkmanPbBuilder*) setId:(SInt64) value {
  resultLinkmanPb.hasId = YES;
  resultLinkmanPb.id = value;
  return self;
}
- (LinkmanPbBuilder*) clearId {
  resultLinkmanPb.hasId = NO;
  resultLinkmanPb.id = 0L;
  return self;
}
- (BOOL) hasUuid {
  return resultLinkmanPb.hasUuid;
}
- (NSString*) uuid {
  return resultLinkmanPb.uuid;
}
- (LinkmanPbBuilder*) setUuid:(NSString*) value {
  resultLinkmanPb.hasUuid = YES;
  resultLinkmanPb.uuid = value;
  return self;
}
- (LinkmanPbBuilder*) clearUuid {
  resultLinkmanPb.hasUuid = NO;
  resultLinkmanPb.uuid = @"";
  return self;
}
- (BOOL) hasUsername {
  return resultLinkmanPb.hasUsername;
}
- (NSString*) username {
  return resultLinkmanPb.username;
}
- (LinkmanPbBuilder*) setUsername:(NSString*) value {
  resultLinkmanPb.hasUsername = YES;
  resultLinkmanPb.username = value;
  return self;
}
- (LinkmanPbBuilder*) clearUsername {
  resultLinkmanPb.hasUsername = NO;
  resultLinkmanPb.username = @"";
  return self;
}
- (BOOL) hasName {
  return resultLinkmanPb.hasName;
}
- (NSString*) name {
  return resultLinkmanPb.name;
}
- (LinkmanPbBuilder*) setName:(NSString*) value {
  resultLinkmanPb.hasName = YES;
  resultLinkmanPb.name = value;
  return self;
}
- (LinkmanPbBuilder*) clearName {
  resultLinkmanPb.hasName = NO;
  resultLinkmanPb.name = @"";
  return self;
}
- (BOOL) hasPortrait {
  return resultLinkmanPb.hasPortrait;
}
- (NSString*) portrait {
  return resultLinkmanPb.portrait;
}
- (LinkmanPbBuilder*) setPortrait:(NSString*) value {
  resultLinkmanPb.hasPortrait = YES;
  resultLinkmanPb.portrait = value;
  return self;
}
- (LinkmanPbBuilder*) clearPortrait {
  resultLinkmanPb.hasPortrait = NO;
  resultLinkmanPb.portrait = @"";
  return self;
}
- (BOOL) hasUserType {
  return resultLinkmanPb.hasUserType;
}
- (SInt32) userType {
  return resultLinkmanPb.userType;
}
- (LinkmanPbBuilder*) setUserType:(SInt32) value {
  resultLinkmanPb.hasUserType = YES;
  resultLinkmanPb.userType = value;
  return self;
}
- (LinkmanPbBuilder*) clearUserType {
  resultLinkmanPb.hasUserType = NO;
  resultLinkmanPb.userType = 0;
  return self;
}
- (BOOL) hasGender {
  return resultLinkmanPb.hasGender;
}
- (SInt32) gender {
  return resultLinkmanPb.gender;
}
- (LinkmanPbBuilder*) setGender:(SInt32) value {
  resultLinkmanPb.hasGender = YES;
  resultLinkmanPb.gender = value;
  return self;
}
- (LinkmanPbBuilder*) clearGender {
  resultLinkmanPb.hasGender = NO;
  resultLinkmanPb.gender = 0;
  return self;
}
- (BOOL) hasEmail {
  return resultLinkmanPb.hasEmail;
}
- (NSString*) email {
  return resultLinkmanPb.email;
}
- (LinkmanPbBuilder*) setEmail:(NSString*) value {
  resultLinkmanPb.hasEmail = YES;
  resultLinkmanPb.email = value;
  return self;
}
- (LinkmanPbBuilder*) clearEmail {
  resultLinkmanPb.hasEmail = NO;
  resultLinkmanPb.email = @"";
  return self;
}
- (BOOL) hasCreatedDate {
  return resultLinkmanPb.hasCreatedDate;
}
- (SInt64) createdDate {
  return resultLinkmanPb.createdDate;
}
- (LinkmanPbBuilder*) setCreatedDate:(SInt64) value {
  resultLinkmanPb.hasCreatedDate = YES;
  resultLinkmanPb.createdDate = value;
  return self;
}
- (LinkmanPbBuilder*) clearCreatedDate {
  resultLinkmanPb.hasCreatedDate = NO;
  resultLinkmanPb.createdDate = 0L;
  return self;
}
- (BOOL) hasSchoolName {
  return resultLinkmanPb.hasSchoolName;
}
- (NSString*) schoolName {
  return resultLinkmanPb.schoolName;
}
- (LinkmanPbBuilder*) setSchoolName:(NSString*) value {
  resultLinkmanPb.hasSchoolName = YES;
  resultLinkmanPb.schoolName = value;
  return self;
}
- (LinkmanPbBuilder*) clearSchoolName {
  resultLinkmanPb.hasSchoolName = NO;
  resultLinkmanPb.schoolName = @"";
  return self;
}
- (BOOL) hasMobile {
  return resultLinkmanPb.hasMobile;
}
- (NSString*) mobile {
  return resultLinkmanPb.mobile;
}
- (LinkmanPbBuilder*) setMobile:(NSString*) value {
  resultLinkmanPb.hasMobile = YES;
  resultLinkmanPb.mobile = value;
  return self;
}
- (LinkmanPbBuilder*) clearMobile {
  resultLinkmanPb.hasMobile = NO;
  resultLinkmanPb.mobile = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultLinkmanPb.hasTitle;
}
- (NSString*) title {
  return resultLinkmanPb.title;
}
- (LinkmanPbBuilder*) setTitle:(NSString*) value {
  resultLinkmanPb.hasTitle = YES;
  resultLinkmanPb.title = value;
  return self;
}
- (LinkmanPbBuilder*) clearTitle {
  resultLinkmanPb.hasTitle = NO;
  resultLinkmanPb.title = @"";
  return self;
}
- (BOOL) hasSubjectName {
  return resultLinkmanPb.hasSubjectName;
}
- (NSString*) subjectName {
  return resultLinkmanPb.subjectName;
}
- (LinkmanPbBuilder*) setSubjectName:(NSString*) value {
  resultLinkmanPb.hasSubjectName = YES;
  resultLinkmanPb.subjectName = value;
  return self;
}
- (LinkmanPbBuilder*) clearSubjectName {
  resultLinkmanPb.hasSubjectName = NO;
  resultLinkmanPb.subjectName = @"";
  return self;
}
- (BOOL) hasFile {
  return resultLinkmanPb.hasFile;
}
- (NSData*) file {
  return resultLinkmanPb.file;
}
- (LinkmanPbBuilder*) setFile:(NSData*) value {
  resultLinkmanPb.hasFile = YES;
  resultLinkmanPb.file = value;
  return self;
}
- (LinkmanPbBuilder*) clearFile {
  resultLinkmanPb.hasFile = NO;
  resultLinkmanPb.file = [NSData data];
  return self;
}
- (BOOL) hasStatus {
  return resultLinkmanPb.hasStatus;
}
- (SInt32) status {
  return resultLinkmanPb.status;
}
- (LinkmanPbBuilder*) setStatus:(SInt32) value {
  resultLinkmanPb.hasStatus = YES;
  resultLinkmanPb.status = value;
  return self;
}
- (LinkmanPbBuilder*) clearStatus {
  resultLinkmanPb.hasStatus = NO;
  resultLinkmanPb.status = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultLinkmanPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultLinkmanPb.modifiedDate;
}
- (LinkmanPbBuilder*) setModifiedDate:(SInt64) value {
  resultLinkmanPb.hasModifiedDate = YES;
  resultLinkmanPb.modifiedDate = value;
  return self;
}
- (LinkmanPbBuilder*) clearModifiedDate {
  resultLinkmanPb.hasModifiedDate = NO;
  resultLinkmanPb.modifiedDate = 0L;
  return self;
}
- (BOOL) hasTimestamp {
  return resultLinkmanPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultLinkmanPb.timestamp;
}
- (LinkmanPbBuilder*) setTimestamp:(SInt64) value {
  resultLinkmanPb.hasTimestamp = YES;
  resultLinkmanPb.timestamp = value;
  return self;
}
- (LinkmanPbBuilder*) clearTimestamp {
  resultLinkmanPb.hasTimestamp = NO;
  resultLinkmanPb.timestamp = 0L;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
