// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscDiskFile.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscDiskFileRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscDiskFileRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface DiskFileListPb ()
@property (strong) NSMutableArray * diskFileArray;
@end

@implementation DiskFileListPb

@synthesize diskFileArray;
@dynamic diskFile;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static DiskFileListPb* defaultDiskFileListPbInstance = nil;
+ (void) initialize {
  if (self == [DiskFileListPb class]) {
    defaultDiskFileListPbInstance = [[DiskFileListPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDiskFileListPbInstance;
}
- (instancetype) defaultInstance {
  return defaultDiskFileListPbInstance;
}
- (NSArray *)diskFile {
  return diskFileArray;
}
- (DiskFilePb*)diskFileAtIndex:(NSUInteger)index {
  return [diskFileArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.diskFileArray enumerateObjectsUsingBlock:^(DiskFilePb *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.diskFileArray enumerateObjectsUsingBlock:^(DiskFilePb *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DiskFileListPb*) parseFromData:(NSData*) data {
  return (DiskFileListPb*)[[[DiskFileListPb builder] mergeFromData:data] build];
}
+ (DiskFileListPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DiskFileListPb*)[[[DiskFileListPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DiskFileListPb*) parseFromInputStream:(NSInputStream*) input {
  return (DiskFileListPb*)[[[DiskFileListPb builder] mergeFromInputStream:input] build];
}
+ (DiskFileListPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DiskFileListPb*)[[[DiskFileListPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DiskFileListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DiskFileListPb*)[[[DiskFileListPb builder] mergeFromCodedInputStream:input] build];
}
+ (DiskFileListPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DiskFileListPb*)[[[DiskFileListPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DiskFileListPbBuilder*) builder {
  return [[DiskFileListPbBuilder alloc] init];
}
+ (DiskFileListPbBuilder*) builderWithPrototype:(DiskFileListPb*) prototype {
  return [[DiskFileListPb builder] mergeFrom:prototype];
}
- (DiskFileListPbBuilder*) builder {
  return [DiskFileListPb builder];
}
- (DiskFileListPbBuilder*) toBuilder {
  return [DiskFileListPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.diskFileArray enumerateObjectsUsingBlock:^(DiskFilePb *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"diskFile"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (DiskFilePb* element in self.diskFileArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"diskFile"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DiskFileListPb class]]) {
    return NO;
  }
  DiskFileListPb *otherMessage = other;
  return
      [self.diskFileArray isEqualToArray:otherMessage.diskFileArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.diskFileArray enumerateObjectsUsingBlock:^(DiskFilePb *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DiskFileListPbBuilder()
@property (strong) DiskFileListPb* resultDiskFileListPb;
@end

@implementation DiskFileListPbBuilder
@synthesize resultDiskFileListPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDiskFileListPb = [[DiskFileListPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDiskFileListPb;
}
- (DiskFileListPbBuilder*) clear {
  self.resultDiskFileListPb = [[DiskFileListPb alloc] init];
  return self;
}
- (DiskFileListPbBuilder*) clone {
  return [DiskFileListPb builderWithPrototype:resultDiskFileListPb];
}
- (DiskFileListPb*) defaultInstance {
  return [DiskFileListPb defaultInstance];
}
- (DiskFileListPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DiskFileListPb*) buildPartial {
  DiskFileListPb* returnMe = resultDiskFileListPb;
  self.resultDiskFileListPb = nil;
  return returnMe;
}
- (DiskFileListPbBuilder*) mergeFrom:(DiskFileListPb*) other {
  if (other == [DiskFileListPb defaultInstance]) {
    return self;
  }
  if (other.diskFileArray.count > 0) {
    if (resultDiskFileListPb.diskFileArray == nil) {
      resultDiskFileListPb.diskFileArray = [[NSMutableArray alloc] initWithArray:other.diskFileArray];
    } else {
      [resultDiskFileListPb.diskFileArray addObjectsFromArray:other.diskFileArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DiskFileListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DiskFileListPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        DiskFilePbBuilder* subBuilder = [DiskFilePb builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDiskFile:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)diskFile {
  return resultDiskFileListPb.diskFileArray;
}
- (DiskFilePb*)diskFileAtIndex:(NSUInteger)index {
  return [resultDiskFileListPb diskFileAtIndex:index];
}
- (DiskFileListPbBuilder *)addDiskFile:(DiskFilePb*)value {
  if (resultDiskFileListPb.diskFileArray == nil) {
    resultDiskFileListPb.diskFileArray = [[NSMutableArray alloc]init];
  }
  [resultDiskFileListPb.diskFileArray addObject:value];
  return self;
}
- (DiskFileListPbBuilder *)setDiskFileArray:(NSArray *)array {
  resultDiskFileListPb.diskFileArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DiskFileListPbBuilder *)clearDiskFile {
  resultDiskFileListPb.diskFileArray = nil;
  return self;
}
@end

@interface DiskFilePb ()
@property SInt64 id;
@property SInt64 userId;
@property SInt32 isParent;
@property SInt64 parentId;
@property SInt64 fileId;
@property (strong) NSString* fileName;
@property (strong) NSString* fileType;
@property SInt64 fileSize;
@property (strong) NSString* filePath;
@property SInt32 dataStatus;
@property SInt64 modifiedDate;
@property (strong) NSData* file;
@property (strong) NSString* md5;
@end

@implementation DiskFilePb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasIsParent {
  return !!hasIsParent_;
}
- (void) setHasIsParent:(BOOL) _value_ {
  hasIsParent_ = !!_value_;
}
@synthesize isParent;
- (BOOL) hasParentId {
  return !!hasParentId_;
}
- (void) setHasParentId:(BOOL) _value_ {
  hasParentId_ = !!_value_;
}
@synthesize parentId;
- (BOOL) hasFileId {
  return !!hasFileId_;
}
- (void) setHasFileId:(BOOL) _value_ {
  hasFileId_ = !!_value_;
}
@synthesize fileId;
- (BOOL) hasFileName {
  return !!hasFileName_;
}
- (void) setHasFileName:(BOOL) _value_ {
  hasFileName_ = !!_value_;
}
@synthesize fileName;
- (BOOL) hasFileType {
  return !!hasFileType_;
}
- (void) setHasFileType:(BOOL) _value_ {
  hasFileType_ = !!_value_;
}
@synthesize fileType;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) _value_ {
  hasFileSize_ = !!_value_;
}
@synthesize fileSize;
- (BOOL) hasFilePath {
  return !!hasFilePath_;
}
- (void) setHasFilePath:(BOOL) _value_ {
  hasFilePath_ = !!_value_;
}
@synthesize filePath;
- (BOOL) hasDataStatus {
  return !!hasDataStatus_;
}
- (void) setHasDataStatus:(BOOL) _value_ {
  hasDataStatus_ = !!_value_;
}
@synthesize dataStatus;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (BOOL) hasFile {
  return !!hasFile_;
}
- (void) setHasFile:(BOOL) _value_ {
  hasFile_ = !!_value_;
}
@synthesize file;
- (BOOL) hasMd5 {
  return !!hasMd5_;
}
- (void) setHasMd5:(BOOL) _value_ {
  hasMd5_ = !!_value_;
}
@synthesize md5;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.userId = 0L;
    self.isParent = 0;
    self.parentId = 0L;
    self.fileId = 0L;
    self.fileName = @"";
    self.fileType = @"";
    self.fileSize = 0L;
    self.filePath = @"";
    self.dataStatus = 0;
    self.modifiedDate = 0L;
    self.file = [NSData data];
    self.md5 = @"";
  }
  return self;
}
static DiskFilePb* defaultDiskFilePbInstance = nil;
+ (void) initialize {
  if (self == [DiskFilePb class]) {
    defaultDiskFilePbInstance = [[DiskFilePb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDiskFilePbInstance;
}
- (instancetype) defaultInstance {
  return defaultDiskFilePbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasUserId) {
    [output writeInt64:2 value:self.userId];
  }
  if (self.hasIsParent) {
    [output writeInt32:3 value:self.isParent];
  }
  if (self.hasParentId) {
    [output writeInt64:4 value:self.parentId];
  }
  if (self.hasFileId) {
    [output writeInt64:5 value:self.fileId];
  }
  if (self.hasFileName) {
    [output writeString:6 value:self.fileName];
  }
  if (self.hasFileType) {
    [output writeString:7 value:self.fileType];
  }
  if (self.hasFileSize) {
    [output writeInt64:8 value:self.fileSize];
  }
  if (self.hasFilePath) {
    [output writeString:9 value:self.filePath];
  }
  if (self.hasDataStatus) {
    [output writeInt32:10 value:self.dataStatus];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:11 value:self.modifiedDate];
  }
  if (self.hasFile) {
    [output writeData:12 value:self.file];
  }
  if (self.hasMd5) {
    [output writeString:13 value:self.md5];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasUserId) {
    size_ += computeInt64Size(2, self.userId);
  }
  if (self.hasIsParent) {
    size_ += computeInt32Size(3, self.isParent);
  }
  if (self.hasParentId) {
    size_ += computeInt64Size(4, self.parentId);
  }
  if (self.hasFileId) {
    size_ += computeInt64Size(5, self.fileId);
  }
  if (self.hasFileName) {
    size_ += computeStringSize(6, self.fileName);
  }
  if (self.hasFileType) {
    size_ += computeStringSize(7, self.fileType);
  }
  if (self.hasFileSize) {
    size_ += computeInt64Size(8, self.fileSize);
  }
  if (self.hasFilePath) {
    size_ += computeStringSize(9, self.filePath);
  }
  if (self.hasDataStatus) {
    size_ += computeInt32Size(10, self.dataStatus);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(11, self.modifiedDate);
  }
  if (self.hasFile) {
    size_ += computeDataSize(12, self.file);
  }
  if (self.hasMd5) {
    size_ += computeStringSize(13, self.md5);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DiskFilePb*) parseFromData:(NSData*) data {
  return (DiskFilePb*)[[[DiskFilePb builder] mergeFromData:data] build];
}
+ (DiskFilePb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DiskFilePb*)[[[DiskFilePb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DiskFilePb*) parseFromInputStream:(NSInputStream*) input {
  return (DiskFilePb*)[[[DiskFilePb builder] mergeFromInputStream:input] build];
}
+ (DiskFilePb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DiskFilePb*)[[[DiskFilePb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DiskFilePb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DiskFilePb*)[[[DiskFilePb builder] mergeFromCodedInputStream:input] build];
}
+ (DiskFilePb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DiskFilePb*)[[[DiskFilePb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DiskFilePbBuilder*) builder {
  return [[DiskFilePbBuilder alloc] init];
}
+ (DiskFilePbBuilder*) builderWithPrototype:(DiskFilePb*) prototype {
  return [[DiskFilePb builder] mergeFrom:prototype];
}
- (DiskFilePbBuilder*) builder {
  return [DiskFilePb builder];
}
- (DiskFilePbBuilder*) toBuilder {
  return [DiskFilePb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasIsParent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isParent", [NSNumber numberWithInteger:self.isParent]];
  }
  if (self.hasParentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentId", [NSNumber numberWithLongLong:self.parentId]];
  }
  if (self.hasFileId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileId", [NSNumber numberWithLongLong:self.fileId]];
  }
  if (self.hasFileName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileName", self.fileName];
  }
  if (self.hasFileType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileType", self.fileType];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithLongLong:self.fileSize]];
  }
  if (self.hasFilePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", self.filePath];
  }
  if (self.hasDataStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataStatus", [NSNumber numberWithInteger:self.dataStatus]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  if (self.hasFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"file", self.file];
  }
  if (self.hasMd5) {
    [output appendFormat:@"%@%@: %@\n", indent, @"md5", self.md5];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasIsParent) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isParent] forKey: @"isParent"];
  }
  if (self.hasParentId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.parentId] forKey: @"parentId"];
  }
  if (self.hasFileId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fileId] forKey: @"fileId"];
  }
  if (self.hasFileName) {
    [dictionary setObject: self.fileName forKey: @"fileName"];
  }
  if (self.hasFileType) {
    [dictionary setObject: self.fileType forKey: @"fileType"];
  }
  if (self.hasFileSize) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fileSize] forKey: @"fileSize"];
  }
  if (self.hasFilePath) {
    [dictionary setObject: self.filePath forKey: @"filePath"];
  }
  if (self.hasDataStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dataStatus] forKey: @"dataStatus"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  if (self.hasFile) {
    [dictionary setObject: self.file forKey: @"file"];
  }
  if (self.hasMd5) {
    [dictionary setObject: self.md5 forKey: @"md5"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DiskFilePb class]]) {
    return NO;
  }
  DiskFilePb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasIsParent == otherMessage.hasIsParent &&
      (!self.hasIsParent || self.isParent == otherMessage.isParent) &&
      self.hasParentId == otherMessage.hasParentId &&
      (!self.hasParentId || self.parentId == otherMessage.parentId) &&
      self.hasFileId == otherMessage.hasFileId &&
      (!self.hasFileId || self.fileId == otherMessage.fileId) &&
      self.hasFileName == otherMessage.hasFileName &&
      (!self.hasFileName || [self.fileName isEqual:otherMessage.fileName]) &&
      self.hasFileType == otherMessage.hasFileType &&
      (!self.hasFileType || [self.fileType isEqual:otherMessage.fileType]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      self.hasFilePath == otherMessage.hasFilePath &&
      (!self.hasFilePath || [self.filePath isEqual:otherMessage.filePath]) &&
      self.hasDataStatus == otherMessage.hasDataStatus &&
      (!self.hasDataStatus || self.dataStatus == otherMessage.dataStatus) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      self.hasFile == otherMessage.hasFile &&
      (!self.hasFile || [self.file isEqual:otherMessage.file]) &&
      self.hasMd5 == otherMessage.hasMd5 &&
      (!self.hasMd5 || [self.md5 isEqual:otherMessage.md5]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasIsParent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isParent] hash];
  }
  if (self.hasParentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.parentId] hash];
  }
  if (self.hasFileId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fileId] hash];
  }
  if (self.hasFileName) {
    hashCode = hashCode * 31 + [self.fileName hash];
  }
  if (self.hasFileType) {
    hashCode = hashCode * 31 + [self.fileType hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fileSize] hash];
  }
  if (self.hasFilePath) {
    hashCode = hashCode * 31 + [self.filePath hash];
  }
  if (self.hasDataStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dataStatus] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  if (self.hasFile) {
    hashCode = hashCode * 31 + [self.file hash];
  }
  if (self.hasMd5) {
    hashCode = hashCode * 31 + [self.md5 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DiskFilePbBuilder()
@property (strong) DiskFilePb* resultDiskFilePb;
@end

@implementation DiskFilePbBuilder
@synthesize resultDiskFilePb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDiskFilePb = [[DiskFilePb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDiskFilePb;
}
- (DiskFilePbBuilder*) clear {
  self.resultDiskFilePb = [[DiskFilePb alloc] init];
  return self;
}
- (DiskFilePbBuilder*) clone {
  return [DiskFilePb builderWithPrototype:resultDiskFilePb];
}
- (DiskFilePb*) defaultInstance {
  return [DiskFilePb defaultInstance];
}
- (DiskFilePb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DiskFilePb*) buildPartial {
  DiskFilePb* returnMe = resultDiskFilePb;
  self.resultDiskFilePb = nil;
  return returnMe;
}
- (DiskFilePbBuilder*) mergeFrom:(DiskFilePb*) other {
  if (other == [DiskFilePb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasIsParent) {
    [self setIsParent:other.isParent];
  }
  if (other.hasParentId) {
    [self setParentId:other.parentId];
  }
  if (other.hasFileId) {
    [self setFileId:other.fileId];
  }
  if (other.hasFileName) {
    [self setFileName:other.fileName];
  }
  if (other.hasFileType) {
    [self setFileType:other.fileType];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  if (other.hasFilePath) {
    [self setFilePath:other.filePath];
  }
  if (other.hasDataStatus) {
    [self setDataStatus:other.dataStatus];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasFile) {
    [self setFile:other.file];
  }
  if (other.hasMd5) {
    [self setMd5:other.md5];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DiskFilePbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DiskFilePbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setUserId:[input readInt64]];
        break;
      }
      case 24: {
        [self setIsParent:[input readInt32]];
        break;
      }
      case 32: {
        [self setParentId:[input readInt64]];
        break;
      }
      case 40: {
        [self setFileId:[input readInt64]];
        break;
      }
      case 50: {
        [self setFileName:[input readString]];
        break;
      }
      case 58: {
        [self setFileType:[input readString]];
        break;
      }
      case 64: {
        [self setFileSize:[input readInt64]];
        break;
      }
      case 74: {
        [self setFilePath:[input readString]];
        break;
      }
      case 80: {
        [self setDataStatus:[input readInt32]];
        break;
      }
      case 88: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 98: {
        [self setFile:[input readData]];
        break;
      }
      case 106: {
        [self setMd5:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultDiskFilePb.hasId;
}
- (SInt64) id {
  return resultDiskFilePb.id;
}
- (DiskFilePbBuilder*) setId:(SInt64) value {
  resultDiskFilePb.hasId = YES;
  resultDiskFilePb.id = value;
  return self;
}
- (DiskFilePbBuilder*) clearId {
  resultDiskFilePb.hasId = NO;
  resultDiskFilePb.id = 0L;
  return self;
}
- (BOOL) hasUserId {
  return resultDiskFilePb.hasUserId;
}
- (SInt64) userId {
  return resultDiskFilePb.userId;
}
- (DiskFilePbBuilder*) setUserId:(SInt64) value {
  resultDiskFilePb.hasUserId = YES;
  resultDiskFilePb.userId = value;
  return self;
}
- (DiskFilePbBuilder*) clearUserId {
  resultDiskFilePb.hasUserId = NO;
  resultDiskFilePb.userId = 0L;
  return self;
}
- (BOOL) hasIsParent {
  return resultDiskFilePb.hasIsParent;
}
- (SInt32) isParent {
  return resultDiskFilePb.isParent;
}
- (DiskFilePbBuilder*) setIsParent:(SInt32) value {
  resultDiskFilePb.hasIsParent = YES;
  resultDiskFilePb.isParent = value;
  return self;
}
- (DiskFilePbBuilder*) clearIsParent {
  resultDiskFilePb.hasIsParent = NO;
  resultDiskFilePb.isParent = 0;
  return self;
}
- (BOOL) hasParentId {
  return resultDiskFilePb.hasParentId;
}
- (SInt64) parentId {
  return resultDiskFilePb.parentId;
}
- (DiskFilePbBuilder*) setParentId:(SInt64) value {
  resultDiskFilePb.hasParentId = YES;
  resultDiskFilePb.parentId = value;
  return self;
}
- (DiskFilePbBuilder*) clearParentId {
  resultDiskFilePb.hasParentId = NO;
  resultDiskFilePb.parentId = 0L;
  return self;
}
- (BOOL) hasFileId {
  return resultDiskFilePb.hasFileId;
}
- (SInt64) fileId {
  return resultDiskFilePb.fileId;
}
- (DiskFilePbBuilder*) setFileId:(SInt64) value {
  resultDiskFilePb.hasFileId = YES;
  resultDiskFilePb.fileId = value;
  return self;
}
- (DiskFilePbBuilder*) clearFileId {
  resultDiskFilePb.hasFileId = NO;
  resultDiskFilePb.fileId = 0L;
  return self;
}
- (BOOL) hasFileName {
  return resultDiskFilePb.hasFileName;
}
- (NSString*) fileName {
  return resultDiskFilePb.fileName;
}
- (DiskFilePbBuilder*) setFileName:(NSString*) value {
  resultDiskFilePb.hasFileName = YES;
  resultDiskFilePb.fileName = value;
  return self;
}
- (DiskFilePbBuilder*) clearFileName {
  resultDiskFilePb.hasFileName = NO;
  resultDiskFilePb.fileName = @"";
  return self;
}
- (BOOL) hasFileType {
  return resultDiskFilePb.hasFileType;
}
- (NSString*) fileType {
  return resultDiskFilePb.fileType;
}
- (DiskFilePbBuilder*) setFileType:(NSString*) value {
  resultDiskFilePb.hasFileType = YES;
  resultDiskFilePb.fileType = value;
  return self;
}
- (DiskFilePbBuilder*) clearFileType {
  resultDiskFilePb.hasFileType = NO;
  resultDiskFilePb.fileType = @"";
  return self;
}
- (BOOL) hasFileSize {
  return resultDiskFilePb.hasFileSize;
}
- (SInt64) fileSize {
  return resultDiskFilePb.fileSize;
}
- (DiskFilePbBuilder*) setFileSize:(SInt64) value {
  resultDiskFilePb.hasFileSize = YES;
  resultDiskFilePb.fileSize = value;
  return self;
}
- (DiskFilePbBuilder*) clearFileSize {
  resultDiskFilePb.hasFileSize = NO;
  resultDiskFilePb.fileSize = 0L;
  return self;
}
- (BOOL) hasFilePath {
  return resultDiskFilePb.hasFilePath;
}
- (NSString*) filePath {
  return resultDiskFilePb.filePath;
}
- (DiskFilePbBuilder*) setFilePath:(NSString*) value {
  resultDiskFilePb.hasFilePath = YES;
  resultDiskFilePb.filePath = value;
  return self;
}
- (DiskFilePbBuilder*) clearFilePath {
  resultDiskFilePb.hasFilePath = NO;
  resultDiskFilePb.filePath = @"";
  return self;
}
- (BOOL) hasDataStatus {
  return resultDiskFilePb.hasDataStatus;
}
- (SInt32) dataStatus {
  return resultDiskFilePb.dataStatus;
}
- (DiskFilePbBuilder*) setDataStatus:(SInt32) value {
  resultDiskFilePb.hasDataStatus = YES;
  resultDiskFilePb.dataStatus = value;
  return self;
}
- (DiskFilePbBuilder*) clearDataStatus {
  resultDiskFilePb.hasDataStatus = NO;
  resultDiskFilePb.dataStatus = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultDiskFilePb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultDiskFilePb.modifiedDate;
}
- (DiskFilePbBuilder*) setModifiedDate:(SInt64) value {
  resultDiskFilePb.hasModifiedDate = YES;
  resultDiskFilePb.modifiedDate = value;
  return self;
}
- (DiskFilePbBuilder*) clearModifiedDate {
  resultDiskFilePb.hasModifiedDate = NO;
  resultDiskFilePb.modifiedDate = 0L;
  return self;
}
- (BOOL) hasFile {
  return resultDiskFilePb.hasFile;
}
- (NSData*) file {
  return resultDiskFilePb.file;
}
- (DiskFilePbBuilder*) setFile:(NSData*) value {
  resultDiskFilePb.hasFile = YES;
  resultDiskFilePb.file = value;
  return self;
}
- (DiskFilePbBuilder*) clearFile {
  resultDiskFilePb.hasFile = NO;
  resultDiskFilePb.file = [NSData data];
  return self;
}
- (BOOL) hasMd5 {
  return resultDiskFilePb.hasMd5;
}
- (NSString*) md5 {
  return resultDiskFilePb.md5;
}
- (DiskFilePbBuilder*) setMd5:(NSString*) value {
  resultDiskFilePb.hasMd5 = YES;
  resultDiskFilePb.md5 = value;
  return self;
}
- (DiskFilePbBuilder*) clearMd5 {
  resultDiskFilePb.hasMd5 = NO;
  resultDiskFilePb.md5 = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
