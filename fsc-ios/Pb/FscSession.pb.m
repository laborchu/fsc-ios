// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FscSession.pb.h"
// @@protoc_insertion_point(imports)

@implementation FscSessionRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FscSessionRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FscChatUserRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FscSessionPb ()
@property SInt64 id;
@property SInt64 userId;
@property SInt32 type;
@property SInt64 msId;
@property (strong) NSString* msName;
@property SInt64 sessionId;
@property SInt64 modifiedDate;
@property SInt32 dataStatus;
@property SInt64 timestamp;
@property SInt64 readId;
@property SInt64 lastId;
@property (strong) USessionPb* userSessionPb;
@property (strong) URecorderPb* userRecorderPb;
@end

@implementation FscSessionPb

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasMsId {
  return !!hasMsId_;
}
- (void) setHasMsId:(BOOL) _value_ {
  hasMsId_ = !!_value_;
}
@synthesize msId;
- (BOOL) hasMsName {
  return !!hasMsName_;
}
- (void) setHasMsName:(BOOL) _value_ {
  hasMsName_ = !!_value_;
}
@synthesize msName;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (BOOL) hasDataStatus {
  return !!hasDataStatus_;
}
- (void) setHasDataStatus:(BOOL) _value_ {
  hasDataStatus_ = !!_value_;
}
@synthesize dataStatus;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasReadId {
  return !!hasReadId_;
}
- (void) setHasReadId:(BOOL) _value_ {
  hasReadId_ = !!_value_;
}
@synthesize readId;
- (BOOL) hasLastId {
  return !!hasLastId_;
}
- (void) setHasLastId:(BOOL) _value_ {
  hasLastId_ = !!_value_;
}
@synthesize lastId;
- (BOOL) hasUserSessionPb {
  return !!hasUserSessionPb_;
}
- (void) setHasUserSessionPb:(BOOL) _value_ {
  hasUserSessionPb_ = !!_value_;
}
@synthesize userSessionPb;
- (BOOL) hasUserRecorderPb {
  return !!hasUserRecorderPb_;
}
- (void) setHasUserRecorderPb:(BOOL) _value_ {
  hasUserRecorderPb_ = !!_value_;
}
@synthesize userRecorderPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.userId = 0L;
    self.type = 0;
    self.msId = 0L;
    self.msName = @"";
    self.sessionId = 0L;
    self.modifiedDate = 0L;
    self.dataStatus = 0;
    self.timestamp = 0L;
    self.readId = 0L;
    self.lastId = 0L;
    self.userSessionPb = [USessionPb defaultInstance];
    self.userRecorderPb = [URecorderPb defaultInstance];
  }
  return self;
}
static FscSessionPb* defaultFscSessionPbInstance = nil;
+ (void) initialize {
  if (self == [FscSessionPb class]) {
    defaultFscSessionPbInstance = [[FscSessionPb alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFscSessionPbInstance;
}
- (instancetype) defaultInstance {
  return defaultFscSessionPbInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt64:1 value:self.id];
  }
  if (self.hasUserId) {
    [output writeInt64:2 value:self.userId];
  }
  if (self.hasType) {
    [output writeInt32:3 value:self.type];
  }
  if (self.hasMsId) {
    [output writeInt64:4 value:self.msId];
  }
  if (self.hasMsName) {
    [output writeString:5 value:self.msName];
  }
  if (self.hasSessionId) {
    [output writeInt64:6 value:self.sessionId];
  }
  if (self.hasModifiedDate) {
    [output writeInt64:7 value:self.modifiedDate];
  }
  if (self.hasDataStatus) {
    [output writeInt32:8 value:self.dataStatus];
  }
  if (self.hasTimestamp) {
    [output writeInt64:9 value:self.timestamp];
  }
  if (self.hasReadId) {
    [output writeInt64:10 value:self.readId];
  }
  if (self.hasLastId) {
    [output writeInt64:11 value:self.lastId];
  }
  if (self.hasUserSessionPb) {
    [output writeMessage:12 value:self.userSessionPb];
  }
  if (self.hasUserRecorderPb) {
    [output writeMessage:13 value:self.userRecorderPb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt64Size(1, self.id);
  }
  if (self.hasUserId) {
    size_ += computeInt64Size(2, self.userId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(3, self.type);
  }
  if (self.hasMsId) {
    size_ += computeInt64Size(4, self.msId);
  }
  if (self.hasMsName) {
    size_ += computeStringSize(5, self.msName);
  }
  if (self.hasSessionId) {
    size_ += computeInt64Size(6, self.sessionId);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt64Size(7, self.modifiedDate);
  }
  if (self.hasDataStatus) {
    size_ += computeInt32Size(8, self.dataStatus);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(9, self.timestamp);
  }
  if (self.hasReadId) {
    size_ += computeInt64Size(10, self.readId);
  }
  if (self.hasLastId) {
    size_ += computeInt64Size(11, self.lastId);
  }
  if (self.hasUserSessionPb) {
    size_ += computeMessageSize(12, self.userSessionPb);
  }
  if (self.hasUserRecorderPb) {
    size_ += computeMessageSize(13, self.userRecorderPb);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FscSessionPb*) parseFromData:(NSData*) data {
  return (FscSessionPb*)[[[FscSessionPb builder] mergeFromData:data] build];
}
+ (FscSessionPb*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscSessionPb*)[[[FscSessionPb builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FscSessionPb*) parseFromInputStream:(NSInputStream*) input {
  return (FscSessionPb*)[[[FscSessionPb builder] mergeFromInputStream:input] build];
}
+ (FscSessionPb*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscSessionPb*)[[[FscSessionPb builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscSessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FscSessionPb*)[[[FscSessionPb builder] mergeFromCodedInputStream:input] build];
}
+ (FscSessionPb*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FscSessionPb*)[[[FscSessionPb builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FscSessionPbBuilder*) builder {
  return [[FscSessionPbBuilder alloc] init];
}
+ (FscSessionPbBuilder*) builderWithPrototype:(FscSessionPb*) prototype {
  return [[FscSessionPb builder] mergeFrom:prototype];
}
- (FscSessionPbBuilder*) builder {
  return [FscSessionPb builder];
}
- (FscSessionPbBuilder*) toBuilder {
  return [FscSessionPb builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasMsId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msId", [NSNumber numberWithLongLong:self.msId]];
  }
  if (self.hasMsName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msName", self.msName];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithLongLong:self.modifiedDate]];
  }
  if (self.hasDataStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataStatus", [NSNumber numberWithInteger:self.dataStatus]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasReadId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"readId", [NSNumber numberWithLongLong:self.readId]];
  }
  if (self.hasLastId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastId", [NSNumber numberWithLongLong:self.lastId]];
  }
  if (self.hasUserSessionPb) {
    [output appendFormat:@"%@%@ {\n", indent, @"userSessionPb"];
    [self.userSessionPb writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserRecorderPb) {
    [output appendFormat:@"%@%@ {\n", indent, @"userRecorderPb"];
    [self.userRecorderPb writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasMsId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.msId] forKey: @"msId"];
  }
  if (self.hasMsName) {
    [dictionary setObject: self.msName forKey: @"msName"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasModifiedDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.modifiedDate] forKey: @"modifiedDate"];
  }
  if (self.hasDataStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dataStatus] forKey: @"dataStatus"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasReadId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.readId] forKey: @"readId"];
  }
  if (self.hasLastId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.lastId] forKey: @"lastId"];
  }
  if (self.hasUserSessionPb) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userSessionPb storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userSessionPb"];
  }
  if (self.hasUserRecorderPb) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userRecorderPb storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userRecorderPb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FscSessionPb class]]) {
    return NO;
  }
  FscSessionPb *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasMsId == otherMessage.hasMsId &&
      (!self.hasMsId || self.msId == otherMessage.msId) &&
      self.hasMsName == otherMessage.hasMsName &&
      (!self.hasMsName || [self.msName isEqual:otherMessage.msName]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      self.hasDataStatus == otherMessage.hasDataStatus &&
      (!self.hasDataStatus || self.dataStatus == otherMessage.dataStatus) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasReadId == otherMessage.hasReadId &&
      (!self.hasReadId || self.readId == otherMessage.readId) &&
      self.hasLastId == otherMessage.hasLastId &&
      (!self.hasLastId || self.lastId == otherMessage.lastId) &&
      self.hasUserSessionPb == otherMessage.hasUserSessionPb &&
      (!self.hasUserSessionPb || [self.userSessionPb isEqual:otherMessage.userSessionPb]) &&
      self.hasUserRecorderPb == otherMessage.hasUserRecorderPb &&
      (!self.hasUserRecorderPb || [self.userRecorderPb isEqual:otherMessage.userRecorderPb]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasMsId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.msId] hash];
  }
  if (self.hasMsName) {
    hashCode = hashCode * 31 + [self.msName hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.modifiedDate] hash];
  }
  if (self.hasDataStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dataStatus] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasReadId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.readId] hash];
  }
  if (self.hasLastId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastId] hash];
  }
  if (self.hasUserSessionPb) {
    hashCode = hashCode * 31 + [self.userSessionPb hash];
  }
  if (self.hasUserRecorderPb) {
    hashCode = hashCode * 31 + [self.userRecorderPb hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FscSessionPbBuilder()
@property (strong) FscSessionPb* resultFscSessionPb;
@end

@implementation FscSessionPbBuilder
@synthesize resultFscSessionPb;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFscSessionPb = [[FscSessionPb alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFscSessionPb;
}
- (FscSessionPbBuilder*) clear {
  self.resultFscSessionPb = [[FscSessionPb alloc] init];
  return self;
}
- (FscSessionPbBuilder*) clone {
  return [FscSessionPb builderWithPrototype:resultFscSessionPb];
}
- (FscSessionPb*) defaultInstance {
  return [FscSessionPb defaultInstance];
}
- (FscSessionPb*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FscSessionPb*) buildPartial {
  FscSessionPb* returnMe = resultFscSessionPb;
  self.resultFscSessionPb = nil;
  return returnMe;
}
- (FscSessionPbBuilder*) mergeFrom:(FscSessionPb*) other {
  if (other == [FscSessionPb defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasMsId) {
    [self setMsId:other.msId];
  }
  if (other.hasMsName) {
    [self setMsName:other.msName];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasDataStatus) {
    [self setDataStatus:other.dataStatus];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasReadId) {
    [self setReadId:other.readId];
  }
  if (other.hasLastId) {
    [self setLastId:other.lastId];
  }
  if (other.hasUserSessionPb) {
    [self mergeUserSessionPb:other.userSessionPb];
  }
  if (other.hasUserRecorderPb) {
    [self mergeUserRecorderPb:other.userRecorderPb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FscSessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FscSessionPbBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt64]];
        break;
      }
      case 16: {
        [self setUserId:[input readInt64]];
        break;
      }
      case 24: {
        [self setType:[input readInt32]];
        break;
      }
      case 32: {
        [self setMsId:[input readInt64]];
        break;
      }
      case 42: {
        [self setMsName:[input readString]];
        break;
      }
      case 48: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 56: {
        [self setModifiedDate:[input readInt64]];
        break;
      }
      case 64: {
        [self setDataStatus:[input readInt32]];
        break;
      }
      case 72: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 80: {
        [self setReadId:[input readInt64]];
        break;
      }
      case 88: {
        [self setLastId:[input readInt64]];
        break;
      }
      case 98: {
        USessionPbBuilder* subBuilder = [USessionPb builder];
        if (self.hasUserSessionPb) {
          [subBuilder mergeFrom:self.userSessionPb];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserSessionPb:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        URecorderPbBuilder* subBuilder = [URecorderPb builder];
        if (self.hasUserRecorderPb) {
          [subBuilder mergeFrom:self.userRecorderPb];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserRecorderPb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultFscSessionPb.hasId;
}
- (SInt64) id {
  return resultFscSessionPb.id;
}
- (FscSessionPbBuilder*) setId:(SInt64) value {
  resultFscSessionPb.hasId = YES;
  resultFscSessionPb.id = value;
  return self;
}
- (FscSessionPbBuilder*) clearId {
  resultFscSessionPb.hasId = NO;
  resultFscSessionPb.id = 0L;
  return self;
}
- (BOOL) hasUserId {
  return resultFscSessionPb.hasUserId;
}
- (SInt64) userId {
  return resultFscSessionPb.userId;
}
- (FscSessionPbBuilder*) setUserId:(SInt64) value {
  resultFscSessionPb.hasUserId = YES;
  resultFscSessionPb.userId = value;
  return self;
}
- (FscSessionPbBuilder*) clearUserId {
  resultFscSessionPb.hasUserId = NO;
  resultFscSessionPb.userId = 0L;
  return self;
}
- (BOOL) hasType {
  return resultFscSessionPb.hasType;
}
- (SInt32) type {
  return resultFscSessionPb.type;
}
- (FscSessionPbBuilder*) setType:(SInt32) value {
  resultFscSessionPb.hasType = YES;
  resultFscSessionPb.type = value;
  return self;
}
- (FscSessionPbBuilder*) clearType {
  resultFscSessionPb.hasType = NO;
  resultFscSessionPb.type = 0;
  return self;
}
- (BOOL) hasMsId {
  return resultFscSessionPb.hasMsId;
}
- (SInt64) msId {
  return resultFscSessionPb.msId;
}
- (FscSessionPbBuilder*) setMsId:(SInt64) value {
  resultFscSessionPb.hasMsId = YES;
  resultFscSessionPb.msId = value;
  return self;
}
- (FscSessionPbBuilder*) clearMsId {
  resultFscSessionPb.hasMsId = NO;
  resultFscSessionPb.msId = 0L;
  return self;
}
- (BOOL) hasMsName {
  return resultFscSessionPb.hasMsName;
}
- (NSString*) msName {
  return resultFscSessionPb.msName;
}
- (FscSessionPbBuilder*) setMsName:(NSString*) value {
  resultFscSessionPb.hasMsName = YES;
  resultFscSessionPb.msName = value;
  return self;
}
- (FscSessionPbBuilder*) clearMsName {
  resultFscSessionPb.hasMsName = NO;
  resultFscSessionPb.msName = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultFscSessionPb.hasSessionId;
}
- (SInt64) sessionId {
  return resultFscSessionPb.sessionId;
}
- (FscSessionPbBuilder*) setSessionId:(SInt64) value {
  resultFscSessionPb.hasSessionId = YES;
  resultFscSessionPb.sessionId = value;
  return self;
}
- (FscSessionPbBuilder*) clearSessionId {
  resultFscSessionPb.hasSessionId = NO;
  resultFscSessionPb.sessionId = 0L;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultFscSessionPb.hasModifiedDate;
}
- (SInt64) modifiedDate {
  return resultFscSessionPb.modifiedDate;
}
- (FscSessionPbBuilder*) setModifiedDate:(SInt64) value {
  resultFscSessionPb.hasModifiedDate = YES;
  resultFscSessionPb.modifiedDate = value;
  return self;
}
- (FscSessionPbBuilder*) clearModifiedDate {
  resultFscSessionPb.hasModifiedDate = NO;
  resultFscSessionPb.modifiedDate = 0L;
  return self;
}
- (BOOL) hasDataStatus {
  return resultFscSessionPb.hasDataStatus;
}
- (SInt32) dataStatus {
  return resultFscSessionPb.dataStatus;
}
- (FscSessionPbBuilder*) setDataStatus:(SInt32) value {
  resultFscSessionPb.hasDataStatus = YES;
  resultFscSessionPb.dataStatus = value;
  return self;
}
- (FscSessionPbBuilder*) clearDataStatus {
  resultFscSessionPb.hasDataStatus = NO;
  resultFscSessionPb.dataStatus = 0;
  return self;
}
- (BOOL) hasTimestamp {
  return resultFscSessionPb.hasTimestamp;
}
- (SInt64) timestamp {
  return resultFscSessionPb.timestamp;
}
- (FscSessionPbBuilder*) setTimestamp:(SInt64) value {
  resultFscSessionPb.hasTimestamp = YES;
  resultFscSessionPb.timestamp = value;
  return self;
}
- (FscSessionPbBuilder*) clearTimestamp {
  resultFscSessionPb.hasTimestamp = NO;
  resultFscSessionPb.timestamp = 0L;
  return self;
}
- (BOOL) hasReadId {
  return resultFscSessionPb.hasReadId;
}
- (SInt64) readId {
  return resultFscSessionPb.readId;
}
- (FscSessionPbBuilder*) setReadId:(SInt64) value {
  resultFscSessionPb.hasReadId = YES;
  resultFscSessionPb.readId = value;
  return self;
}
- (FscSessionPbBuilder*) clearReadId {
  resultFscSessionPb.hasReadId = NO;
  resultFscSessionPb.readId = 0L;
  return self;
}
- (BOOL) hasLastId {
  return resultFscSessionPb.hasLastId;
}
- (SInt64) lastId {
  return resultFscSessionPb.lastId;
}
- (FscSessionPbBuilder*) setLastId:(SInt64) value {
  resultFscSessionPb.hasLastId = YES;
  resultFscSessionPb.lastId = value;
  return self;
}
- (FscSessionPbBuilder*) clearLastId {
  resultFscSessionPb.hasLastId = NO;
  resultFscSessionPb.lastId = 0L;
  return self;
}
- (BOOL) hasUserSessionPb {
  return resultFscSessionPb.hasUserSessionPb;
}
- (USessionPb*) userSessionPb {
  return resultFscSessionPb.userSessionPb;
}
- (FscSessionPbBuilder*) setUserSessionPb:(USessionPb*) value {
  resultFscSessionPb.hasUserSessionPb = YES;
  resultFscSessionPb.userSessionPb = value;
  return self;
}
- (FscSessionPbBuilder*) setUserSessionPbBuilder:(USessionPbBuilder*) builderForValue {
  return [self setUserSessionPb:[builderForValue build]];
}
- (FscSessionPbBuilder*) mergeUserSessionPb:(USessionPb*) value {
  if (resultFscSessionPb.hasUserSessionPb &&
      resultFscSessionPb.userSessionPb != [USessionPb defaultInstance]) {
    resultFscSessionPb.userSessionPb =
      [[[USessionPb builderWithPrototype:resultFscSessionPb.userSessionPb] mergeFrom:value] buildPartial];
  } else {
    resultFscSessionPb.userSessionPb = value;
  }
  resultFscSessionPb.hasUserSessionPb = YES;
  return self;
}
- (FscSessionPbBuilder*) clearUserSessionPb {
  resultFscSessionPb.hasUserSessionPb = NO;
  resultFscSessionPb.userSessionPb = [USessionPb defaultInstance];
  return self;
}
- (BOOL) hasUserRecorderPb {
  return resultFscSessionPb.hasUserRecorderPb;
}
- (URecorderPb*) userRecorderPb {
  return resultFscSessionPb.userRecorderPb;
}
- (FscSessionPbBuilder*) setUserRecorderPb:(URecorderPb*) value {
  resultFscSessionPb.hasUserRecorderPb = YES;
  resultFscSessionPb.userRecorderPb = value;
  return self;
}
- (FscSessionPbBuilder*) setUserRecorderPbBuilder:(URecorderPbBuilder*) builderForValue {
  return [self setUserRecorderPb:[builderForValue build]];
}
- (FscSessionPbBuilder*) mergeUserRecorderPb:(URecorderPb*) value {
  if (resultFscSessionPb.hasUserRecorderPb &&
      resultFscSessionPb.userRecorderPb != [URecorderPb defaultInstance]) {
    resultFscSessionPb.userRecorderPb =
      [[[URecorderPb builderWithPrototype:resultFscSessionPb.userRecorderPb] mergeFrom:value] buildPartial];
  } else {
    resultFscSessionPb.userRecorderPb = value;
  }
  resultFscSessionPb.hasUserRecorderPb = YES;
  return self;
}
- (FscSessionPbBuilder*) clearUserRecorderPb {
  resultFscSessionPb.hasUserRecorderPb = NO;
  resultFscSessionPb.userRecorderPb = [URecorderPb defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
